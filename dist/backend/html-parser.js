System.register([], function (_export) {
	"use strict";

	var startTag, endTag, attr, empty, block, inline, closeSelf, fillAttrs, special, HTMLParser;

	function makeMap(str) {
		var obj = {},
		    items = str.split(",");
		for (var i = 0; i < items.length; i++) obj[items[i]] = true;
		return obj;
	}
	return {
		setters: [],
		execute: function () {
			startTag = /^<([-A-Za-z0-9_]+)((?:\s+[a-zA-Z_:][-a-zA-Z0-9_:.]*(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)>/;
			endTag = /^<\/([-A-Za-z0-9_]+)[^>]*>/;
			attr = /([a-zA-Z_:][-a-zA-Z0-9_:.]*)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|([^>\s]+)))?/g;
			empty = makeMap("area,base,basefont,br,col,frame,hr,img,input,link,meta,param,embed,command,keygen,source,track,wbr");
			block = makeMap("a,address,article,applet,aside,audio,blockquote,button,canvas,center,dd,del,dir,div,dl,dt,fieldset,figcaption,figure,footer,form,frameset,h1,h2,h3,h4,h5,h6,header,hgroup,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,output,p,pre,section,script,table,tbody,td,tfoot,th,thead,tr,ul,video");
			inline = makeMap("abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var");
			closeSelf = makeMap("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr");
			fillAttrs = makeMap("checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected");
			special = makeMap("script,style,source-code,narrative");

			HTMLParser = function HTMLParser(html, handler) {
				var index,
				    chars,
				    match,
				    stack = [],
				    last = html;
				stack.last = function () {
					return this[this.length - 1];
				};

				while (html) {
					chars = true;

					if (!stack.last() || !special[stack.last()]) {
						if (html.indexOf("<!--") == 0) {
							index = html.indexOf("-->");

							if (index >= 0) {
								if (handler.comment) handler.comment(html.substring(4, index));
								html = html.substring(index + 3);
								chars = false;
							}
						} else if (html.indexOf("</") == 0) {
								match = html.match(endTag);

								if (match) {
									html = html.substring(match[0].length);
									match[0].replace(endTag, parseEndTag);
									chars = false;
								}
							} else if (html.indexOf("<") == 0) {
									match = html.match(startTag);

									if (match) {
										html = html.substring(match[0].length);
										match[0].replace(startTag, parseStartTag);
										chars = false;
									}
								}

						if (chars) {
							index = html.indexOf("<");

							var text = index < 0 ? html : html.substring(0, index);
							html = index < 0 ? "" : html.substring(index);

							if (handler.chars) handler.chars(text);
						}
					} else {
						html = html.replace(new RegExp("([\\s\\S]*?)<\/" + stack.last() + "[^>]*>"), function (all, text) {
							text = text.replace(/<!--([\s\S]*?)-->|<!\[CDATA\[([\s\S]*?)]]>/g, "$1$2");
							if (handler.chars) handler.chars(text);

							return "";
						});

						parseEndTag("", stack.last());
					}

					if (html == last) throw "Parse Error: " + html;
					last = html;
				}

				parseEndTag();

				function parseStartTag(tag, tagName, rest, unary) {
					tagName = tagName.toLowerCase();

					if (block[tagName]) {
						while (stack.last() && inline[stack.last()]) {
							parseEndTag("", stack.last());
						}
					}

					if (closeSelf[tagName] && stack.last() == tagName) {
						parseEndTag("", tagName);
					}

					unary = empty[tagName] || !!unary;

					if (!unary) stack.push(tagName);

					if (handler.start) {
						var attrs = [];

						rest.replace(attr, function (match, name) {
							var value = arguments[2] ? arguments[2] : arguments[3] ? arguments[3] : arguments[4] ? arguments[4] : fillAttrs[name] ? name : "";

							attrs.push({
								name: name,
								value: value,
								escaped: value.replace(/(^|[^\\])"/g, '$1\\\"') });
						});

						if (handler.start) handler.start(tagName, attrs, unary);
					}
				}

				function parseEndTag(tag, tagName) {
					if (!tagName) var pos = 0;else for (var pos = stack.length - 1; pos >= 0; pos--) if (stack[pos] == tagName) break;

					if (pos >= 0) {
						for (var i = stack.length - 1; i >= pos; i--) if (handler.end) handler.end(stack[i]);

						stack.length = pos;
					}
				}
			};

			_export("HTMLParser", HTMLParser);
		}
	};
});
//# sourceMappingURL=data:application/json;base64,
