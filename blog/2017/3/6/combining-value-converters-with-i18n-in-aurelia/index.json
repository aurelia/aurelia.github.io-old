{"name":"Combining Value Converters with i18n in Aurelia","description":"Today, I'd like to introduce you to Peter Vermeulen, an Aurelia community member with some great thoughts on Aurelia Value Converters and i18n. Peter, take it away....","author":{"name":"AureliaEffect"},"links":{"static":"blog/2017/3/6/combining-value-converters-with-i18n-in-aurelia","html":"blog/2017/3/6/combining-value-converters-with-i18n-in-aurelia/index.html","fragment":"blog/2017/3/6/combining-value-converters-with-i18n-in-aurelia/index-fragment.html","self":"blog/2017/3/6/combining-value-converters-with-i18n-in-aurelia/index.json"},"content":"\nToday, I'd like to introduce you to Peter Vermeulen, an Aurelia community member with some great thoughts on Aurelia Value Converters and i18n. Peter, take it away....\n\n---\n\nMy name is Peter Vermeulen, a freelance Front-End engineer and UX/UI designer with several years of experience in enterprise software. I spend my time helping forward-thinking companies building software with a strong focus on experiences.\n\nMost if not all projects at one point or another will have to provide multilingual support.\n\nAdding i18n support in aurelia is as easy as adding the [aurelia-i18n](https://github.com/aurelia/i18n) plugin and [configuring it](http://aurelia.io/hub.html#/doc/article/aurelia/i18n/latest/i18n-with-aurelia).\n\nBut as a project becomes larger, centralizing your logic into reusable components is the way to go.\n\nThis article describes a way of combining aurelia's value-converters with i18n, to allow reusing them in your locales.\n\nA live preview can be found [here](https://peterver.github.io/aurelia-i18n-value-converters/).\n\n## 0. Getting Started\n\nCreate a new aurelia project by running `au new` (assuming you are using the [aurelia-cli](http://aurelia.io/hub.html#/doc/article/aurelia/framework/latest/the-aurelia-cli/1)).\n\nAfter this has completed, follow the steps at the [i18n-with-aurelia hub section](http://aurelia.io/hub.html#/doc/article/aurelia/i18n/latest/i18n-with-aurelia/1) to configure your aurelia project for internationalization.\n\n## 1. Adjust the i18n Configuration\n\nAurelia-i18n is a wrapper that does two things, and does them well:\n\n* It acts as a proxy around [i18next](https://www.i18next.com) to allow you to configure an aurelia application for i18next support. \n* It provides some syntactic sugar to allow for easier translations\n\nThe fact that it acts as a proxy, allows us to still hook into the **i18next instance** without too much hassle.\n\ni18next provides [interpolation](http://i18next.com/translate/interpolation/) support. This is a way of defining how the specific key-value pairs in your locale file should be processed.\n\nAurelia provides thin wrappers such as the `df` *(dateFormat)* value converter for hooking into this. But what if we wanted to add our own custom value converters into the mix?\n\nA very interesting configuration option for i18next's interpolation feature is the [format](http://i18next.com/translate/formatting/) property. This provides us with a hook into the processing pipeline of i18next. Go ahead and extend your i18n configuration like so:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    return instance.setup({\n      // ...\n      interpolation : {\n        format : function (value, format, lng) {\n          const parts = format.split(':');\n    \n          //  Check if the value converter is registered as a resource\n          const vc = aurelia.resources.valueConverters[parts.shift()];\n    \n          return vc ? vc.toView(value, ...parts) : value;\n        }\n      }\n      // ...\n    });\n  </source-code>\n</code-listing>\n\nThere's a couple of things going on here, let's use an example to explain this step by step.\n\n## 2. Using Value Converters In Your Locales, An Example\n\nLet's consider a value converter called `formatDate`. All this value converter does is receive a date and a format, and return a string representation of that date in the provided format. To make that easier, we're using the date manipulation library [Moment.js](https://momentjs.com/)\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    import moment from 'moment';\n    \n    export class FormatDateValueConverter {\n      toView (value, format) {\n        return moment(value, 'YYYY-MM-DD').format(format);\n      }\n    }\n    \n  </source-code>\n</code-listing>\n\nTo use this in your view you could have a setup like so: \n\n\n<code-listing>\n  <source-code lang=\"HTML\">\n    <span t=\"a\" t-params.bind=\"{date: '2017-02-20}\"></span>\n  </source-code>\n</code-listing>\n\nAnd your locale file could look like this: \n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    {\n      \"a\" : \"Today's date is : {{date, formatDate:MMMM D YYYY}}\"\n    }\n  </source-code>\n</code-listing>\n\nWhen executed, i18next will recognize that the key you're trying to translate contains a section that needs to be interpolated (because of the default prefix and suffix `{{ ... }}` in your locale file).\n\n> Make sure to visit the i18next [docs section](http://i18next.com/docs/options/#interpolation-options) targeting the interpolation options for further info.\n\nAs such it will execute the *interpolation.format* function that we configured in the previous step. This function will receive a `value`, `format` and an optional `lng` parameter.\n\n* Value : The date that we passed; in this case it will be `2017-02-20`\n* Format : Our locale file will define this as being `formatDate:MMMM D YYYY`\n\nOur interpolation function will split the format on the `:` character to become `['formatDate', 'MMMM D YYYY']` where the first part (*formatDate*) would be the name of the value converter we want to use, and the second part (*MMMM D YYYY*) would be the format parameter our value converter requires. Our format function will then look for the value converter in aurelia's registered resources, and will execute the `toView` function with the provided parameters.\n\nAnd behold, the eventual result would be \"Today's date is : February 20 2017\".\n\n## Take note\n\n* If no value converter was registered under the name that you're trying to format, it will simply render the value of the variable you passed to it.\n* This approach will only work if the value converter that you are trying to use is registered as a global resource.\n* Using this approach, you could easily pass in additional parameters to your value converter by doing the following : `valueConverterName:param1:param2:param3`\n \n## Conclusion\nExtending aurelia-i18n is extremely easy, and i'd definitely encourage anyone to try this for him/herself.\n\nFor example try writing any of the following and see for yourselves:\n\n* A value converter to render out currency values using something like [numeral](http://numeraljs.com/)!\n* A value converter to automatically render out a person's fullname, when provided with an object containing personal details\n* Automatically prefix the correct title (Miss/Mr./...) based on the locale\n- ... Anything you can imagine :)\n\nBut most of all, have fun and be creative!\n\n---\n\nIf you'd like to get in touch with Peter, you can visit his company web site [Valkyrie Studios](https://www.valkyriestudios.be) or contact him on [Github](https://github.com/peterver) or through his personal Twitter handle `dragovianDesign` or his company Twitter handle `valkyrie_be`."}