{"name":"Aurelia UX Overhaul","description":"We've been doing some major work on Aurelia UX, both in terms of building out components and refining the core capabilities and approach. In this post, we'd like to share a bit about the details of our most recent set of releases.","author":{"name":"AureliaEffect"},"links":{"static":"blog/2017/11/4/aurelia-ux-overhaul","html":"blog/2017/11/4/aurelia-ux-overhaul/index.html","fragment":"blog/2017/11/4/aurelia-ux-overhaul/index-fragment.html","self":"blog/2017/11/4/aurelia-ux-overhaul/index.json"},"content":"\nWe've been doing some major work on Aurelia UX, both in terms of building out components and refining the core capabilities and approach. In this post, we'd like to share a bit about the details of our most recent set of releases.\n\n## Monorepo\n\nOne of the most noticeable changes in `0.4.0` is that Aurelia UX has moved to use a Monorepo approach. We have implemented [Lerna](https://github.com/lerna/lerna), letting us split out the various components into self-contained packages within a single repo.\n\nThis has several advantages:\n\n* We now have a single repository for the Aurelia UX core and all official components.\n* All issues are now tracked against a single repository.\n* Development, dependency management, setup, testing and releasing are made simpler for both our core team and community.\n* It's now easier to choose which components you wish to include in your own projects.\n\n## Style Engine Overhaul\n\nOne of the many ongoing issues we've had was that the JavaScript interpolation style system did not work well with a variety of tools. First, code editors did not like this and it would cause issues with auto formatting features as well as issues with syntax highlighting. Second, it would never work out of the box with Webpack. The reason for all of this is that the binding syntax that was used was not valid CSS.\n\nEnter CSS Variables. We have completely rewritten the style engine to use CSS Variables out of the box. This gives us a fast and native solution to theming that will work great with existing tools. Now, each component in Aurelia is associated with a TypeScript class that defines the theme. Each property on the class is automatically turned into a CSS variable by the framework. The framework then works to keep the variable values in sync with the theme instance. By default, most theme properties are set to design-language-specific values, such as `control-background` or `control-foreground`. This allows for a great deal of flexibility:\n\n* You can change all components across your app, by simply changing the design language properties.\n* You can change the details of all components of a type by changing the component's theme properties.\n* You can create new instances of themes and associate them with individual components or groups of components. Themes are not just global, but can be scoped and assigned in any number of ways.\n* Themes are \"plain old JavaScript objects\" so they can be updated and manipulated like any object, allowing for real-time or data-driven theming.\n\n### Key New APIs\n\n#### `applyTheme`\n\nProcesses a UxTheme into the corresponding CSS Variables and applies them to the provided element. If no theme is provided then the theme will be setup as a default theme and set CSS Variables in the document head.\n\n#### `applyThemeGroup`\n\nApplies an array of themes. This is to enable the creation of large theme sets that can be easily applied with one call.\n\n## Design Language Improvements\n\nAll swatches and design variables are now exposed as CSS variables. They are given a prefix of `--ux-swatch--` and `--ux-design--`. For example the following CSS variables are just some that are exposed to be used anywhere you use Aurelia UX.\n\nDesign\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    --ux-design--app-background\n    --ux-design--app-foreground\n    --ux-design--control-background\n    --ux-design--control-foreground\n    --ux-design--primary\n    --ux-design--primary-foreground\n  </source-code>\n</code-listing>\n\nSwatches\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    --ux-swatch--blue-grey-p50\n    --ux-swatch--blue-grey-p100\n    --ux-swatch--blue-grey-p200\n    --ux-swatch--blue-grey-p300\n    --ux-swatch--blue-grey-p400\n    --ux-swatch--blue-grey-p500\n    --ux-swatch--blue-grey-p600\n    --ux-swatch--blue-grey-p700\n    --ux-swatch--blue-grey-p800\n    --ux-swatch--blue-grey-p900\n    --ux-swatch--black\n    --ux-swatch--white\n    ...\n  </source-code>\n</code-listing>\n\n## New Publish Location\n\nFinally, as part of this overhaul, we've moved to publishing all Aurelia UX packages under the [aurelia-ux NPM organization](https://www.npmjs.com/org/aurelia-ux). As mentioned above, we've split the 10 current components into their own packages, so you can easily pick which ones you want to use. We've also split out [the core](https://www.npmjs.com/package/@aurelia-ux/core) so that you can use the style engine independently of the components.\n\n## Final Thoughts\n\nThese improvements bring Aurelia UX into better alignment with web standards and evolve our repository factoring, development and release in ways that we believe will foster easier contribution from both our core team and community. We're greatly looking forward to delivering more components, additional themes and empowering new user experiences as we move forward."}