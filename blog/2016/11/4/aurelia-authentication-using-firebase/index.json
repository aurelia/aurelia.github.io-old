{"name":"Aurelia Authentication Using Firebase","description":"As a recovering full-stack developer who went the specialised front-end route a few years ago, the one aspect I have always hated about building any feature-rich web application is authentication. Thankfully a lot of convenient options have popped up over the last couple of years like Auth0 [https://auth0.com/].","author":{"name":"AureliaEffect"},"links":{"static":"blog/2016/11/4/aurelia-authentication-using-firebase","html":"blog/2016/11/4/aurelia-authentication-using-firebase/index.html","fragment":"blog/2016/11/4/aurelia-authentication-using-firebase/index-fragment.html","self":"blog/2016/11/4/aurelia-authentication-using-firebase/index.json"},"content":"\nAs a recovering full-stack developer who went the specialised front-end route a few years ago, the one aspect I have always hated about building any feature-rich web application is authentication. Thankfully a lot of convenient options have popped up over the last couple of years like [Auth0](https://auth0.com/). \n\nIn this post, we are going to be using Firebase's fantastic authentication functionality in an Aurelia CLI application.\n\n## Pre-configure Firebase.\n\nFirstly, create a new Firebase project via the [Firebase developer console](https://console.firebase.google.com).\n\nNow let's enable authentication. On the left-hand side in the project pane, you'll see \"Authentication\" click that and then at the top, choose the \"Sign-in method\" tab where you'll see a list of providers. For the sake of this article, let's just enable Google because we don't need to provide tokens or application ID's like we do for other providers such as Facebook or Twitter.\n\nThe sample application in the Github repository provided (at the end of this post) has the other providers wired up, but you'll need to get app credentials and then enable these providers yourself. Once you've done that, click on the name of your app in the left-hand pane at the top. I called my app \"Aurelia Auth App.\"\n\nThen you'll see three icons; Add Firebase to your iOS app, Add Firebase to your Android app and Add Firebase to your web app. Choose the last one, \"Add Firebase to your web app\", and you'll see a popup which contains the SDK script and some configuration details.\n\n**Mine looked similar to the following:**\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    <script src=\"https://www.gstatic.com/firebasejs/3.6.1/firebase.js\"></script>\n    <script>\n      // Initialize Firebase\n      var config = {\n        apiKey: \"AIzaSyD450934850934805934095834095\",\n        authDomain: \"aurelia-auth-app.firebaseapp.com\",\n        databaseURL: \"https://aurelia-auth-app.firebaseio.com\",\n        storageBucket: \"aurelia-auth-app.appspot.com\",\n        messagingSenderId: \"567567\"\n      };\n      firebase.initializeApp(config);\n    </script>\n  </source-code>\n</code-listing>\n\nDon't use my snippet, make sure you get your own, or this tutorial might not work properly for you. Hold onto it; we'll need it soon.\n\n## Generating an Aurelia app.\n\nUsing Aurelia CLI, we are going to scaffold a new Aurelia application.\n\nMake sure you have [Node.js](http://nodejs.org) installed and then open up a terminal window and install the CLI as a global dependency: \n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    npm install aurelia-cli -g\n  </source-code>\n</code-listing>\n\nOnce this completes, test the CLI installed correctly by typing: `au -v` and a version number should be displayed. \n\nNow, let's create our project. We'll call it \"aurelia-secured\" for the sake of this article, but you can call it whatever you want.\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    au new aurelia-secured\n  </source-code>\n</code-listing>\n\nGo through the prompts and choose whatever works for you. I favour using TypeScript, so I selected TypeScript over Babel. Keep in mind code snippets you might encounter in this post are TypeScript, but can be quickly changed to be plain old Javascript.\n\nDuring the prompts, make sure you choose to install the dependencies as well. This will just run `npm install`, but it is one less step to worry about if you do it during the CLI process.\n\n## Coding our app.\n\nFirstly, in the newly created application folder, open up `index.html` and above the script which imports `scripts/vendor-bundle.js` paste in your provided SDK code from Firebase. We do this to ensure Firebase's SDK loads before Aurelia code.\n\nYour `index.html` file should resemble closely to the following:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    <body aurelia-app=\"main\">\n        <script src=\"https://www.gstatic.com/firebasejs/3.6.1/firebase.js\"></script>\n        <script>\n          // Initialize Firebase\n          var config = {\n            apiKey: \"AIzaSyD450934850934805934095834095\",\n            authDomain: \"aurelia-auth-app.firebaseapp.com\",\n            databaseURL: \"https://aurelia-auth-app.firebaseio.com\",\n            storageBucket: \"aurelia-auth-app.appspot.com\",\n            messagingSenderId: \"567567\"\n          };\n          firebase.initializeApp(config);\n        </script>\n        <script src=\"scripts/vendor-bundle.js\" data-main=\"aurelia-bootstrapper\"></script>\n    </body>\n  </source-code>\n</code-listing>\n\nCongratulations, you just added Firebase into your app. If you're wondering why we are not using third party plugins like Aurelia Firebase, it is because I think Firebase already provides an excellent SDK that does not need to be over-complicated or abstracted.\n\nIf you want to use a third-party plugin, nothing is stopping you. However, this article will be focusing on the official SDK only.\n\nIf you thought that was easy, now we're going to add in authentication, which isn't any harder. Rather than make you write code step-by-step, line-by-line, **just copy/paste the following well-documented code into `src/app.ts`:**\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    // For TypeScript, because Firebase is a global variable\n    declare var firebase;\n    \n    export class App {\n        constructor(\n            private userLoggedIn = false,\n            private authToken = null,\n            private user = null\n        ) {\n            // This mostly gets called on subsequent page loads to determine\n            // what the current status of the user is with \"user\" being an object\n            // return by Firebase with credentials and other info inside of it\n            firebase.auth().onAuthStateChanged(user => {\n                this.userLoggedIn = user ? true : false;\n                this.user = user;\n            });\n        }\n    \n        login(type) {\n            let provider;\n    \n            // Determine which provider to use depending on provided type\n            // which is passed through from app.html\n            if (type === 'google') {\n                provider = new firebase.auth.GoogleAuthProvider();\n            } else if (type === 'facebook') {\n                provider = new firebase.auth.FacebookAuthProvider();\n            } else if (type === 'twitter') {\n                provider = new firebase.auth.TwitterAuthProvider();\n            }\n            \n            // Call the Firebase signin method for our provider\n            // then take the successful or failed result and deal with\n            // it accordingly.\n            firebase.auth().signInWithPopup(provider).then((result: any) => {\n                // The token for this session\n                this.authToken = result.credential.accessToken;\n    \n                // The user object containing information about the current user\n                this.user = result.user;\n    \n                // Set a class variable to true to state we are logged in\n                this.userLoggedIn = true;\n            }).catch(error => {\n                let errorCode = error.code;\n                let errorMessage = error.message;\n                let email = error.email;\n                let credential = error.credential;\n            });\n        }\n    \n        logout() {\n            // Self-explanatory signout code\n            firebase.auth().signOut().then(() => {\n                this.userLoggedIn = false;\n            }).catch(error => {\n                throw new Error(error);\n            });\n        }\n    }\n  </source-code>\n</code-listing>\n\n>If you would like to know how you can configure the scope to request additional information from a provider or other configuration options, the Firebase documentation has you covered [here](https://firebase.google.com/docs/reference/).\n\n**Lastly, add the following into `app.html`:**\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    <template>\n        <a href=\"javascript:void(0);\" click.delegate=\"login('google')\" if.bind=\"!userLoggedIn\">Login via Google</a>\n        <a href=\"javascript:void(0);\" click.delegate=\"login('twiter')\" if.bind=\"!userLoggedIn\">Login via Twitter</a>\n        <a href=\"javascript:void(0);\" click.delegate=\"login('facebook')\" if.bind=\"!userLoggedIn\">Login via Facebook</a>\n        <a href=\"javascript:void(0);\" click.delegate=\"logout()\" if.bind=\"userLoggedIn\">Logout</a>\n    \n        <div class=\"profile\" if.bind=\"userLoggedIn && user\">\n            <h1>${user.displayName}</h1>\n            <h2>${user.email}</h2>\n            <img src.bind=\"user.photoURL\" if.bind=\"user.photoURL\">\n        </div>\n    </template>\n  </source-code>\n</code-listing>\n\nWe are only showing login links if we are not already logged in using Aurelia's `if.bind` which conditionally adds and removes the element from the DOM. We could also use `show.bind` to achieve the same thing, but the element does not get removed.\n\nLastly, we have a profile DIV which only gets shown if we are logged in, and we have a user object. Then inside we display some values.\n\n## Conclusion\n\nFirebase is great. Aurelia's CLI is fantastic and combining the two allows you to create a fully-fledged client-side application with almost no work. If you would like the source code for the above example, you can find it on Github [here](https://github.com/Vheissu/aurelia-firebase-authentication)."}