{"name":"Aurelia's New Validation and Testing Capabilities","description":"Today we've got the initial releases of our new validation overhaul as well as the first release of some new testing capabilities. As usual, we've got a bunch of additional bug fixes and enhancements to performance as well. Read on for the details.","author":{"name":"AureliaEffect"},"links":{"static":"blog/2016/5/3/aurelias-new-validation-and-testing-capabilities","html":"blog/2016/5/3/aurelias-new-validation-and-testing-capabilities/index.html","fragment":"blog/2016/5/3/aurelias-new-validation-and-testing-capabilities/index-fragment.html","self":"blog/2016/5/3/aurelias-new-validation-and-testing-capabilities/index.json"},"content":"\nToday we've got the initial releases of our new validation overhaul as well as the first release of some new testing capabilities. As usual, we've got a bunch of additional bug fixes and enhancements to performance as well. Read on for the details.\n\n## A New Validation Library\n\nAs mentioned above, we've been working on a new approach to validation for Aurelia. This approach would allow any validation library to be used and combined with any CSS framework. It simplifies validation mechanics while opening up tremendous flexibiity. To tell you a bit about it, I'll let core team member Patrick Walters take it from here.\n\n---\n\nI've been contributing for a while now to some of the core Aurelia plugin libraries. With our Validation library, we realized there were some changes that needed to be made. Unfortunately, fixing things required a re-write but it also provided an opportunity to really refine the concepts and implementations.\n\nI worked heavily with Jeremy Danyow on this and we tried to find the best way to represent validation in an Aurelia plugin.  Instead of starting fresh with a new validation runtime we chose to start with a popular server/browser pure validation library called validate.js. Validate.js has been a great library to work with. **I've really enjoyed how fluid and clean setting up validation** has been and I'm happy to say that our validation integration makes it even nicer.\n\n### Technical Requirements for Validation\n\nWe had a few simple requirements from the beginning. Here's a summary:\n\n1. Must run on server (node.js) and browser.\n2. Use existing pure validation library.\n3. Installable as an Aurelia plugin.\n\nYou can read about more of the technical requirements [here](https://github.com/aurelia/validation/issues/174).\n\n### Today's Alpha Release\n\nI think we are at a point where we want to get heavy user feedback on the new validation system, so as of today you can install the alpha release:\n\nIf you are using JSPM:\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    $ jspm install aurelia-validatejs\n  </source-code>\n</code-listing>\n\nIf you are using NPM:\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    $ npm install aurelia-validatejs --save\n  </source-code>\n</code-listing>\n\nOnce the package is installed, then install the plugin in your main.js configure method:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    export function configure(aurelia) {\n      aurelia.use\n        .standardConfiguration()\n        .plugin('aurelia-validatejs');\n        \n      aurelia.start().then(() => aurelia.setRoot());\n    }\n  </source-code>\n</code-listing>\n\n### Applying Validation with Decorators\n\nOnce the plugin is installed, you can use it in your models and view-models with decorators:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    import {required} from 'aurelia-validatejs';\n    \n    export class MyModel {\n      @required name = '';\n    }\n  </source-code>\n</code-listing>\n\nNotice that `name` on instances of MyModel will be required.\n\n### Applying Validation with the Fluent API\n\nIf you prefer not to use decorators (or can't), you can also use the fluent API as well:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    import {Validator} from 'aurelia-validatejs';\n    \n    export class Fluent {\n      static inject = [Validator];\n      \n      constructor(validator) {\n        this.model = new AnotherModel();\n        this.validator = validator\n          .ensure(this.model, 'firstName')\n            .required()\n            .length({minimum: 3, maximum: 10})\n          .ensure(this.model, 'lastName')\n            .required();\n      }\n    }\n  </source-code>\n</code-listing>\n\nNote that both the decorator and fluent API take the exact same configuration options.\n\n### Displaying Errors\n\nCurrently, to display errors you can use the `ValidateBindingBehavior` which **watches for changes to the validation properties of the object** and uses a `ValidationRenderer` to show them. We would like some feedback on the setup so try it out and let us know what you think.\n\nUse the `validate` binding behavior in your HTML to show errors like this:\n\n\n<code-listing>\n  <source-code lang=\"HTML\">\n    <template>\n      <form class=\"container\">\n        <div>\n          <label class=\"form-group\">\n            <strong>Name</strong>\n            <input class=\"form-control\" value.bind=\"model.name & validate\" />\n          </label>\n        </div>\n      </form>\n    </template>\n  </source-code>\n</code-listing>\n\nBy default, the renderer uses the standard Bootstrap error formatting.\n\n#### ValidationReporter\n\nIn your view-model code you can watch for errors emitted by the error reporter:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    import {required, ValidationEngine} from 'aurelia-validatejs';\n    \n    export class MyModel {\n      @required name = '';\n    }\n    \n    export class MyViewModel {\n      constructor() {\n        this.model = new MyModel();\n        this.reporter = ValidationEngine.getValidationReporter(this.model);\n        this.reporter.subscribe(result => {\n          // result is array of errors    \n        });\n      }\n    }\n  </source-code>\n</code-listing>\n\n### What's Next?\n\n#### Weekly Releases\n\nThis first release is to get some initial feedback. Next week we plan to release on Tuesday with some nice improvements in renderers.  Right now, for example we are inferring the reporter from the binding engine but we have some planned improvements for the coming week. We hope to continue iteratively releasing improvements and welcome community contribution.\n\n#### More Complex Renderers\n\nWe plan to add more complex renderers soon. We will include mechanisms for showing validation errors on forms as well as ones that are scoped to the current element. We definitely want to welcome community contributions to enable rendering in other scenarios besides the default Bootstrap ones. Building renderers are really simple and we'll have more information on that soon.\n\n#### Feedback\n\nIn the [repository](https://github.com/aurelia/validatejs) for the validate.js bridge you can track issues or provide feedback. We've added a new tag `contribution-welcome` to indicate that a particular piece of the code-base is stable and contributions are welcome. You'll also note that we've added some initial issues to indicate what we have planned already.\n\n#### How can you contribute?\n\nI've put together another [blog post](http://patrickwalters.net/how-aurelia-validatejs-workxs/) detailing how validation is currently structured to give others an idea of how things currently work and what we can do to improve validation as we go forward.  \n\nHere are some ways to get started contributing if you are interested:\n\n1. Bug repros / fixes\n2. Unit test coverage\n3. Add TypeScript types\n4. Documentation\n5. Descriptive errors (I'd like for errors to have links to trouble-shooting sections of docs for developers)\n6. Make it work with other CSS libraries\n\n#### Custom Renderer\n\nHere's a few tips on creating a custom renderer to try out with your CSS framework of choice: \n\n`validate-binding-behavior.js` currently [gets the renderer](https://github.com/aurelia/validatejs/blob/master/src/validate-binding-behavior.js#L2) from [validation-renderer.js](https://github.com/aurelia/validatejs/blob/master/src/validation-renderer.js).  To try out your own renderer you can simply copy the `validate-binding-behavior` and update the name. Change the import to a renderer of your choosing (follow the same patterns in `validation-renderer.js` of renderErrors / unrenderErrors method signatures for now). We'll have improvements to this and more information soon.\n\nThanks again for everyone's patience and help!  Please report any issues you are having!\n\n---\n\nAs you can see, Patrick has been busy working on the new validation library. I'm excited about what is going to be possible and I hope you'll try it out and help us fill in the missing pieces.\n\n## New Testing Capabilities\n\nPreviously, we announced that we're working on a library for easy testing of components. With today's releases we also have the first version of `aurelia-testing` available. With it you can easily stage a custom element or custom attribute in isolation inside a mini Aurelia application, assert how it responds to databinding and assert its behavior throughout the component's lifecycle (bind, attached etc). This library is still in an early stage but please take it for a spin, write some tests for your components and give us feedback.\n\nTo get started:\n\nIf you are using JSPM:\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    $ jspm install aurelia-testing\n  </source-code>\n</code-listing>\n\nIf you are using NPM:\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    $ npm install aurelia-testing --save\n  </source-code>\n</code-listing>\n\nOnce you've got the library installed, you can use it in a unit test. Here are a few examples of what it can do:\n\nGiven you have following custom element:\n\n**my-component.js**\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    import {bindable} from 'aurelia-framework';\n    \n    export class MyComponent {\n      @bindable name;\n    \n      bind() {\n        this.something = 'bind';\n      }\n    \n      attached() {\n        this.something = 'attached';\n      }\n    \n      unbind() {\n       this.name = null;\n      }\n    \n      detached() { }\n    }\n  </source-code>\n</code-listing>\n\n**my-component.html**\n\n\n<code-listing>\n  <source-code lang=\"HTML\">\n    <template>\n      <div class=\"name\">${name} ${something}</div>\n    </template>\n  </source-code>\n</code-listing>\n\nSome basic tests could look like:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    import {StageComponent} from 'aurelia-testing';\n    import {MyComponent} from '../src/my-component';\n    \n    describe('MyComponent', () => {\n      let component;\n    \n      beforeEach(() => {\n        component = StageComponent\n            .withResources('src/my-component')\n            .inView('<my-component name.bind=\"name\"></my-component>')\n            .boundTo({ name: 'Foo' });\n      });\n    \n      afterEach(() => {\n        component.dispose();\n      });\n    \n      it('can render the component', done => {\n         component.create()\n         .then(() => {\n           const nameElement = document.querySelector('.name');\n           expect(nameElement.innerHTML).toBe('Foo attached');\n         })\n        .then(done);\n      });\n    \n      it('can bind with a new context', done => {\n         component.boundTo({ name: 'Bar' }).create()\n         .then(() => {\n           const nameElement = document.querySelector('.name');\n           expect(nameElement.innerHTML).toBe('Bar attached');\n         })\n         .then(done);\n      });\n    \n      it('can manually handle lifecycle', done => {\n        let nameElement;\n    \n         component.manuallyHandleLifecycle().create()\n         .then(() => {\n           nameElement = document.querySelector('.name');\n           expect(nameElement.innerHTML).toBe(' ');\n         })\n         .then(() => component.bind())\n         .then(() => {\n           expect(nameElement.innerHTML).toBe('Foo bind');\n         })\n         .then(() => component.attached())\n         .then(() => {\n           expect(nameElement.innerHTML).toBe('Foo attached');\n         })\n         .then(() => component.detached())\n         .then(() => component.unbind())\n         .then(() => {\n           expect(component.viewModel.name).toBe(null);\n         })\n         .then(() => component.bind({ name: 'Bar' }))\n         .then(() => {\n           expect(nameElement.innerHTML).toBe('Bar bind');\n         })\n         .then(() => component.attached())\n         .then(() => {\n           expect(nameElement.innerHTML).toBe('Bar attached');\n         })\n         .then(done);\n      }); \n    });\n  </source-code>\n</code-listing>\n\nAs you see, the test helper lets you easily push components through their lifecycle, testing various aspects of it at each point along the way.\n\n## All the Rest\n\nAs mentioned above, we've had a variety of bug fixes in this set of releases as well. We've even had performance enhancements across the board to our binding engine and in some cases the repeat performance has improved by 10x thanks to some excellent work by community member Bazyli Brzóska.\n\nAs usual, you can find all the details in the change log below.\nOh, and hang in there, the Release Candidate is right around the corner...\n\n## Change Log\n\n### aurelia-pal 1.0.0-beta.1.2.1\n\n#### Bug Fixes\n\n* **AggregateError:** better surface inner error information ([d2e0ee70](http://github.com/aurelia/pal/commit/d2e0ee70ad790999e61f4d4e31341062146cbcbf))\n\n### aurelia-polyfills 1.0.0-beta.1.1.3\n\n#### Bug Fixes\n\n* **reflect:** fix target-is-object check ([841a64b5](http://github.com/aurelia/polyfills/commit/841a64b597d320425773b393dfe4366ca0fc22bb))\n\n#### Features\n\n* **reflect:** add polyfill for defineProperty ([c6fbc900](http://github.com/aurelia/polyfills/commit/c6fbc900e8e62bbf6dd3730e3557de12e10d4f4b))\n\n### aurelia-binding 1.0.0-beta.1.3.3\n\n#### Bug Fixes\n\n* **Binary:** handle adding undefined ([d2a88ddc](http://github.com/aurelia/binding/commit/d2a88ddc79305d761be1b1efba666da007943cb7), closes [#337](http://github.com/aurelia/binding/issues/337))\n* **CheckedObserver:** synchronize on changes to input value ([f3147440](http://github.com/aurelia/binding/commit/f3147440743f5006f4834b63d90d6023a37bb758), closes [#320](http://github.com/aurelia/binding/issues/320))\n* **array-observation:** do not notify on pop/shift of empty array ([d344831b](http://github.com/aurelia/binding/commit/d344831bd96e77870c9354f187cfd387be401dc7))\n\n#### Features\n\n* **camelCase:** handle hyphenated names ([315cfaa2](http://github.com/aurelia/binding/commit/315cfaa229c13da8355ee1dec201a09c7df507db))\n* **logging:** warn when property can't be defined ([a6457c09](http://github.com/aurelia/binding/commit/a6457c098e18707ebd4e65448a5d6f984377fac4))\n\n### aurelia-ui-virtualization 0.4.4\n\n#### Bug Fixes\n\n* **utilities:** undefined parentElement in IE11 ([c7bb7857](http://github.com/aurelia/ui-virtualization/commit/c7bb78576cf584c203cddb2e9374ff9df4284caf))\n\n### aurelia-templating 1.0.0-beta.1.2.4 (2016-04-29)\n\n#### Bug Fixes\n\n* **templating-engine:** allow for overrideContext in enhance ([49c99edf](http://github.com/aurelia/templating/commit/49c99edf254d3102feae8e1cac6f9edb292b109c))\n\n#### Features\n\n* **ViewSlot:**\n  * allow removal of many views at once to avoid a race condition ([4b1005b9](http://github.com/aurelia/templating/commit/4b1005b91213a26ff726f9ae29aea7ac09353330))\n  * moving Views across the slot ([02e59ef1](http://github.com/aurelia/templating/commit/02e59ef14051a2a03f9d5d2dbd8a0b6e9cb45c17))\n* **view:** reference creator container ([9431f536](http://github.com/aurelia/templating/commit/9431f536e6d57ce8ef654eea872c8d795ea02fd5))\n\n### aurelia-templating-binding 1.0.0-beta.1.2.2\n\n#### Bug Fixes\n\n* **SyntaxInterpreter:** one-way default binding mode for checkbox/radio value ([124498c3](http://github.com/aurelia/templating-binding/commit/124498c3ffe7238e1a812586b941fca048d2c8fc))\n\n### templating-resources 1.0.0-beta.1.2.3\n\n#### Bug Fixes\n\n* **Repeat:** ignore changes after unsubscribe ([96b721f9](http://github.com/aurelia/templating-resources/commit/96b721f9a2ea9662aa514481dd75271f5b4be413))\n* **analyze-view-factory:** analyze type's view-factory ([3cc65d97](http://github.com/aurelia/templating-resources/commit/3cc65d974cbfc0c7930fd7766f0d4b828de70965))\n* **focus:** focus on attach ([3991d999](http://github.com/aurelia/templating-resources/commit/3991d99902394bb9f692a83c857727115a6477df), closes [#199](http://github.com/aurelia/templating-resources/issues/199))\n* **repeat-utilities:** remove unnecessary variable and loop evaluation ([504c8e69](http://github.com/aurelia/templating-resources/commit/504c8e6936b034bfdc3556c15817e0c8e8056bf0))\n\n### skeletons\n\n* Lots of improvements across all skeletons, especially webpack skeletons."}