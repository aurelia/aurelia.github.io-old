{"name":"Aurelia Shadow DOM v1 Slots Prerelease","description":"The open web and web standards have always been an important part of Aurelia. We don't want to abstract the web away from you, but rather enable you to use cutting edge web technology in a practical way while building applications. Our commitment to these principles brings the Aurelia community the first implementation of Shadow DOM v1 Slots. It's an awesome piece of technology and we look forward to seeing how you leverage it to build amazing apps.","author":{"name":"AureliaEffect"},"links":{"static":"blog/2016/5/2/aurelia-shadow-dom-v1-slots-prerelease","html":"blog/2016/5/2/aurelia-shadow-dom-v1-slots-prerelease/index.html","fragment":"blog/2016/5/2/aurelia-shadow-dom-v1-slots-prerelease/index-fragment.html","self":"blog/2016/5/2/aurelia-shadow-dom-v1-slots-prerelease/index.json"},"content":"\nThe open web and web standards have always been an important part of Aurelia. We don't want to abstract the web away from you, but rather enable you to use cutting edge web technology in a practical way while building applications. Our commitment to these principles brings the Aurelia community the first implementation of Shadow DOM v1 Slots. It's an awesome piece of technology and we look forward to seeing how you leverage it to build amazing apps.\n\n## What is Shadow DOM v1 Slots?\n\nThe *slot* mechanism of [the Shadow DOM v1 spec](http://w3c.github.io/webcomponents/spec/shadow/) is used to declare how two separate DOM trees can be merged together to produce a single visual representation. Why is this important? Well, when creating custom elements, your custom element often has a set of DOM nodes that represent the view of the element. Then, when a developer uses the custom element, that developer may also place HTML inside the content of the element. This results in two DOM trees that must be merged together to produce the final visual.\n\nTo illustrate this, imagine an Aurelia `name-tag` HTML component implemented like this:\n\n\n<code-listing>\n  <source-code lang=\"HTML\">\n    <template bindable=\"color\" css=\"background: ${color}\">\n      <require from=\"./name-tag.css\"></require>\n    \n      <div class=\"header\">\n        <h3>HELLO</h3>\n        <h4>my name is</h4>\n      </div>\n    \n      <div class=\"body\">\n        <slot></slot>\n      </div>\n    \n      <div class=\"footer\"></div>\n    </template>\n  </source-code>\n</code-listing>\n\nNow, in another view, you want to use this `name-tag`, providing different names as content:\n\n\n<code-listing>\n  <source-code lang=\"HTML\">\n    <template>\n      <require from=\"./name-tag.html\"></require>\n    \n      <name-tag color=\"red\">John</name-tag>\n      <name-tag color=\"blue\">Bob</name-tag>\n    </template>\n  </source-code>\n</code-listing>\n\nLook back up at the `name-tag` view. Do you see the `slot` element? This tells the renderer where to \"project\" the content that is placed inside of the `name-tag`. So, in the first case, the text \"John\" will be rendered at the location of the `slot`. At runtime, the composed DOM tree will look something like this:\n\n\n<code-listing>\n  <source-code lang=\"HTML\">\n    <name-tag>\n      <div class=\"header\">\n        <h3>HELLO</h3>\n        <h4>my name is</h4>\n      </div>\n    \n      <div class=\"body\">\n        John\n      </div>\n    \n      <div class=\"footer\"></div>\n    </name-tag>\n  </source-code>\n</code-listing>\n\n## What Else Can It Do?\n\nThe scenario above uses a \"default\" slot because the `slot` has no `name` attribute. In Shadow DOM, you can create as many slots as you want, provided that you give them different names. Then, the content that gets projected into the Shadow DOM must specify which slot it wants using a `slot` attribute. If it indicates no particular slot (or is plain text) it will get projected into the default slot. Here's an example of named slots:\n\n**Shadow DOM Tree for a named-slot Element**\n\n\n<code-listing>\n  <source-code lang=\"HTML\">\n    <template>\n      <div>\n        The first slot:\n        <div>\n          <slot name=\"slot1\"></slot>\n        </div>\n        The second slot:\n        <div>\n          <slot name=\"slot2\"></slot>\n        </div>\n      </div>\n    </template>\n  </source-code>\n</code-listing>\n\n**Using the named-slot Element**\n\n\n<code-listing>\n  <source-code lang=\"HTML\">\n    <named-slot>\n      <div slot=\"slot1\">\n        This Goes in Slot 1\n      </div>\n    \n      <div slot=\"slot2\">\n        This Goes in Slot 2\n      </div>\n    </named-slot>\n  </source-code>\n</code-listing>\n\n**The Composed Visual Tree**\n\n\n<code-listing>\n  <source-code lang=\"HTML\">\n    <named-slot>\n      <div>\n        The first slot:\n        <div>\n          <div slot=\"slot1\">\n            This Goes in Slot 1\n          </div>\n        </div>\n        The second slot:\n        <div>\n          <div slot=\"slot2\">\n            This Goes in Slot 2\n          </div>\n        </div>\n      </div>\n    </named-slot>\n  </source-code>\n</code-listing>\n\nA nice feature of slots is that they can have fallback content. If nothing gets projected into the slot, the slot will render its fallback content:\n\n**Shadow DOM Tree for a fallback-content Element**\n\n\n<code-listing>\n  <source-code lang=\"HTML\">\n    <template>\n      <div>\n        The first slot:\n        <div>\n          <slot name=\"slot1\"></slot>\n        </div>\n        The second slot:\n        <div>\n          <slot name=\"slot2\">This is some fallback content for slot 2...</slot>\n        </div>\n      </div>\n    </template>\n  </source-code>\n</code-listing>\n\n**Using the fallback-content Element**\n\n\n<code-listing>\n  <source-code lang=\"HTML\">\n    <fallback-content>\n      <div slot=\"slot1\">\n        This Goes in Slot 1\n      </div>\n    </fallback-content>\n  </source-code>\n</code-listing>\n\n**The Composed Visual Tree**\n\n\n<code-listing>\n  <source-code lang=\"HTML\">\n    <named-slot>\n      <div>\n        The first slot:\n        <div>\n          <div slot=\"slot1\">\n            This Goes in Slot 1\n          </div>\n        </div>\n        The second slot:\n        <div>\n          This is some fallback content for slot 2...\n        </div>\n      </div>\n    </named-slot>\n  </source-code>\n</code-listing>\n\nOk, now it's time to get crazy. What if the fallback content generates more slots!? Those fallback slots can be targeted by the content. Here's an example based on [a post from the WebKit team](https://webkit.org/blog/4096/introducing-shadow-dom-api/):\n\n**Shadow DOM Tree for a contact-card Element**\n\n\n<code-listing>\n  <source-code lang=\"HTML\">\n    <template>\n      <b>Name</b>:\n      <slot name=\"fullName\">\n        <slot name=\"firstName\"></slot>\n        <slot name=\"lastName\"></slot>\n      </slot><br>\n      \n      <b>Email</b>:\n      <slot name=\"email\">Unknown</slot><br>\n      \n      <b>Address</b>:\n      <slot name=\"address\">Unknown</slot>\n    </template>\n  </source-code>\n</code-listing>\n\n**Using the contact-card Element**\n\n\n<code-listing>\n  <source-code lang=\"HTML\">\n    <contact-card>\n      <span slot=\"fullName\">John Doe</span>\n      <span slot=\"address\">123 Main Street</span>\n    </contact-card>\n    \n    <contact-card>\n      <span slot=\"firstName\">Billy</span>\n      <span slot=\"lastName\">Bob</span>\n      <span slot=\"email\">billy@bob.com</span>\n    </contact-card>\n  </source-code>\n</code-listing>\n\n**The Composed Visual Tree**\n\n\n<code-listing>\n  <source-code lang=\"HTML\">\n    <contact-card>\n      <b>Name</b>:\n      <span slot=\"fullName\">John Doe</span><br>\n      \n      <b>Email</b>:\n      Unknown<br>\n      \n      <b>Address</b>:\n      <span slot=\"address\">123 Main Street</span>\n    </contact-card>\n    \n    <contact-card>\n      <b>Name</b>:\n      <span slot=\"firstName\">Billy</span>\n      <span slot=\"lastName\">Bob</span><br>\n      \n      <b>Email</b>:\n      <span slot=\"email\">billy@bob.com</span><br>\n      \n      <b>Address</b>:\n      Unknown\n    </contact-card>\n  </source-code>\n</code-listing>\n\nThat was fun! Ok, what about slots, that target other slots with fallback content that generates slots...\n\n\n**Shadow DOM Tree for mixed-slot Element**\n\n\n<code-listing>\n  <source-code lang=\"HTML\">\n    <template>\n      <div>\n        The first slot:\n        <div>\n          <slot name=\"slot1\">\n            Default content for Slot 1\n          </slot>\n        </div>\n        The default slot:\n        <div>\n          <slot>\n            Default Content for the Default Slot\n          </slot>\n        </div>\n        The second slot:\n        <div>\n          <slot name=\"slot2\">\n            The first fallback slot:\n            <div>\n              <slot name=\"fallbackSlot1\">\n                Default Content for Fallback Slot 1\n              </slot>\n            </div>\n            The second fallback slot:\n            <div>\n              <slot name=\"fallbackSlot2\"></slot>\n            </div>\n          </slot>\n        </div>\n      </div>\n    </template>\n  </source-code>\n</code-listing>\n\n**Shadow DOM Tree for slot-to-mixed-slot Element**\n\n\n<code-listing>\n  <source-code lang=\"HTML\">\n    <template>\n      <require from=\"./mixed-slot\"></require>\n    \n      <div>\n        <mixed-slot>\n          <slot name=\"slot1\" slot=\"slot1\">Fallback Content for Projected Slot 1</slot>\n          <slot name=\"slot2\" slot=\"fallbackSlot2\">Fallback Content for Projected Slot 2</slot>\n        </mixed-slot>\n      </div>\n    </template>\n  </source-code>\n</code-listing>\n\n**Using the slot-to-mixed-slot Element**\n\n\n<code-listing>\n  <source-code lang=\"HTML\">\n    <slot-to-mixed-slot>\n      <div slot=\"slot2\">This is user content for slot 2. (should appear in fallbackSlot2)</div>\n    </slot-to-mixed-slot>\n  </source-code>\n</code-listing>\n\n**The Composed Visual Tree**\n\n\n<code-listing>\n  <source-code lang=\"HTML\">\n    <slot-to-mixed-slot>\n      <div>\n        The first slot:\n        <div>\n          Fallback Content for Projected Slot 1\n        </div>\n        The default slot:\n        <div>\n          Default Content for the Default Slot\n        </div>\n        The second slot:\n        <div>\n          <slot name=\"slot2\">\n            The first fallback slot:\n            <div>\n              Default Content for Fallback Slot 1\n            </div>\n            The second fallback slot:\n            <div>\n              <div slot=\"slot2\">This is user content for slot 2. (appearing in fallbackSlot2)</div>\n            </div>\n          </slot>\n        </div>\n      </div>\n    </slot-to-mixed-slot>\n  </source-code>\n</code-listing>\n\n## Implementation Limitations\n\nAll the above is implemented with Aurelia. It also works with *template controllers* such as `if` and `repeat` which can dynamically generate content. We've fixed up our `@child` and `@children` decorators to understand the new model as well.\n\nThe only known limitations of our implementation are as follows:\n\n* You cannot data-bind the slot's `name` attribute.\n* You cannot data-bind the `slot` attribute.\n\nWe will investigate lifting these restrictions in the future, but they aren't something you'd want to do in most cases as changes in these attributes would result in a full Shadow DOM re-projection, which wouldn't be the most \"slick\" thing for your users.\n\nOne final note about our implementation: We haven't attempted to create a \"generic\" polyfill designed to be used outside of Aurelia. Our slots implementation is baked into Aurelia's templating compiler and renderer so that it can provide maximum performance and meet the needs of our community. We haven't attempted to implement all the APIs of the spec, but rather to emulate the declarative rendering capabilities of slots. By programming against Aurelia in this way, you don't need to worry about whether or not your browser does or does not support slots natively. Aurelia will take care of it for you.\n\n## Performance\n\nThe good news is that Shadow DOM v1 no longer relies on CSS selectors for projection. The simple named slot mechanism allows us to do fast key/value lookup, enabling the new implementation to perform better than our previous v0 implementation. Additionally, in order to implement some of the Shadow DOM features, we did some reworking to how custom element content was compiled, resulting in a more light-weight process. This means that performance of custom element rendering is improved across the board.\n\nThe performance of default and named slots, as well as fallback content is very good. In general, performance is going to be directly tied to the complexities of the projections involved. Because fallback content can generate more slots, which can generate more slots which can pass-through to other slots...it's quite possible to create a complex performance nightmare for yourself. You know what you are doing though, so we didn't want to limit you, especially since the spec really is this flexible. Just keep in mind that you'll want to consider carefully how you leverage these features, not only to maintain good performance, but also for your own sanity.\n\n## Other Improvements\n\nWhile we were working on Shadow DOM, we took time to reduce duplication of code in several places, improve the techniques used for custom element content in general and cleanup the DOM structures we were using to track views. This all results in a faster and more memory efficient runtime.\n\n## How Do I Try It Out?\n\nWe're releasing the new Shadow DOM v1 Slot support as an out-of-band release. If you want to start using it now, you will need to install directly from the Github releases. You need two libraries:\n\n* [aurelia-pal-browser](https://github.com/aurelia/pal-browser/releases)\n* [aurelia-templating](https://github.com/aurelia/templating/releases)\n\nWe'd like to encourage you to try updating your existing projects early if you can. It will help us to track down any bugs our tests didn't account for and get you moving ahead earlier towards v1 compatibility. We'll release this update through our main release channel as part of the upcoming Release Candidate.\n\n## Summary\n\nToday we're excited to announce a pre-release version of our templating engine which includes a full working version of Web Components Shadow DOM v1 Slots. This is the first full implementation in any framework or library and it's our last major milestone on the journey towards Release Candidate."}