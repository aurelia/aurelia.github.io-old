{"name":"Introducing The Aurelia VS Code Plugin","description":"Hello, everyone! My name is Erik Lieben [https://www.eriklieben.com], and I am a developer from the Netherlands working at Effectory [https://www.effectory.com] and co-organizer of the Aurelia Amsterdam [https://www.meetup.com/Aurelia-Amsterdam-meetup/] meetup. In my spare time, I will be working as a member of the Aurelia Core Team on the official vscode-extension [https://github.com/aurelia/vscode-extension/]. With this extension, we hope to provide you with a pleasant development experience when building Aurelia applications using Visual Studio Code [https://code.visualstudio.com].","author":{"name":"AureliaEffect"},"links":{"static":"blog/2016/10/3/introducing-the-aurelia-vs-code-plugin","html":"blog/2016/10/3/introducing-the-aurelia-vs-code-plugin/index.html","fragment":"blog/2016/10/3/introducing-the-aurelia-vs-code-plugin/index-fragment.html","self":"blog/2016/10/3/introducing-the-aurelia-vs-code-plugin/index.json"},"content":"\nHello, everyone! My name is [Erik Lieben](https://www.eriklieben.com), and I am a developer from the Netherlands working at [Effectory](https://www.effectory.com) and co-organizer of the [Aurelia Amsterdam](https://www.meetup.com/Aurelia-Amsterdam-meetup/) meetup. In my spare time, I will be working as a member of the Aurelia Core Team on the official [vscode-extension](https://github.com/aurelia/vscode-extension/). With this extension, we hope to provide you with a pleasant development experience when building Aurelia applications using [Visual Studio Code](https://code.visualstudio.com).\n\nThe extension is currently in Preview. We would love to receive early feedback and hear about the edge cases that may have been missed while writing the syntax highlighter.\n\n## Features\n\nThe extension currently consists of the following features:\n\n### Syntax Highlighting\n\nThe syntax highlighting feature exists in 2 parts: a grammar file to define the Aurelia syntax used in HTML files and four customized themes (Dark, Dark+, Light, Light+). The Aurelia grammar extends the default HTML syntax, which allows tools like Emmet to stay working without adding any extra configuration for it.\n\nVisual Studio Code doesn't support extending themes without modifying them, like Atom does, which means that customized themes are required to see the Aurelia syntax highlighted correctly. I have taken the default themes and extended them with the Aurelia coloring scheme, so you can easily enable Aurelia highlighting. \n\nBy default, every Aurelia syntax item will color purple, but you could also extend it by creating a custom theme. This allows you to, for example, color data bindings green, generate the `compose` element yellow and the `router-view` orange. You can use any other rainbow-like color scheme you like.\n\n![Sample of syntax highlight](https://raw.githubusercontent.com/aurelia/vscode-extension/master/images/dark-aurelia-syntax.PNG)\n\n### Autocomplete\nThe autocomplete feature helps you to write Aurelia code faster. It will give hints and allow you to tab to complete. The current implementation is a basic first version.\n\nIf you look closely, you will see that on the `value.bind` it gives you extra information about the default binding (`two-way`), and in the case of the placeholder, it provides the default of `one-way`. This feature only works on some of the defaults for now and still needs to be extended to support more scenarios.\n\nYou can read the full help description of the item to be auto-completed by pressing CTRL+SPACE. For example in the animation below, we show you the information of the `delegate` which was added to the `click` event.\n\n![Aurelia auto complete](https://raw.githubusercontent.com/aurelia/vscode-extension/master/images/aurelia-autocomplete.gif)\n\n> This feature currently has an unresolved issue where it doesn't center the cursor between the \"\" on complete. I hope to resolve that soon.\n\n### Executing CLI Commands from the Command Palette\n\nIn Visual Studio Code you can press CTRL+P to open the commands palette to have access to all the functionally of VS Code from your keyboard. With this extension installed you will also be able to run the CLI tasks: build, generate, new and test from the same commands palette. \n\nIt's as simple as typing ```au generate``` and answering the questions to create a custom element. The options are dynamic, so if you would, for example, create a new generator with the cli which is named ```readme-file-generator``` and then run the command again, it will show up as a template you could generate.\n![Aurelia CLI commands](https://raw.githubusercontent.com/aurelia/vscode-extension/master/images/aurelia-cli.gif)\n\n## What's Next?\n\nWe are looking at integrating the fantastic work done by Core Team Member [Meirion Hughes](https://github.com/MeirionHughes) on the [aurelia-templating-lint](https://github.com/MeirionHughes/aurelia-template-lint) project into Visual Studio Code. When we have this working you will get squiggly lines on lint errors. For example when you have unclosed elements or self-closing elements you will get squiggly lines under them to warn you.\n\nWe are also working on stabilizing the core so that it will be easier to add more amazing features later on. \n\n## Want to try it?\n\nOpen up Visual Studio Code and press CTRL+P and paste the following to install it.\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    ext install aurelia\n  </source-code>\n</code-listing>\n\nBe sure to select one of the themes with Aurelia syntax support after it's installed. You can do this by going to File / Preferences / Color theme and picking one if the following themes: \n\n- Aurelia Dark\n- Aurelia Dark+\n- Aurelia Light\n- Aurelia Light+\n\nKind regards,\nErik Lieben"}