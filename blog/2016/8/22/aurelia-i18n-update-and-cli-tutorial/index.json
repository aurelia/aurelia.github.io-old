{"name":"Aurelia i18n Update and CLI Tutorial","description":"Today, Core Team Member Vildan Softic gives us an update on Aurelia's i18n library and explains how to configure it for an Aurelia CLI project as well as TypeScript. Take it away Vildan...","author":{"name":"AureliaEffect"},"links":{"static":"blog/2016/8/22/aurelia-i18n-update-and-cli-tutorial","html":"blog/2016/8/22/aurelia-i18n-update-and-cli-tutorial/index.html","fragment":"blog/2016/8/22/aurelia-i18n-update-and-cli-tutorial/index-fragment.html","self":"blog/2016/8/22/aurelia-i18n-update-and-cli-tutorial/index.json"},"content":"\r\nToday, Core Team Member Vildan Softic gives us an update on Aurelia's i18n library and explains how to configure it for an Aurelia CLI project as well as TypeScript. Take it away Vildan...\r\n\r\nAurelia-CLI is alive and kicking. Lot's of you have already jumped onboard and enjoy the easy way to get started with Aurelia. It helps you to create a new project easily by just asking you a few questions and on you go. Since I (Vildan) have seen this request a few times, here is a short intro on how to install the aurelia-i18n plugin into your newly created CLI Application.\r\n\r\n## Installing aurelia-i18n\r\n\r\nFirst you want to install the plugin via npm, from within the root folder of your project:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    npm install aurelia-i18n\r\n  \r\n```\r\n\r\nSince aurelia-i18n is backed by i18next, you should install it and a backend plugin of your choice. As an example we're going to leverage the i18next-xhr-backend:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    npm install i18next i18next-xhr-backend\r\n  \r\n```\r\n\r\nAfter that we need to tell our CLI App about the new dependencies. To do so we're going to open the file *aurelia_project/aurelia.json* and scroll down to section named *dependencies*. In there add the following three entries:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    {\r\n      \"name\": \"i18next\",\r\n      \"path\": \"../node_modules/i18next/dist/umd\",\r\n      \"main\": \"i18next\"\r\n    },\r\n    {\r\n      \"name\": \"aurelia-i18n\",\r\n      \"path\": \"../node_modules/aurelia-i18n/dist/amd\",\r\n      \"main\": \"aurelia-i18n\"\r\n    },\r\n    {\r\n      \"name\": \"i18next-xhr-backend\",\r\n      \"path\": \"../node_modules/i18next-xhr-backend/dist/umd\",\r\n      \"main\": \"i18nextXHRBackend\"\r\n    }\r\n  \r\n```\r\n\r\n> Note: A future version of the CLI will automate this last step by introducing a new command, `au import`, which will attempt to auto-configure the libraries for you.\r\n\r\n## Setting up your Project\r\n\r\nGreat! Now, following the official [Aurelia-I18N Guide](https://github.com/aurelia/i18n#how-to-install-this-plugin), we create a folder\r\nin the root of your app named *locales*.\r\n\r\n> Note: You have to put the folder into the root (on same level as *src*) as this is the hosted root of your app.\r\n\r\nWithin this folder, add subfolders for each language you'd like to support. e.g. *en* and *de* for English and German language.\r\n\r\nInside of each of those folders create a file named *translation.json* with your translation keys and values. Follow the official guide for detailed info.\r\n\r\nLast but not least, it's time to wire up the plugin inside your app. Therefore go to your *src/main.js* file and configure it as follows (don't forget to add the imports).\r\n\r\n\r\n\r\n  ```JavaScript\r\n    //add the imports\r\n    import environment from './environment';\r\n    import Backend from 'i18next-xhr-backend';\r\n    \r\n    //Configure Bluebird Promises.\r\n    //Note: You may want to use environment-specific configuration.\r\n    Promise.config({\r\n      warnings: {\r\n        wForgottenReturn: false\r\n      }\r\n    });\r\n    \r\n    export function configure(aurelia) {\r\n      aurelia.use\r\n        .standardConfiguration()\r\n        .feature('resources');\r\n    \r\n      if (environment.debug) {\r\n        aurelia.use.developmentLogging();\r\n      }\r\n    \r\n      if (environment.testing) {\r\n        aurelia.use.plugin('aurelia-testing');\r\n      }\r\n    \r\n      //register the plugin\r\n      aurelia.use.plugin('aurelia-i18n', (instance) => {\r\n        // register backend plugin\r\n        instance.i18next.use(Backend);\r\n    \r\n        return instance.setup({\r\n          backend: {                                  \r\n            loadPath: './locales/{{lng}}/{{ns}}.json', \r\n          },\r\n          lng : 'de',\r\n          attributes : ['t','i18n'],\r\n          fallbackLng : 'en',\r\n          debug : false\r\n        });\r\n      });\r\n    \r\n      aurelia.start().then(() => aurelia.setRoot());\r\n    }\r\n  \r\n```\r\n\r\nNow you should be all set to start using the features of aurelia-i18n inside your app.\r\n\r\n## Bundling the Intl Polyfill\r\n\r\naurelia-i18n uses a polyfill to provide Intl.API support for browsers currently not implementing the feature. Amongst those are Safari for Mac and iOS. The Polyfill will be lazy loaded in dev mode as needed but won't be included automatically as part of the bundle. The reason is the file size of ~50k in minified mode. As such, you as the developer have to opt-in and bundle the Polyfill manually (if you don't want it lazy loaded).\r\n\r\nTo do so, first install the Polyfill as part of your project using npm:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    npm install intl\r\n  \r\n```\r\n\r\nAfter that, open up the *aurelia_project/aurelia.json* file and add the following dependency:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    {\r\n      \"name\": \"intl\",\r\n      \"path\": \"../node_modules/intl/dist\",\r\n      \"main\": \"Intl.min\"\r\n    },\r\n  \r\n```\r\n\r\n> Note: Instead of using a main of `Intl.min` you could also reference `Intl.complete` to include the Unicode CLDR locale data. For more info about this option consult the [official Polyfill docs](https://github.com/andyearnshaw/Intl.js/#locale-data).\r\n\r\n## I18N and TypeScript\r\n\r\nClearly a major goal of the CLI is to also easily provide support for TypeScript-based apps. For quite some time, the TypeScript issue with the I18N plugin wasn't related to the plugin itself, but to the way the dependencies offer their definition files. In order to get started with a TS app, first follow all the steps as described in the *Setting up your Project* section.\r\n\r\nNext install the already preconfigured typings by executing:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    typings install\r\n  \r\n```\r\n\r\nAdditionally add the `i18next.d.ts` by calling:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    typings install dt~i18next --save --global\r\n  \r\n```\r\n\r\n> Note: I18Next is hosted on DefinitlyTyped, as such you need to use the --global modifier to target typings to said source. This modfier used to be named --ambient.\r\n\r\nThe next thing that is missing is the `i18next-xhr-backend.d.ts` file. Since this file is neither available from the typings registry nor DefinitlyTyped, you should install it using a local link.\r\n\r\n\r\n\r\n  ```JavaScript\r\n    typings install --save --global file:./node_modules/i18next-xhr-backend/typings/i18next-xhr-backend.d.ts\r\n  \r\n```\r\n\r\nThe last thing left is to handle an issue with the way TS resolves the default exported class. As such, you need to change the import statement of the Backend in your `main.ts` file to:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    import environment from './environment';\r\n    import * as Backend from 'i18next-xhr-backend';  <--- see this changed line in order to make TS compiler shut up\r\n  \r\n```\r\n\r\nAfter that you should be ready to use aurelia-i18n with your TypeScript-based CLI-App.  \r\n   \r\n## What's Else is Happing?\r\n\r\nIf you have followed the progress of the aurelia-i18n library you have seen that a lot of issues have been fixed and closed, new features such as the missing NfBindingBehavior and DfBindingBehavior have been added, as well as support for custom elements and much more.\r\n\r\nWe'd like to encourage everyone to give aurelia-i18n a try and support your visitor's experience with a seamless international appearance. Last but not least, we'd also like to see what you've built using aurelia-i18n. A great opportunity to showcase your app is the Built With Aurelia site mentioned in a [previous post](http://blog.durandal.io/2016/08/15/built-with-aurelia-2/). For further details on today's aurelia-i18n release update, we provide the release notes below.\r\n\r\n## Release Notes\r\n\r\n### [aurelia-i18n 1.1.0](https://github.com/aurelia/i18n/compare/1.0.0...v1.1.0) (2016-08-22)\r\n\r\n#### Bug Fixes\r\n\r\n* **eslint:** fix linting issues ([0ddf93d](https://github.com/aurelia/i18n/commit/0ddf93d))\r\n* **ts:** declare missing props ([c8102c8](https://github.com/aurelia/i18n/commit/c8102c8))\r\n\r\n#### Features\r\n\r\n* **i18n:** add dependency injection ([0545999](https://github.com/aurelia/i18n/commit/0545999))\r\n* **TCustomAttribute:** support custom-elements ([06373f0](https://github.com/aurelia/i18n/commit/06373f0))"}