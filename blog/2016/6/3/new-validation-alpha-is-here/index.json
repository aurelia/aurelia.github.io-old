{"name":"New Validation Alpha is Here!","description":"We've been working hard on a validation rewrite and today we're excited to announce the Aurelia validation libraries are in alpha! Read on to get the scoop from core team member Jeremy Danyow...","author":{"name":"AureliaEffect"},"links":{"static":"blog/2016/6/3/new-validation-alpha-is-here","html":"blog/2016/6/3/new-validation-alpha-is-here/index.html","fragment":"blog/2016/6/3/new-validation-alpha-is-here/index-fragment.html","self":"blog/2016/6/3/new-validation-alpha-is-here/index.json"},"content":"\nWe've been working hard on a validation rewrite and today we're excited to announce the Aurelia validation libraries are in alpha! Read on to get the scoop from core team member Jeremy Danyow...\n\nAfter gathering all your feedback and use-cases we've refactored validation into two separate libraries with a robust set of standard behaviors and a simpler, more flexible API surface for easier customization:\n\n* `aurelia-validation` - a generic validation library that provides a `ValidationController`, a `validate` binding behavior, a `Validator` interface and more.\n* `aurelia-validatejs` - a [validatejs](https://validatejs.org/) powered implementation of the `Validator` interface along with fluent and decorator based APIs for defining rules for your components and data.\n \n## Example\n\nLet's put together a simple registration form to demonstrate the new validation APIs.\n\n#### 1) Create a new module that exports a `RegistrationForm` class:\n\n*registration-form.js*\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    export class RegistrationForm {\n      firstName = '';\n      lastName = '';\n      email = '';\n    \n      submit() {\n        // todo: call server...\n      }\n    }\n  </source-code>\n</code-listing>\n<br/>\n\n#### 2) Create a registration form view:\n\n> NOTE: I'm using bootstrap markup in this example.  Bootstrap is not required.  You can use whatever you want.\n\n*registration-form.html*\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    <template>\n      <form submit.delegate=\"submit()\">\n    \n        <div class=\"form-group\">\n          <label class=\"control-label\" for=\"first\">First Name</label>\n          <input type=\"text\" class=\"form-control\" id=\"first\" placeholder=\"First Name\"\n                 value.bind=\"firstName\">\n        </div>\n    \n        <div class=\"form-group\">\n          <label class=\"control-label\" for=\"last\">Last Name</label>\n          <input type=\"text\" class=\"form-control\" id=\"last\" placeholder=\"Last Name\"\n                 value.bind=\"lastName\">\n        </div>\n    \n        <div class=\"form-group\">\n          <label class=\"control-label\" for=\"email\">Email</label>\n          <input type=\"text\" class=\"form-control\" id=\"email\" placeholder=\"Email\"\n                 value.bind=\"email\">\n        </div>\n    \n        <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n      </form>\n    </template>\n  </source-code>\n</code-listing>\n<br/>\n\n#### 3) Install `aurelia-validation`:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    jspm install aurelia-validation\n  </source-code>\n</code-listing>\n<br/>\n\n#### 4) Give our view-model an instance of a `ValidationController`:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    import {inject, NewInstance} from 'aurelia-dependency-injection';\n    import {ValidationController} from 'aurelia-validation';\n    \n    @inject(NewInstance.of(ValidationController))\n    export class RegistrationForm {\n      constructor(controller) {\n        this.controller = controller;\n      }\n  </source-code>\n</code-listing>\n\nThe `ValidationController` manages a set of bindings and a set of renderers, controlling when to tell the renderers to render or unrender validation errors.  The `@inject(NewInstance.of(ValidationController))` line of code is important.  I'm going to skip discussing it for now and revisit it later in this post.\n\n#### 5) Configure the `ValidationController`:\n\nThe default \"trigger\" that tells the validation controller to validate bindings is the DOM `blur` event.  All in all there are three standard \"validation triggers\" to choose from:\n\n1. `blur`: Validate the binding when the binding's target element fires a DOM \"blur\" event. \n2. `change`: Validate the binding when it updates the model due to a change in the view.\n3. `manual`: Manual validation.  Use the controller's `validate()` and  `reset()` methods to validate all bindings.\n\nTo configure the controller's validateTrigger trigger, import the `validateTrigger` enum: `import {validateTrigger} from 'aurelia-validation';` and assign the controller's `validateTrigger ` property:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    controller.validateTrigger = validateTrigger.manual;\n  </source-code>\n</code-listing>\n<br/>\n\n#### 6) Implement the view-model's submit method.\n\nNo matter which validation trigger you chose, you're probably going to want to validate all bindings when the form is submitted.  Use the controller's `validate()` method to do this:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    submit() {\n      let errors = this.controller.validate();\n      ...\n    }\n  </source-code>\n</code-listing>\n<br/>\n\n#### 7) Define validation rules:\n\nAt this point your view-model should look like this:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    import {inject, NewInstance} from 'aurelia-dependency-injection';\n    import {ValidationController} from 'aurelia-validation';\n    \n    @inject(NewInstance.of(ValidationController))\n    export class RegistrationForm {\n      firstName = '';\n      lastName = '';\n      email = '';\n    \n      constructor(controller) {\n        this.controller = controller;\n      }\n    \n      submit() {\n        let errors = this.controller.validate();\n        // todo: call server...\n      }\n    }\n  </source-code>\n</code-listing>\n\nLet's bring in the `aurelia-validatejs` plugin which has APIs for defining rules and an implementation of the `Validator` interface that the `ValidationController` depends on to validate bindings.  You can of course build your own implementation of `Validator`; one is in the works for breeze.\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    jspm install aurelia-validatejs\n  </source-code>\n</code-listing>\n\nNow lets define some rules on our RegistrationForm class.  You could use the decorator API:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    import {required, email} from 'aurelia-validatejs'\n    ...\n    ...\n    export class RegistrationForm {\n      @required\n      firstName = '';\n    \n      @required\n      lastName = '';\n    \n      @required\n      @email\n      email = '';\n    \n  </source-code>\n</code-listing>\n\nOr you can use the fluent API:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    import {ValidationRules} from 'aurelia-validatejs'\n    ...\n    ...\n    export class RegistrationForm {\n      ...\n    }\n    \n    ValidationRules\n      .ensure('firstName').required()\n      .ensure('lastName').required()\n      .ensure('email').required().email()\n      .on(RegistrationForm);\n  </source-code>\n</code-listing>\n<br/>\n\n#### 8) Add validation to our bindings\n\nNow that the view-model has been implemented and rules are defined, it's time to add validation to the view.\n\nFirst, let's use the `validate` binding behavior to all of the input value bindings on our form to indicate these bindings require validation...\n\nChange `value.bind=\"someProperty\"` to `value.bind=\"someProperty & validate\"`.\n\nThe binding behavior will obey the controller's validation trigger configuration and notify the controller when the binding instance requires validation.  In turn, the controller will validate the object/property combination used in the binding and instruct the renderers to render or unrender errors accordingly.\n\n#### 9) Create a ValidationRenderer\n\nWe're almost done.  One of the last things we need to do is define how validation errors will be rendered.  This is done by creating one or more [`ValidationRenderer`](https://github.com/aurelia/validation/blob/master/src/validation-renderer.js) implementations.  A validation renderer implements a simple API `render(error, target)` and `unrender(error, target)` (error is a [`ValidationError`](https://github.com/aurelia/validation/blob/master/src/validation-error.js) instance and target is the binding's DOM element).\n\nSince we're using bootstrap, we'll create a renderer that adds the `has-error` css class to the `form-group` div of fields that have errors.  We'll also add a `<span class=\"help-text\">` elements to the form-group div, listing each of the field's errors.  [Here's](https://gist.github.com/jdanyow/ea843c24956cfffff48bb21776291f6a) the BootstrapFormValidationRenderer code and this is what a rendered error will look like:\n\n![last name is required](http://i.imgur.com/1igykkW.png)\n\n\n##### 10) Register the validation renderer with the component's controller.\n\nNow that we have a render implementation we need to tell the controller to use the renderer.  The `aurelia-validate` library ships with a `validation-renderer` custom attribute you can use for this purpose:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    <form submit.delegate=\"submit()\"\n          validation-renderer=\"bootstrap-form\">\n  </source-code>\n</code-listing>\n\nYou give the attribute the name of a renderer registration and it will resolve the renderer from the container and register it with the nearest controller instance.\n\nAt this point the view looks like this:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    <template>\n      <form submit.delegate=\"submit()\"\n            validation-renderer=\"bootstrap-form\">\n    \n        <div class=\"form-group\">\n          <label class=\"control-label\" for=\"first\">First Name</label>\n          <input type=\"text\" class=\"form-control\" id=\"first\" placeholder=\"First Name\"\n                 value.bind=\"firstName & validate\">\n        </div>\n    \n        <div class=\"form-group\">\n          <label class=\"control-label\" for=\"last\">Last Name</label>\n          <input type=\"text\" class=\"form-control\" id=\"last\" placeholder=\"Last Name\"\n                 value.bind=\"lastName & validate\">\n        </div>\n    \n        <div class=\"form-group\">\n          <label class=\"control-label\" for=\"email\">Email</label>\n          <input type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email\"\n                 value.bind=\"email & validate\">\n        </div>\n    \n        <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n      </form>\n    </template>\n  </source-code>\n</code-listing>\n<br/>\n\n## Try It\n\nHere's a live demo that includes an example  \"validation summary\" component using aurelia-validation.\n\nExercises for the reader:\n\n1. Edit registration-form.js... uncomment the code to change the validation trigger to \"manual\" or \"change\"\n2. In registration-form.js, remove the validation decorators on the class properties and uncomment the fluent rule definitions at the bottom of the file.\n\n<iframe src=\"https://gist.run/embed.html?id=381fdb1a4b0865a4c25026187db865ce\" frameborder=\"0\" width=\"100%\" height=\"550\"></iframe>\n\n---\n\n\n# Further Reading\n\nWe'll be providing more in-depth information in the docs however there's a few more things I want to cover in this post:\n\n### Fluent rule definition\n\nThe sample above demonstrates the fluent API and applying the rules to a class definition using the `.on(RegistrationForm)` method.  You can also use the `.on()` method with POJOs:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    let person = {\n      firstName: '',\n      lastName: '',\n      email: ''\n    };\n    \n    ValidationRules\n      .ensure('firstName').required()\n      .ensure('lastName').required()\n      .ensure('email').required().email()\n      .on(person);  // <-- define rules on the instance\n  </source-code>\n</code-listing>\n\nThere's no requirement to use the `.on()` method however.  You can capture the ruleset in a property and pass it into the `validate` decorator as a parameter if you prefer:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    export class RegistrationForm {\n      rules = ValidationRules\n        .ensure('firstName').required()\n        .ensure('lastName').required()\n        .ensure('email').required().email();\n        \n      person = {\n        firstName: '',\n        lastName: '',\n        email: ''\n      };\n    }\n  </source-code>\n</code-listing>\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    <!-- pass ruleset to decorator via parameter: -->\n    <input value.bind=\"person.firstName & validate:rules\">\n  </source-code>\n</code-listing>\n<br/>\n\n### The `validation-errors` attribute\n\nYou may want to data-bind to the current set of \"broken rules\".  The `aurelia-validation` library ships with a custom attribute called `validation-errors` that will populate the property it's bound to with the current set of validation errors.\n\nHere's how you could use the `validation-errors` attribute to display the list of errors with links that will focus the input element that has the error.\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    <template>\n      <form validation-errors.bind=\"myErrors\">\n        <ul>\n          <li repeat.for=\"errorInfo of myErrors\">\n            ${errorInfo.error.message}\n            <a href=\"#\" click.delegate=\"errorInfo.target.focus()\"> Fix it</a>\n          </li>\n        </ul>\n        ...\n    </template>\n  </source-code>\n</code-listing>\n<br/>\n\n### What is `NewInstance.of(ValidationController)` ???\n\n`NewInstance.of` is a dependency-injection **resolver** that ships with `aurelia-dependency-injection`.  Resolvers tell the container *how* to resolve a particular key.  In this case it's telling the container to always retrieve a *new instance* of a ValidationController.  This does a couple things:\n\n  1. It ensures the registration form gets it's own instance of a ValidationController rather than sharing one with another component.  Most of the time this is the behavior you'll want.\n\n  2. When Aurelia instantiates components it uses *a child container of the outer component*.  This is important because it means behind your component hierarchy is a hierarchy of container instances.  Our validation controller instance is installed in that hierarchy, making it easy for downstream renderer instances and validate binding behaviors to locate the relevant validation controller.\n\n### My form inputs are custom elements... is that supported?\n\n**Yes**.  The `validate` binding behavior works with custom elements however there are a couple best practices:\n\n1. If you're using `validateTrigger.blur` (the default), you'll want to make sure your custom element publishes DOM `blur` events.\n2. Your custom element should expose a `focus` method *on it's DOM element* if you plan on building a validation summary that calls `focus()` on the validation error's target element.\n\nHere's an example of a widget that might appear in a form:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    <widget id=\"first\" label=\"First Name\"\n            value.bind=\"firstName & validate\">\n    </widget>\n  </source-code>\n</code-listing>\n\nA widget implementation that would work well with the validation system would look like this:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    <template>\n      <div class=\"form-group\">\n        <label class=\"control-label\" for=\"${id}\">${label}</label>\n        <input type=\"text\" class=\"form-control\"\n               id=\"${id}\" ref=\"input\" placeholder=\"${label}\"\n               value.two-way=\"value\"\n               blur.trigger=\"blur()\">\n      </div>\n    </template>\n  </source-code>\n</code-listing>\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    import {bindable, inject, DOM} from 'aurelia-framework';\n    \n    @inject(Element)\n    export class Widget {\n      @bindable id;\n      @bindable label;\n      @bindable value;\n    \n      constructor(element) {\n        this.element = element;\n    \n        // ensure the element exposes a \"focus\" method\n        element.focus = () => this.input.focus();\n      }\n    \n      blur() {\n        // forward \"blur\" events to the custom element\n        const event = DOM.createCustomEvent('blur');\n        this.element.dispatchEvent(event);\n      }\n    }\n  </source-code>\n</code-listing>\n<br/>\n\n### I don't like the way all this works.  It's not meeting my requirements.\n\nLet us know!  File a github issue.  Worst case scenario is you'll need to implement your own `validate` binding behavior, which isn't hard to do.\n\n# Next Steps\n\nWe're going to be working on **more docs**, **localization/i18n** and cleaning up the list of **issues** in the validation repositories.  Keep sending your feedback!"}