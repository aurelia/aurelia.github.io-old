{"name":"ag-Grid - The Enterprise Datagrid For Aurelia","description":"Please let me introduce Sean Landsman, a developer on ag-Grid to share what he's been working on. Sean, take it away...","author":{"name":"AureliaEffect"},"links":{"static":"blog/2016/12/14/ag-grid-the-enterprise-datagrid-for-aurelia","html":"blog/2016/12/14/ag-grid-the-enterprise-datagrid-for-aurelia/index.html","fragment":"blog/2016/12/14/ag-grid-the-enterprise-datagrid-for-aurelia/index-fragment.html","self":"blog/2016/12/14/ag-grid-the-enterprise-datagrid-for-aurelia/index.json"},"content":"\r\nPlease let me introduce Sean Landsman, a developer on ag-Grid to share what he's been working on. Sean, take it away...\r\n\r\n---\r\n\r\nHere at ag-Grid, we are very excited to be able to offer support for Aurelia! Aurelia is a powerful and flexible framework that makes developing applications a breeze.\r\n\r\nIn this post, I won't be documenting how to use Aurelia in ag-Grid but rather on how we added support for Aurelia within the grid itself. For details on how to use Aurelia in ag-Grid, take a look at the [ag-Grid Aurelia](https://ag-grid.com/best-aurelia-data-grid/) documentation.\r\n\r\n## AgGridAurelia\r\n\r\nFollowing the model used by our Angular 2 offering, we created a new Custom Component that wraps ag-Grid, passing events & properties back and forth between the Custom Component and the grid. Doing this keeps ag-Grid framework agnostic, a core design principle here at ag-Grid.\r\n\r\n`AgGridAurelia` is the main Custom Component for Aurelia - it handles all core grid events and properties, as well as initial instantiation and removal.\r\n\r\n\r\n\r\n```JavaScript\r\n@customElement('ag-grid-aurelia')\r\n@inlineView(`<template><slot></slot></template>`)\r\n@autoinject()\r\nexport class AgGridAurelia implements ComponentAttached, ComponentDetached {\r\n  ...\r\n}\r\n```\r\n\r\nThe grid definition (which we'll get to in a minute) consists of the parent selector (`ag-grid-aurelia`) and a number of child `ag-grid-column`'s.\r\n\r\n\r\n\r\n```JavaScript\r\n@children('ag-grid-column')\r\npublic columns: AgGridColumn[] = [];\r\n```\r\n\r\nDuring the creation and initialisation phases, we dynamically create all available grid events, set all provided gridOptions, map supplied column definitions to colDefs and finally instantiate ag-Grid itself:\r\n\r\n##### Create all available grid events.\r\n\r\n```JavaScript\r\nComponentUtil.EVENTS.forEach((eventName) => {\r\n    //create an empty event\r\n    (<any>this)[eventName] = () => {\r\n    };\r\n});\r\n```\r\n\r\n##### Copy supplied properties to gridOptions.\r\n\r\n\r\n```JavaScript\r\nthis.gridOptions = ComponentUtil.copyAttributesToGridOptions(this.gridOptions, this);\r\nthis.gridParams = {\r\n    globalEventListener: this.globalEventListener.bind(this),\r\n    frameworkFactory: this.auFrameworkFactory\r\n};\r\n```\r\n\r\n##### Map supplied column definitions to expected colDefs.\r\n\r\n\r\n\r\n```JavaScript\r\nif (this.columns && this.columns.length > 0) {\r\n    this.gridOptions.columnDefs = this.columns\r\n        .map((column: AgGridColumn) => {\r\n            return column.toColDef();\r\n        });\r\n}\r\n```\r\n\r\n##### Instantiate ag-Grid with the supplied configuration.\r\n\r\n```JavaScript\r\nnew Grid(this._nativeElement, this.gridOptions, this.gridParams);\r\n```\r\n\r\n> Note: This is an abridged version of what actually happens, for brevity's sake.\r\n\r\n#### Mapping Columns to Template Types\r\n\r\nEach type of column is defined by a selector and then converted to a colDef that the grid understands. This is done in `AgGridColumn`:\r\n\r\n```JavaScript\r\n@autoinject()\r\nexport class AgGridColumn {\r\n    @children('ag-grid-column')\r\n    public childColumns:AgGridColumn[] = [];\r\n\r\n    @child('ag-cell-template')\r\n    public cellTemplate:AgCellTemplate;\r\n\r\n    @child('ag-editor-template')\r\n    public editorTemplate:AgEditorTemplate;\r\n    ...\r\n\r\n    public toColDef():ColDef {\r\n        let colDef:ColDef = this.createColDefFromGridColumn();\r\n\r\n        if (this.hasChildColumns()) {\r\n            (<any>colDef)[\"children\"] = this.getChildColDefs(this.childColumns);\r\n        }\r\n\r\n        if (this.cellTemplate) {\r\n            colDef.cellRendererFramework = {template: this.cellTemplate.template};\r\n            delete (<any>colDef).cellTemplate;\r\n        }\r\n\r\n        if (this.editorTemplate) {\r\n            colDef.editable = true;\r\n            colDef.cellEditorFramework = {template: this.editorTemplate.template};\r\n            delete (<any>colDef).editorTemplate;\r\n        }\r\n        ...\r\n}\r\n```\r\n\r\nFor example, if we defined a column as follows...\r\n\r\n\r\n```HTML\r\n<ag-grid-column header-name=\"Mood\" field=\"mood\" width.bind=\"250\" editable.bind=\"true\">\r\n    <ag-cell-template>\r\n      <img width=\"20px\" if.bind=\"params.value === 'Happy'\" src=\"images/smiley.png\"/>\r\n      <img width=\"20px\" if.bind=\"params.value !== 'Happy'\" src=\"images/smiley-sad.png\"/>\r\n    </ag-cell-template>\r\n    <ag-editor-template>\r\n      <ag-mood-editor>\r\n    </ag-editor-template>\r\n</ag-grid-column>\r\n```\r\n\r\n...this would be mapped to a column with a defined cellRenderer and cellEditor.\r\n\r\nThat's pretty much it! Give it a go - Aurelia is a fun framework and now you can use it with the best Enterprise Data Grid around! Take a look at our [live examples site](https://ceolter.github.io/ag-grid-aurelia-example/#/rich-grid). Feedback is always welcome!\r\n\r\n### About Sean Landsman\r\n\r\nI'm an experienced full stack technical lead with an extensive background in enterprise solutions. Over 19 years in the industry has taught me the value of quality code and good team collaboration. The bulk of my background is on the server side, but I am increasingly switching focus to include front end technologies. Currently, I work on ag-Grid full time."}