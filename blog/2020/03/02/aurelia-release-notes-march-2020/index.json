{"name":"Aurelia Release Notes - March 2020","description":"This month we've got major releases of aurelia-i18n, aurelia-dialog, and aurelia-pal-nodejs. However, the most significant release is a minor release of Aurelia UX, which includes many improvements to the components and styles.","author":{"name":"Rob Eisenberg","url":"rob@bluespire.com"},"links":{"static":"blog/2020/03/02/aurelia-release-notes-march-2020","html":"blog/2020/03/02/aurelia-release-notes-march-2020/index.html","fragment":"blog/2020/03/02/aurelia-release-notes-march-2020/index-fragment.html","self":"blog/2020/03/02/aurelia-release-notes-march-2020/index.json"},"content":"\nThis month we've got major releases of `aurelia-i18n`, `aurelia-dialog`, and `aurelia-pal-nodejs`. However, the most significant release is a minor release of Aurelia UX, which includes many improvements to the components and styles.\n\n## Major Releases\n\nMajor updates may include breaking changes, new features, fixes to bugs, and performance improvements.\n\n### [aurelia-i18n 3.0.0](https://github.com/aurelia/i18n/compare/3.0.0-beta.7...3.0.0)\n\n#### Breaking Changes\n\n* **t-attribute:** undefined and null bound values ([#314](https://github.com/aurelia/i18n/issues/314)) ([2a61ee7](https://github.com/aurelia/i18n/commit/2a61ee7))\n\nNote that if the `keyExpr` in `t=\"keyExpr\"` or `t.bind=\"keyExpression\"` is evaluated to be `null`, `undefined`, or `0`, the translation will now fallback to an empty string. This is different than the previous behavior in the sense that previously the original content was preserved.\n\nWhat does this mean?\n\n**Scenario#1:** The key expression is changed to `null`, `undefined`, or `0`.\n\nPreviously the old content was left untouched.\n\n```HTML\n<span t.bind=\"key.expr\"><span> <!-- assuming key.expr is a valid string value the span will show the matching translation-->\n```\n\nNow if you set `key.expr = undefined`, previously the old translated content was not removed. Now an empty string will shown instead.\n\n**Scenario#2:** Fallback for `null`, or `undefined` key works differently.\n\nConsider the following example.\n\n```HTML\n<span t=\"keyExpr\">${value}</span>\n```\n\nPreviously if the `keyExpr` is evaluated to `null`, or `undefined`, the evaluated value of `value` worked as fallback. With the new release, this fallback technique won't work. A similar fallback can be achieved by using the `defaultValue` parameter though.\n\n```HTML\n<span t=\"keyExpr\" t-params.bind=\"{defaultValue: value}\"></span>\n```\n\n### [aurelia-dialog 2.0.0](https://github.com/aurelia/dialog/compare/2.0.0-rc.8...2.0.0)\n\n**See previous pre-releases for changes from version 1.x.**\n\n#### Bug Fixes\n\n* Fix dialog mouse event bug\n\n### [aurelia-pal-nodejs 2.0.0](https://github.com/aurelia/pal-nodejs/compare/1.2.0...2.0.0)\n\n#### Bug Fixes\n\n* **platform:** type mismatch ([c823413](https://github.com/aurelia/pal-nodejs/commit/c823413))\n\n#### Features\n\n* update jsdom v15.0.0 to improve compatibility of browser simulation ([dfc8b36](https://github.com/aurelia/pal-nodejs/commit/dfc8b36)), closes [aurelia/cli#1019](https://github.com/aurelia/cli/issues/1019)\n\n## Minor Releases\n\nMinor updates include new features, updates to bugs, and performance improvements.\n\n### [aurelia-ux 0.18.0](https://github.com/aurelia/ux/compare/v0.17.2...v0.18.0)\n\nThanks to our new core team member [Ben Girardet](https://github.com/ben-girardet), we've recently shipped a set of major improvements to Aurelia UX focused on theming and consistency across components.\n\n#### Core\n\nNew properties available in `ux.design` : \n\n- `surfaceBackground`: set main surface background, especially for cards\n- `surfaceForeground`: set main surface foreground, especially for cards\n- `controlLabelColor`: set the default label color for all controls\n- `disabledBackground`: set the default background for all disabled states\n- `disabledForeground`: set the default foreground for all disabled states\n- `error`: set here the default error color\n- `onError`: available for when you need to write text on top of a surface using the `error` color. It is currently not used in Aurelia UX components \n\n#### Input Controls\n\nComponents that act as an input control are now more consistent and can be themed like Material Design components. Here's what's available:\n\n_Themable properties (same for all input-like components)_\n- `foreground`\n- `foregroundLabel`\n- `background`\n- `backgroundHover`\n- `activeColor`\n- `fontSize`\n- `letterSpacing`\n- `labelFontSize`\n- `labelLetterSpacing`\n- `lineHeight`\n- `labelLineHeight`\n- `borderColor`\n- `borderRadius`\n- `borderWidth`\n- `borderActiveWidth`\n- `disabledForeground`\n- `disabledBackground`\n- `error`\n\n_Filled, Outline, Dense_\n- change the style of the input with `filled` or `outline` variants\n  * example: `<ux-input variant=\"outline\"></ux-input>`\n- Reduce the visual impact of the input with `dense`\n  * example: `<ux-input dense></ux-input>`\n\n_Floating Labels or Placeholder_\n- Floating labels are the default way, but you can choose from below.\n- Use the `label` bindable for floating labels\n- Use the `placeholder` bindable for labels that disappear when field has a value\n- Use the `<ux-field><label>...</label><ux-input>...</ux-input></ux-field>` markup for labels that stay on top of the field all the time \n\n_Leading and Trailing Icons_\n- All input controls host leading and trailing icons slots. The trailing icon is deactivated for `ux-select` and `ux-datepicker` due to the arrow and calendar icons present in the control by default\n- Example: `<ux-input><ux-icon icon=\"person\" slot=\"leading-icon\"></ux-input>`\n\n_Affected components:_\n- `ux-input`\n- `ux-textarea`\n- `ux-select`\n- `ux-datepicker`\n- `ux-chip-input`\n\n#### Button\n\n- Removed some theme properties: `flatBackground`, `flatForeground`, `textBackground`, `textForeground`, `outlineBackground` and `outlineBorder`. Each of these colors is now derived from `background` and `foreground` or `accentBackground` and `accentForeground`.\n- Renamed `backgroundDisabled` and `foregroundDisabled` in `disabledBackground` and `disabledForeground` .\n\n#### Card\n\nNew `ux-card-separator` component.\n- This component makes it easy to add separator in cards (see Material Design guidelines).\n- By default it adds a vertical margin (up and down) of the separator. You can disable this margin with `no-margin` attribute.\n- You can include the separator between card parts (header and content for example) or inside the content. It will adjust its width accordingly.\n\nDefaults to surface colors\n- Cards default color properties are now defaulted with the new `surfaceBackground` and `surfaceForeground` design properties.\n\nNew `.ux-card__thumnail` class.\n\n#### Checkbox and Radio\n\n- Removed `disableBorder` theme property.\n- Replaces `checkedBackground` and `checkmarkColor` by `activeColor`.\n- Add the `indeterminate` state.\n\n#### Chip-Input\n\n- New `ux-chip-list` component.\n- `ux-chip-input` theme supports now all the new control theme properties.\n- `ux-chip` now has a `selected` state (bindable).\n- `ux-chip` also supports variants such as `filled` or `outline`.\n- `ux-chip` now has a `thumbnail` slot for icon or avatar purposes.\n\n#### Slider\n\n- Add new `trackHeight` theme property.\n- Mobile-friendly: now works with touch gestures.\n\n#### New Custom Attributes\n\nThe new `ux-choice-container` and `ux-choice-item` can be used to make any markup act as a `selector` component. It works particularly well with `ux-list` or `ux-chip-list` but you can use them anywhere. Here are two examples:\n\n```html\n<!-- bind a property to the ux-choice-container attribute to get the value of the choice -->\n<!-- bind a property to the ux-choice attribute to give it its choice value -->\n<ux-chip-list ux-choice-container.bind=\"labelPosition\">\n  <ux-chip variant=\"outline\" ux-choice=\"floating\">Floating</ux-chip>\n  <ux-chip variant=\"outline\" ux-choice=\"placeholder\">Placeholder</ux-chip>\n  <ux-chip variant=\"outline\" ux-choice=\"top\">On Top</ux-chip>\n</ux-chip-list>\n```\n\n```html\n<!-- If the bound property in ux-choice-container is an array, then the selector will allow multiple choices -->\n<ux-chip-list type=\"inline\" ux-choice-container.bind=\"region\">\n  <ux-chip variant.bind=\"variant\" ux-choice=\"basel\">Basel</ux-chip>\n  <ux-chip variant.bind=\"variant\" ux-choice=\"bern\">Bern</ux-chip>\n  <ux-chip variant.bind=\"variant\" ux-choice=\"geneva\">Geneva</ux-chip>\n  <ux-chip variant.bind=\"variant\" ux-choice=\"lausanne\">Lausanne</ux-chip>\n  <ux-chip variant.bind=\"variant\" ux-choice=\"zurich\">Zürich</ux-chip>\n</ux-chip-list>\n```\n\n#### Icons\n\nThis version does not automatically import any icons by default. From now on, you must decide on a per-project basis what icon sets you want to use. \n\nHere are a few examples of how you can prepare your icon sets:\n\n*1. Import full set when configuring the plugin*\n\nAs a quick start, you can import the same icon sets that were previously shipped with the package by configuring the plugin as such in your `main.ts`\n\n```TypeScript\n// main.ts\n\n/* Add this line to import the full set into an `icons` variable */\nimport icons from '@aurelia-ux/icons/sets/full-array.min.json';\n\n/* When you initialize the plugin, you can pass on this `icons` variable */\naurelia.use.plugin(PLATFORM.moduleName('@aurelia-ux/icons'), { icons });\n```\n\n*2. Lazy loading later*\n\n```TypeScript\n// app.ts\n\nimport { inject } from 'aurelia-framework';\nimport { UxIconMap } from '@aurelia-ux/icons';\n// here we import the full set from @aurelia-ux/icon but you can define any\n// icon set in the proper format (see below)\nimport icons from '@aurelia-ux/icons/sets/full-array.min.json';\n\n@inject(UxIconMap)\nexport class App {\n  constructor(private iconMap: UxIconMap) {\n    iconMap.registerIcons(icons);\n  }\n}\n```\n\n*3. Import Font Awesome Icons*\n\nIf you want to use Font Awesome icons, you can use them inside the `<ux-icon>` component. First you need to install the icons like:\n\n```Shell\nnpm install @fortawesome/fontawesome-free\n```\n\nThen you can import them like so:\n\n```TypeScript\n// app.ts\n\nimport { inject } from 'aurelia-framework';\nimport { UxIconMap, UxIconRegArray } from '@aurelia-ux/icons';\n\n// You can import any font awesome set like so.\n// They will all become available in the ux-icon component\nimport '@fortawesome/fontawesome-free/js/brands';\nimport '@fortawesome/fontawesome-free/js/regular';\n\nconst w = (window as any);\n\n@inject(UxIconMap)\nexport class App {\n  constructor(private uxIconMap: UxIconMap) {\n    if (w.___FONT_AWESOME___ && w.___FONT_AWESOME___.styles) {\n      type FabIcon = [number, number, Array<any>, string, string];\n      for (let fKey in (window as any).___FONT_AWESOME___.styles) {\n        let fIcons: {[key: string]: FabIcon} = (window as any).___FONT_AWESOME___.styles[fKey];\n        let fSet: Array<UxIconRegArray> = [];\n        for (let iconKey in fIcons) {\n          const icon = fIcons[iconKey];\n          fSet.push([iconKey, `<path d=\"${icon[4]}\"/></svg>`, icon[0], icon[1]]);\n        }\n        this.uxIconMap.registerIcons(fSet);\n      }\n    }\n  }\n}\n```\n\n*Registered icon list*\n\nYou can get the list of all registered icons by calling `iconMap.getAllKeys()` which will return an `Array<string>` with all icon names. Knowing this, you could add the following code to your template to have a preview of all your registered icons with their names:\n\n```HTML\n<ux-grid>\n  <ux-card sm=\"2\" repeat.for=\"name of uxIconMap.getAllKeys()\">\n    <ux-icon icon=\"${name}\"></ux-icon>\n    <br >${name}\n  </ux-card>\n</ux-grid>\n```\n\n*Icon Set Format*\n\nYou can register icons in an *object* or *array* form. The array form is slightly lighter.\n\n```JavaScript\n// array form\n[\n  [\n    \"person\", // icon name\n    \"<path d=\\\"M12 ...\\\"></path>\", // svg path (without the svg tag)\n    24, // optional (viewport width, default to 24)\n    24 // optional (viewport height, default to 24)\n  ],\n  [\n    \"other-icon-name\",\n    \"<path>...</path\">\n  ],\n  ...\n]\n```\n\n```JavaScript\n// object form\n[\n  {\n    \"name\": \"person\", // icon name\n    \"svg\": \"<svg viewBox=\\\"0 0 24 24\\\"><path d=\\\"M12 ...\\\"></path></svg>\" // svg path (with the svg tag)\n  },\n]\n```\n\n*Importing JSON*\n\nNote for TypeScript users: Make sure that your `tsconfig.json` is set to allow importing JSON files. This can be achieved by setting `\"resolveJsonModule\": true` in the `compilerOptions` section.\n\n### [aurelia-store 1.6.0](https://github.com/aurelia/store/compare/1.5.0...1.6.0)\n\n#### Features\n\n* **devtools:** basic dispatcher support ([ca97e85](https://github.com/aurelia/store/commit/ca97e85))\n\n### [aurelia-store 1.5.0](https://github.com/aurelia/store/compare/1.4.0...1.5.0)\n\n#### Features\n\n* **devtools:** implement redux devtools button handling ([#104](https://github.com/aurelia/store/issues/104)) ([86b7eda](https://github.com/aurelia/store/commit/86b7eda))\n\n### [aurelia-templating-resources 1.13.0](https://github.com/aurelia/templating-resources/compare/1.12.0...1.13.0)\n\n#### Bug Fixes\n\n* **all:** change package.json module from es2015 back to native-modules ([6a8f0c8](https://github.com/aurelia/templating-resources/commit/6a8f0c8))\n* **repeat:** use utility fns for ie11 compat ([a59a2de](https://github.com/aurelia/templating-resources/commit/a59a2de))\n\n### [aurelia-cli 1.3.0](https://github.com/aurelia/cli/compare/1.2.3...1.3.0)\n\n#### Bug Fixes\n\n* missing semicolon in ts skeleton ([5661b23](https://github.com/aurelia/cli/commit/5661b23))\n* **cli-bundler:** avoid writing out webpack env json files ([5893a67](https://github.com/aurelia/cli/commit/5893a67))\n* **docker:** only copy config folder for webpack projs ([d560a4d](https://github.com/aurelia/cli/commit/d560a4d))\n* **protractor:** fix chrome-driver issue on visible chrome too ([f45a7a9](https://github.com/aurelia/cli/commit/f45a7a9))\n* **tasks:** update-all-dependencies should mutate original file, not dist file ([ec3a743](https://github.com/aurelia/cli/commit/ec3a743))\n* **webpack:** clean-webpack-plugin changed export ([273a1f4](https://github.com/aurelia/cli/commit/273a1f4))\n\n#### Features\n\n* **webpack:** show aurelia-dialog patch for IE11 issue ([ff13245](https://github.com/aurelia/cli/commit/ff13245))\n\n## Patch Releases\n\nPatch updates include only fixes to bugs and performance improvements.\n\n### [aurelia-templating 1.10.3](https://github.com/aurelia/templating/compare/1.10.1...1.10.3)\n\n#### Bug Fixes\n\n* **all:** change es2015 back to native-modules ([ea50719](https://github.com/aurelia/templating/commit/ea50719))\n* **ElementEvents:** ElementEvents.defaultListenerOptions allows to set default options when subscribing to events ([f7e8e32](https://github.com/aurelia/templating/commit/f7e8e32)), closes [#657](https://github.com/aurelia/templating/issues/657)\n* **shadow-dom:** prevent slot leak ([#678](https://github.com/aurelia/templating/issues/678)) ([9241dca](https://github.com/aurelia/templating/commit/9241dca))"}