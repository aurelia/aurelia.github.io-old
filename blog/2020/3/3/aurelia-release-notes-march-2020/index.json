{"name":"Aurelia Release Notes - March 2020","description":"This month we've got major releases of aurelia-i18n, aurelia-dialog, and aurelia-pal-nodejs. However, the most significant release is a minor release of Aurelia UX, which includes many improvements to the components and styles.","author":{"name":"Rob Eisenberg","url":"rob@bluespire.com"},"links":{"static":"blog/2020/3/3/aurelia-release-notes-march-2020","html":"blog/2020/3/3/aurelia-release-notes-march-2020/index.html","fragment":"blog/2020/3/3/aurelia-release-notes-march-2020/index-fragment.html","self":"blog/2020/3/3/aurelia-release-notes-march-2020/index.json"},"content":"\r\nThis month we've got major releases of `aurelia-i18n`, `aurelia-dialog`, and `aurelia-pal-nodejs`. However, the most significant release is a minor release of Aurelia UX, which includes many improvements to the components and styles.\r\n\r\n## Major Releases\r\n\r\nMajor updates may include breaking changes, new features, fixes to bugs, and performance improvements.\r\n\r\n### [aurelia-i18n 3.0.0](https://github.com/aurelia/i18n/compare/3.0.0-beta.7...3.0.0)\r\n\r\n#### Breaking Changes\r\n\r\n* **t-attribute:** undefined and null bound values ([#314](https://github.com/aurelia/i18n/issues/314)) ([2a61ee7](https://github.com/aurelia/i18n/commit/2a61ee7))\r\n\r\nNote that if the `keyExpr` in `t=\"keyExpr\"` or `t.bind=\"keyExpression\"` is evaluated to be `null`, `undefined`, or `0`, the translation will now fallback to an empty string. This is different than the previous behavior in the sense that previously the original content was preserved.\r\n\r\nWhat does this mean?\r\n\r\n**Scenario#1:** The key expression is changed to `null`, `undefined`, or `0`.\r\n\r\nPreviously the old content was left untouched.\r\n\r\n```HTML\r\n<span t.bind=\"key.expr\"><span> <!-- assuming key.expr is a valid string value the span will show the matching translation-->\r\n```\r\n\r\nNow if you set `key.expr = undefined`, previously the old translated content was not removed. Now an empty string will shown instead.\r\n\r\n**Scenario#2:** Fallback for `null`, or `undefined` key works differently.\r\n\r\nConsider the following example.\r\n\r\n```HTML\r\n<span t=\"keyExpr\">${value}</span>\r\n```\r\n\r\nPreviously if the `keyExpr` is evaluated to `null`, or `undefined`, the evaluated value of `value` worked as fallback. With the new release, this fallback technique won't work. A similar fallback can be achieved by using the `defaultValue` parameter though.\r\n\r\n```HTML\r\n<span t=\"keyExpr\" t-params.bind=\"{defaultValue: value}\"></span>\r\n```\r\n\r\n### [aurelia-dialog 2.0.0](https://github.com/aurelia/dialog/compare/2.0.0-rc.8...2.0.0)\r\n\r\n**See previous pre-releases for changes from version 1.x.**\r\n\r\n#### Bug Fixes\r\n\r\n* Fix dialog mouse event bug\r\n\r\n### [aurelia-pal-nodejs 2.0.0](https://github.com/aurelia/pal-nodejs/compare/1.2.0...2.0.0)\r\n\r\n#### Bug Fixes\r\n\r\n* **platform:** type mismatch ([c823413](https://github.com/aurelia/pal-nodejs/commit/c823413))\r\n\r\n#### Features\r\n\r\n* update jsdom v15.0.0 to improve compatibility of browser simulation ([dfc8b36](https://github.com/aurelia/pal-nodejs/commit/dfc8b36)), closes [aurelia/cli#1019](https://github.com/aurelia/cli/issues/1019)\r\n\r\n## Minor Releases\r\n\r\nMinor updates include new features, updates to bugs, and performance improvements.\r\n\r\n### [aurelia-ux 0.18.0](https://github.com/aurelia/ux/compare/v0.17.2...v0.18.0)\r\n\r\nThanks to our new core team member [Ben Girardet](https://github.com/ben-girardet), we've recently shipped a set of major improvements to Aurelia UX focused on theming and consistency across components.\r\n\r\n#### Core\r\n\r\nNew properties available in `ux.design` : \r\n\r\n- `surfaceBackground`: set main surface background, especially for cards\r\n- `surfaceForeground`: set main surface foreground, especially for cards\r\n- `controlLabelColor`: set the default label color for all controls\r\n- `disabledBackground`: set the default background for all disabled states\r\n- `disabledForeground`: set the default foreground for all disabled states\r\n- `error`: set here the default error color\r\n- `onError`: available for when you need to write text on top of a surface using the `error` color. It is currently not used in Aurelia UX components \r\n\r\n#### Input Controls\r\n\r\nComponents that act as an input control are now more consistent and can be themed like Material Design components. Here's what's available:\r\n\r\n_Themable properties (same for all input-like components)_\r\n- `foreground`\r\n- `foregroundLabel`\r\n- `background`\r\n- `backgroundHover`\r\n- `activeColor`\r\n- `fontSize`\r\n- `letterSpacing`\r\n- `labelFontSize`\r\n- `labelLetterSpacing`\r\n- `lineHeight`\r\n- `labelLineHeight`\r\n- `borderColor`\r\n- `borderRadius`\r\n- `borderWidth`\r\n- `borderActiveWidth`\r\n- `disabledForeground`\r\n- `disabledBackground`\r\n- `error`\r\n\r\n_Filled, Outline, Dense_\r\n- change the style of the input with `filled` or `outline` variants\r\n  * example: `<ux-input variant=\"outline\"></ux-input>`\r\n- Reduce the visual impact of the input with `dense`\r\n  * example: `<ux-input dense></ux-input>`\r\n\r\n_Floating Labels or Placeholder_\r\n- Floating labels are the default way, but you can choose from below.\r\n- Use the `label` bindable for floating labels\r\n- Use the `placeholder` bindable for labels that disappear when field has a value\r\n- Use the `<ux-field><label>...</label><ux-input>...</ux-input></ux-field>` markup for labels that stay on top of the field all the time \r\n\r\n_Leading and Trailing Icons_\r\n- All input controls host leading and trailing icons slots. The trailing icon is deactivated for `ux-select` and `ux-datepicker` due to the arrow and calendar icons present in the control by default\r\n- Example: `<ux-input><ux-icon icon=\"person\" slot=\"leading-icon\"></ux-input>`\r\n\r\n_Affected components:_\r\n- `ux-input`\r\n- `ux-textarea`\r\n- `ux-select`\r\n- `ux-datepicker`\r\n- `ux-chip-input`\r\n\r\n#### Button\r\n\r\n- Removed some theme properties: `flatBackground`, `flatForeground`, `textBackground`, `textForeground`, `outlineBackground` and `outlineBorder`. Each of these colors is now derived from `background` and `foreground` or `accentBackground` and `accentForeground`.\r\n- Renamed `backgroundDisabled` and `foregroundDisabled` in `disabledBackground` and `disabledForeground` .\r\n\r\n#### Card\r\n\r\nNew `ux-card-separator` component.\r\n- This component makes it easy to add separator in cards (see Material Design guidelines).\r\n- By default it adds a vertical margin (up and down) of the separator. You can disable this margin with `no-margin` attribute.\r\n- You can include the separator between card parts (header and content for example) or inside the content. It will adjust its width accordingly.\r\n\r\nDefaults to surface colors\r\n- Cards default color properties are now defaulted with the new `surfaceBackground` and `surfaceForeground` design properties.\r\n\r\nNew `.ux-card__thumnail` class.\r\n\r\n#### Checkbox and Radio\r\n\r\n- Removed `disableBorder` theme property.\r\n- Replaces `checkedBackground` and `checkmarkColor` by `activeColor`.\r\n- Add the `indeterminate` state.\r\n\r\n#### Chip-Input\r\n\r\n- New `ux-chip-list` component.\r\n- `ux-chip-input` theme supports now all the new control theme properties.\r\n- `ux-chip` now has a `selected` state (bindable).\r\n- `ux-chip` also supports variants such as `filled` or `outline`.\r\n- `ux-chip` now has a `thumbnail` slot for icon or avatar purposes.\r\n\r\n#### Slider\r\n\r\n- Add new `trackHeight` theme property.\r\n- Mobile-friendly: now works with touch gestures.\r\n\r\n#### New Custom Attributes\r\n\r\nThe new `ux-choice-container` and `ux-choice-item` can be used to make any markup act as a `selector` component. It works particularly well with `ux-list` or `ux-chip-list` but you can use them anywhere. Here are two examples:\r\n\r\n```html\r\n<!-- bind a property to the ux-choice-container attribute to get the value of the choice -->\r\n<!-- bind a property to the ux-choice attribute to give it its choice value -->\r\n<ux-chip-list ux-choice-container.bind=\"labelPosition\">\r\n  <ux-chip variant=\"outline\" ux-choice=\"floating\">Floating</ux-chip>\r\n  <ux-chip variant=\"outline\" ux-choice=\"placeholder\">Placeholder</ux-chip>\r\n  <ux-chip variant=\"outline\" ux-choice=\"top\">On Top</ux-chip>\r\n</ux-chip-list>\r\n```\r\n\r\n```html\r\n<!-- If the bound property in ux-choice-container is an array, then the selector will allow multiple choices -->\r\n<ux-chip-list type=\"inline\" ux-choice-container.bind=\"region\">\r\n  <ux-chip variant.bind=\"variant\" ux-choice=\"basel\">Basel</ux-chip>\r\n  <ux-chip variant.bind=\"variant\" ux-choice=\"bern\">Bern</ux-chip>\r\n  <ux-chip variant.bind=\"variant\" ux-choice=\"geneva\">Geneva</ux-chip>\r\n  <ux-chip variant.bind=\"variant\" ux-choice=\"lausanne\">Lausanne</ux-chip>\r\n  <ux-chip variant.bind=\"variant\" ux-choice=\"zurich\">ZÃ¼rich</ux-chip>\r\n</ux-chip-list>\r\n```\r\n\r\n#### Icons\r\n\r\nThis version does not automatically import any icons by default. From now on, you must decide on a per-project basis what icon sets you want to use. \r\n\r\nHere are a few examples of how you can prepare your icon sets:\r\n\r\n*1. Import full set when configuring the plugin*\r\n\r\nAs a quick start, you can import the same icon sets that were previously shipped with the package by configuring the plugin as such in your `main.ts`\r\n\r\n```TypeScript\r\n// main.ts\r\n\r\n/* Add this line to import the full set into an `icons` variable */\r\nimport icons from '@aurelia-ux/icons/sets/full-array.min.json';\r\n\r\n/* When you initialize the plugin, you can pass on this `icons` variable */\r\naurelia.use.plugin(PLATFORM.moduleName('@aurelia-ux/icons'), { icons });\r\n```\r\n\r\n*2. Lazy loading later*\r\n\r\n```TypeScript\r\n// app.ts\r\n\r\nimport {Â inject } from 'aurelia-framework';\r\nimport { UxIconMap } from '@aurelia-ux/icons';\r\n// here we import the full set from @aurelia-ux/icon but you can define any\r\n// icon set in the proper format (see below)\r\nimport icons from '@aurelia-ux/icons/sets/full-array.min.json';\r\n\r\n@inject(UxIconMap)\r\nexport class App {\r\n  constructor(private iconMap: UxIconMap) {\r\n    iconMap.registerIcons(icons);\r\n  }\r\n}\r\n```\r\n\r\n*3. Import Font Awesome Icons*\r\n\r\nIf you want to use Font Awesome icons, you can use them inside the `<ux-icon>` component. First you need to install the icons like:\r\n\r\n```Shell\r\nnpm install @fortawesome/fontawesome-free\r\n```\r\n\r\nThen you can import them like so:\r\n\r\n```TypeScript\r\n// app.ts\r\n\r\nimport {Â inject } from 'aurelia-framework';\r\nimport { UxIconMap, UxIconRegArray } from '@aurelia-ux/icons';\r\n\r\n// You can import any font awesome set like so.\r\n// They will all become available in the ux-icon component\r\nimport '@fortawesome/fontawesome-free/js/brands';\r\nimport '@fortawesome/fontawesome-free/js/regular';\r\n\r\nconst w = (window as any);\r\n\r\n@inject(UxIconMap)\r\nexport class App {\r\n  constructor(private uxIconMap: UxIconMap) {\r\n    if (w.___FONT_AWESOME___ && w.___FONT_AWESOME___.styles) {\r\n      type FabIcon = [number, number, Array<any>, string, string];\r\n      for (let fKey in (window as any).___FONT_AWESOME___.styles) {\r\n        let fIcons: {[key: string]: FabIcon} = (window as any).___FONT_AWESOME___.styles[fKey];\r\n        let fSet: Array<UxIconRegArray> = [];\r\n        for (let iconKey in fIcons) {\r\n          const icon = fIcons[iconKey];\r\n          fSet.push([iconKey, `<path d=\"${icon[4]}\"/></svg>`, icon[0], icon[1]]);\r\n        }\r\n        this.uxIconMap.registerIcons(fSet);\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n*Registered icon list*\r\n\r\nYou can get the list of all registered icons by calling `iconMap.getAllKeys()` which will return an `Array<string>` with all icon names. Knowing this, you could add the following code to your template to have a preview of all your registered icons with their names:\r\n\r\n```HTML\r\n<ux-grid>\r\n  <ux-card sm=\"2\" repeat.for=\"name of uxIconMap.getAllKeys()\">\r\n    <ux-icon icon=\"${name}\"></ux-icon>\r\n    <br >${name}\r\n  </ux-card>\r\n</ux-grid>\r\n```\r\n\r\n*Icon Set Format*\r\n\r\nYou can register icons in an *object* or *array* form. The array form is slightly lighter.\r\n\r\n```JavaScript\r\n// array form\r\n[\r\n  [\r\n    \"person\", // icon name\r\n    \"<path d=\\\"M12 ...\\\"></path>\", // svg path (without the svg tag)\r\n    24, // optional (viewport width, default to 24)\r\n    24 // optional (viewport height, default to 24)\r\n  ],\r\n  [\r\n    \"other-icon-name\",\r\n    \"<path>...</path\">\r\n  ],\r\n  ...\r\n]\r\n```\r\n\r\n```JavaScript\r\n// object form\r\n[\r\n  {\r\n    \"name\": \"person\", // icon name\r\n    \"svg\": \"<svg viewBox=\\\"0 0 24 24\\\"><path d=\\\"M12 ...\\\"></path></svg>\" // svg path (with the svg tag)\r\n  },\r\n]\r\n```\r\n\r\n*Importing JSON*\r\n\r\nNote for TypeScript users: Make sure that your `tsconfig.json` is set to allow importing JSON files. This can be achieved by setting `\"resolveJsonModule\": true` in the `compilerOptions` section.\r\n\r\n### [aurelia-store 1.6.0](https://github.com/aurelia/store/compare/1.5.0...1.6.0)\r\n\r\n#### Features\r\n\r\n* **devtools:** basic dispatcher support ([ca97e85](https://github.com/aurelia/store/commit/ca97e85))\r\n\r\n### [aurelia-store 1.5.0](https://github.com/aurelia/store/compare/1.4.0...1.5.0)\r\n\r\n#### Features\r\n\r\n* **devtools:** implement redux devtools button handling ([#104](https://github.com/aurelia/store/issues/104)) ([86b7eda](https://github.com/aurelia/store/commit/86b7eda))\r\n\r\n### [aurelia-templating-resources 1.13.0](https://github.com/aurelia/templating-resources/compare/1.12.0...1.13.0)\r\n\r\n#### Bug Fixes\r\n\r\n* **all:** change package.json module from es2015 back to native-modules ([6a8f0c8](https://github.com/aurelia/templating-resources/commit/6a8f0c8))\r\n* **repeat:** use utility fns for ie11 compat ([a59a2de](https://github.com/aurelia/templating-resources/commit/a59a2de))\r\n\r\n### [aurelia-cli 1.3.0](https://github.com/aurelia/cli/compare/1.2.3...1.3.0)\r\n\r\n#### Bug Fixes\r\n\r\n* missing semicolon in ts skeleton ([5661b23](https://github.com/aurelia/cli/commit/5661b23))\r\n* **cli-bundler:** avoid writing out webpack env json files ([5893a67](https://github.com/aurelia/cli/commit/5893a67))\r\n* **docker:** only copy config folder for webpack projs ([d560a4d](https://github.com/aurelia/cli/commit/d560a4d))\r\n* **protractor:** fix chrome-driver issue on visible chrome too ([f45a7a9](https://github.com/aurelia/cli/commit/f45a7a9))\r\n* **tasks:** update-all-dependencies should mutate original file, not dist file ([ec3a743](https://github.com/aurelia/cli/commit/ec3a743))\r\n* **webpack:** clean-webpack-plugin changed export ([273a1f4](https://github.com/aurelia/cli/commit/273a1f4))\r\n\r\n#### Features\r\n\r\n* **webpack:** show aurelia-dialog patch for IE11 issue ([ff13245](https://github.com/aurelia/cli/commit/ff13245))\r\n\r\n## Patch Releases\r\n\r\nPatch updates include only fixes to bugs and performance improvements.\r\n\r\n### [aurelia-templating 1.10.3](https://github.com/aurelia/templating/compare/1.10.1...1.10.3)\r\n\r\n#### Bug Fixes\r\n\r\n* **all:** change es2015 back to native-modules ([ea50719](https://github.com/aurelia/templating/commit/ea50719))\r\n* **ElementEvents:** ElementEvents.defaultListenerOptions allows to set default options when subscribing to events ([f7e8e32](https://github.com/aurelia/templating/commit/f7e8e32)), closes [#657](https://github.com/aurelia/templating/issues/657)\r\n* **shadow-dom:** prevent slot leak ([#678](https://github.com/aurelia/templating/issues/678)) ([9241dca](https://github.com/aurelia/templating/commit/9241dca))"}