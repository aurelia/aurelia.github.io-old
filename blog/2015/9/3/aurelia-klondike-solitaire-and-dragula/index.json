{"name":"Aurelia, Klondike Solitaire and Dragula","description":"This week core team member Jeremy Danyow shares his adventure building Klondike Solitaire, leveraging the power of Aurelia and using the Dragula drag-and-drop library.","author":{"name":"AureliaEffect"},"links":{"static":"blog/2015/9/3/aurelia-klondike-solitaire-and-dragula","html":"blog/2015/9/3/aurelia-klondike-solitaire-and-dragula/index.html","fragment":"blog/2015/9/3/aurelia-klondike-solitaire-and-dragula/index-fragment.html","self":"blog/2015/9/3/aurelia-klondike-solitaire-and-dragula/index.json"},"content":"\nThis week core team member Jeremy Danyow shares his adventure building Klondike Solitaire, leveraging the power of Aurelia and using the Dragula drag-and-drop library.\n\n---\n\nThe Aurelia [gitter channel](https://gitter.im/Aurelia/Discuss) has over 2,100 members at the time of this writing!  It's a good place to hear about the cool things people are doing with Aurelia.  A lot of people are building interesting projects that combine Aurelia with drag-and-drop libraries like [sortable](http://rubaxa.github.io/Sortable/).  I don't have a lot of experience with drag-and-drop so I decided to try my hand at building a classic mouse driven app:  **[Klondike Solitaire](http://jdanyow.github.io/aurelia-solitaire/)**.\n\n##Native drag-and-drop\nMy first thought was to build the app with Aurelia and [native HTML5 drag-and-drop]().  I quickly found out that [this is a disaster](http://www.quirksmode.org/blog/archives/2009/09/the_html5_drag.html).  It's so bad it made Peter-Paul Koch of [QuirksMode](http://www.quirksmode.org/compatibility.html) fame give up on the feature altogether:\n\n> After spending about a day and a half in testing I am forced to conclude that the HTML5 drag and drop module is not just a disaster, itâ€™s a &#%!@? disaster.\nThe module should be removed from the HTML5 specification straight away, and conforming browsers should disable it at their earliest opportunity pending a complete rewrite from the ground up.\nWeb developers MUST NOT (in the sense of RFC 2119) use HTML 5 drag and drop. They should use old-school scripts instead.\n\nAfter failing miserably myself, googling and reading his post I decided I'd heed Koch's warning and use a libarary.\n\n##Enter [Dragula](http://bevacqua.github.io/dragula/)...\n![dragula logo](/content/images/2015/09/687474703a2f2f692e696d6775722e636f6d2f7362376c6f33682e706e67.png)\n\nDragula is the new kid on the block in terms of drag-and-drop.  It has a clean, flexible [API](https://github.com/bevacqua/dragula/blob/master/readme.markdown#usage) and no dependencies so I decided to try it out.\n\n##Modeling a single-player card game\nThe domain model for solitaire consists of 5 parts: Card, Pile, Table, Dealer and the game (Klondike).\n\nHere's the class definition for **[Card](https://github.com/jdanyow/aurelia-solitaire/blob/master/src/card.js)**:\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    export class Card {\n      suit;\n      rank;\n      up = false;\n      next = null;\n    }\n  </source-code>\n</code-listing>\nNot much surprising here- a Card has a `suit`, `rank` and an `up` (face-up) property.  The key feature of this model is the `next` property.  A Card is a recursive/linked-list model.  Each card has a reference to the *next* card above it in the pile.\n\nHere's the **[Pile](https://github.com/jdanyow/aurelia-solitaire/blob/master/src/pile.js)** class:\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    class Pile {\n      type;\n      canDrag;\n      canDrop;\n      next = null;\n      \n      getLastCard(orSelf, nextToLast) {\n        ... return the last card in the pile (or next-to-last card) ...\n      }\n    }\n  </source-code>\n</code-listing>\nPiles have a type property that identifies whether the pile is the deck pile, the waste pile, one of the four foundation piles or the seven tableau piles.  Piles also have a couple boolean properties representing whether cards can be dragged on or off from them.  The `next` property representing the bottom card in the pile.\n\nThe **[Table](https://github.com/jdanyow/aurelia-solitaire/blob/master/src/table.js)** model is just a collection of piles with some convenience methods used by the game logic to move cards and locate piles by card.\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    export class Table {\n      piles = [];\n    \n      addPile(pile) {\n        this.piles.push(pile);\n      }\n    \n      getPile(card) {\n        ... find the pile containing the specified card ...\n      }\n    \n      moveCard(card, toCardOrPile, reveal) {\n        ... move the card to the specified pile ...\n      }\n    }\n  </source-code>\n</code-listing>\n\nThe **[Dealer](https://github.com/jdanyow/aurelia-solitaire/blob/master/src/dealer.js)** class is used when constructing the game model.  It's only job is to create, shuffle and deal cards in the deck.\n \n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    export class Dealer {\n      cards;\n    \n      shuffle() {\n        ... create a deck of cards and shuffle it ...\n      }\n    \n      deal(pile, count) {\n        ... deal the specified count of cards into the specified pile ...\n      }\n    }\n  </source-code>\n</code-listing>\n##Tying it all together\nSo far we've described the model for the game but we haven't defined how these objects are displayed or interact.  There's a few parts to this, I'll lay them out here:\n\n1. **Elements**:  We need html elements and css representing the cards, piles and the table.\n2. **Drag-and-drop**:  We need to manage which DOM elements are drag containers and drop containers.\n2. **Game events**:  Cards can be clicked, double-clicked and dropped.  Empty piles can be clicked.\n3. **Game rules**:  Klondike Solitaire has rules.  The game logic needs to react to game events and do things like move cards in the logical model or check for the \"win status\". \n\n###Elements\n\nIf you haven't clicked on the [game link](http://jdanyow.github.io/aurelia-solitaire/) yet, here's what it looks like:\n![game](/content/images/2015/09/687474703a2f2f692e696d6775722e636f6d2f64364f776264702e706e67.png)\n\nThere are only three views in the game:  the [Card element](https://github.com/jdanyow/aurelia-solitaire/blob/master/src/card-element.html), [Pile element](https://github.com/jdanyow/aurelia-solitaire/blob/master/src/pile-element.html) and the [Klondike game view](https://github.com/jdanyow/aurelia-solitaire/blob/master/src/klondike.html).  The seven column layout of the game is achieved using [custom grid css](https://github.com/jdanyow/aurelia-solitaire/blob/master/styles/grid.css) generated by [Zurb Foundation](http://zurb.com/playground/css-grid-builder).\n\nThe game view is just a series of Pile elements layed out with grid css:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    <template>\n      <require from='./pile-element'></require>\n        \n      <div class=\"container\">\n        <div class=\"row first\">\n          <pile pile.bind=\"deck\" class=\"column one\"></pile> \n          <pile pile.bind=\"waste\" class=\"column one\"></pile> \n    \n          <pile pile.bind=\"foundation[0]\" class=\"column one offset-by-one\"></pile> \n          <pile pile.bind=\"foundation[1]\" class=\"column one\"></pile> \n          <pile pile.bind=\"foundation[2]\" class=\"column one\"></pile> \n          <pile pile.bind=\"foundation[3]\" class=\"column one\"></pile> \n        </div>\n        <div class=\"row\">\n          <pile pile.bind=\"tableau[0]\" class=\"column one\"></pile>\n          <pile pile.bind=\"tableau[1]\" class=\"column one\"></pile>\n          <pile pile.bind=\"tableau[2]\" class=\"column one\"></pile>\n          <pile pile.bind=\"tableau[3]\" class=\"column one\"></pile>\n          <pile pile.bind=\"tableau[4]\" class=\"column one\"></pile>\n          <pile pile.bind=\"tableau[5]\" class=\"column one\"></pile>\n          <pile pile.bind=\"tableau[6]\" class=\"column one\"></pile>\n        </div>\n    \n        <div class=\"win\" if.bind=\"win\">You Win!</div>    \n      </div>\n    </template>\n  </source-code>\n</code-listing>\n\n**Card and Pile elements**:  I won't list the code and markup for these elements here but I do want to call out a key part of the design...\n\nThe Card element uses a recursive template, matching the recursive nature of the Card model.  By nesting each Card element within the Card element beneath it, implementing grabbing and moving a stack of cards becomes a non-issue because moving a card automatically carries the cards above it.\n![drag pile](/content/images/2015/09/687474703a2f2f692e696d6775722e636f6d2f3263524e5869372e706e67-1.png)\n![pile markup](/content/images/2015/09/687474703a2f2f692e696d6775722e636f6d2f32586d6154766f2e706e67.png)\n\n###Drag-and-drop\nWe're using Aurelia which is MV* SPA framework.  Personally, I tend to think in terms of MVVM.  How do we implement drag-and-drop using an external library that cares nothing about bindings, models, templates and will happily move elements all over the DOM without concern for the fact that the Aurelia templating system is tracking them?  To avoid potential problems I **[always cancel the drop](https://github.com/jdanyow/aurelia-solitaire/blob/master/src/drag-and-drop.js#L41-L42)**.  Instead of letting the Dragula mutate the DOM I publish a `CardDroppedEvent(card, target)`, signaling the users intent.  From there the Klondike game logic handles [validating the drop](https://github.com/jdanyow/aurelia-solitaire/blob/master/src/klondike.js#L115) according to the game rules and moving the card within the model, allowing the Aurelia templating/binding system to update the view the normal way.\n\nAll the Dragula related code is [here](https://github.com/jdanyow/aurelia-solitaire/blob/master/src/drag-and-drop.js).  It primarily concerns determining which elements are allowed to be picked up, which elements can be dropped into and translating Dragula drop events to game events.\n\n###Game events\nTo decouple the game logic from the game elements, I'm using Aurelia's [event-aggregator](http://aurelia.io/docs.html#the-event-aggregator) module.  The idea is to have the custom elements publish [game events](https://github.com/jdanyow/aurelia-solitaire/blob/master/src/events.js) which the game [subscribes](https://github.com/jdanyow/aurelia-solitaire/blob/master/src/klondike.js#L56) to and handles by updating the model accordingly.  There are four events:\n\n* `CardClicked(card)`\n* `CardDoubleClicked(card)`\n* `CardDropped(card, target)`\n* `PlaceholderClickedEvent(pile)` (fired when an empty pile is clicked)\n\nThe other event related abstraction is the [`CardClickPublisher`](https://github.com/jdanyow/aurelia-solitaire/blob/master/src/events.js#L38).  Card elements don't use the event aggregator to publish clicks directly, instead they go through the `CardClickPublisher` which handles discerning clicks from double-clicks.\n\n###Game rules\nEverything covered so far has been generic stuff related to single player card games.  All the Klondike-specific logic is in the [Klondike.html](https://github.com/jdanyow/aurelia-solitaire/blob/master/src/klondike.html) view and [Klondike.js](https://github.com/jdanyow/aurelia-solitaire/blob/master/src/klondike.js) view-model.  The logic in the view-model falls into two categories:\n\n1. Constructing the game model.  This involves defining the deck, waste, foundation and tableau piles and using the Dealer to populate the piles.\n2. Reacting to game events.  This is just a matter of deciding if a click/double-click/drop should move something in the game, and checking whether the game has been \"won\".\n\n##Wrapping up\nHopefully this has been helpful in terms of using drag-and-drop with Aurelia.  Give the [game](http://jdanyow.github.io/aurelia-solitaire/) a try.  If you win you'll get a little encouragement from the winningest man in America."}