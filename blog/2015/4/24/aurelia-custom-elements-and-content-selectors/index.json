{"name":"Aurelia Custom Elements & Content Selectors","description":"This week, Core Aurelia Team member, Patrick Walters [https://github.com/PWKad], shows us how to create custom elements that leverage content selectors.","author":{"name":"AureliaEffect"},"links":{"static":"blog/2015/4/24/aurelia-custom-elements-and-content-selectors","html":"blog/2015/4/24/aurelia-custom-elements-and-content-selectors/index.html","fragment":"blog/2015/4/24/aurelia-custom-elements-and-content-selectors/index-fragment.html","self":"blog/2015/4/24/aurelia-custom-elements-and-content-selectors/index.json"},"content":"\r\nThis week, Core Aurelia Team member, [Patrick Walters](https://github.com/PWKad), shows us how to create custom elements that leverage content selectors.\r\n\r\n> **Warning:** This blog post covers a deprecated version of Shadow DOM, known as Shadow DOM v0. Aurelia 1.0 and beyond uses the current specification, known as Shadow DOM v1, which leverages *slots*. [Please read our official documentation for more information](http://aurelia.io/hub.html#/doc/article/aurelia/templating/latest/templating-content-projection).\r\n\r\n### About the Author\r\n\r\nPatrick is a developer living in the DFW area and is passionate about making the developer experience as seamless and easy as possible in Aurelia, based on leveraging ideas from studying many other languages and frameworks.  His preferred stack is Aurelia with Ruby on Rails and his preferred development environment is Sublime Text 3 with iTerm2 and Chrome.\r\n\r\n**Code samples**: [aurelia-modal on github](https://github.com/PWKad/aurelia-modal.git)\r\n\r\n## The Problem\r\n\r\nImagine that you want to have a modal dialog in your application but you don't want to have to include a ton of HTML every time you use it. You also might want to toggle the visibility of different sections of the modal, depending on its use. Perhaps you also want to be able to skin it differently based on its content.\r\n\r\n## The Solution\r\n\r\nWith Aurelia we can create custom elements that take advantage of Content Selectors to solve these problems. Aurelia uses concepts from the [Shadow DOM](http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/#toc-separation) to separate content and presentation. To see how this works we'll build a single, shared modal dialog that dynamically changes its content as needed. This will give us a single visibility property to manage.  We will use Aurelia's `compose` and `custom elements` to swap out the content. Finally, we'll leverage content selectors to allow re-skinning the modal more easily and further abstracting style-specific logic out of our view, making it is easier to adjust styling.\r\n\r\n## Starting Out\r\n\r\nAs always let's get an Aurelia app running. To begin, download the [navigation skeleton](https://github.com/aurelia/skeleton-navigation/releases) and unzip it. After that, we need to do some basic setup at the root of that project directory.\r\n\r\n\r\n\r\n  ```JavaScript\r\n    $ npm install\r\n    $ jspm install -y\r\n    \r\n    $ gulp watch\r\n  \r\n```\r\n\r\nNow we have our app being served at [localhost:9000](http://localhost:9000).\r\n\r\n## Using our Modal Dialog\r\n\r\nIn our `src/app.html` file, let's add a basic usage of the modal dialog that we want to create:\r\n\r\n\r\n\r\n  ```HTML\r\n    <modal>\r\n      <modal-header title=\"Edit Person\"></modal-header>\r\n      <modal-body content=\"person-information\"></modal-body>\r\n      <modal-footer buttons.bind=\"['Cancel']\"></modal-footer>\r\n    </modal>\r\n  \r\n```\r\n\r\nHere we are using a `modal` custom element and and setting the `header`, `body`, and `footer` of it.  So far we haven't actually created these custom elements, but I wanted to show you first how they would be used, so you can understand the purpose of the following steps which describe their creation.\r\n\r\n## Creating the Modal Element\r\n\r\nLet's create the `modal` element first. There are two parts for each of the elements we will create, the View (HTML) and the View-Model (JS). Let's start with the view.\r\n\r\n**View** - *modal.html*\r\n\r\n\r\n  ```HTML\r\n    <template>\r\n      <div class=\"modal fade\" ref=\"modal\">\r\n        <div class=\"modal-dialog\">\r\n          <div class=\"modal-content\">\r\n            <content select=\"modal-header\"></content>\r\n            <content select=\"modal-body\"></content>\r\n            <content select=\"modal-footer\"></content>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </template>\r\n  \r\n```\r\n\r\nHere we are using Bootstrap's default modal implementation.  Did you notice the `content selectors` in the `modal-content` div?  That is how we tell our modal element where to render the different content types that we defined in the app.html. The value of the `select` attribute is actually a CSS Selector. Cool isn't it?\r\n\r\nHere's the View-Model that encapsulates the behavior of the modal:\r\n\r\n**View-Model** - *modal.js*\r\n\r\n\r\n  ```JavaScript\r\n    import $ from 'jquery';\r\n    \r\n    export class Modal {\r\n      attached(){\r\n        $(this.modal).modal();\r\n      }\r\n    }\r\n  \r\n```\r\n\r\nYou can see in our *attached* callback that all we are doing is passing our referenced modal to the Bootstrap modal plugin.\r\n\r\n## Creating The Header and Footer\r\n\r\nNow, let's create the header and footer elements. We'll start with the header's view: \r\n\r\n**View** - *modal-header.html*\r\n\r\n\r\n  ```HTML\r\n    <template>\r\n      <div class=\"modal-header\">\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n        <h4 class=\"modal-title\">${title}</h4>\r\n      </div>\r\n    </template>\r\n  \r\n```\r\nAgain, this is just a base Bootstrap modal header.  The only adjustment we've made is to add a string interpolation binding to render the title into the `h4` element. Here's how we define the accompanying view-model:\r\n\r\n**View-Model** - *modal-header.js*\r\n\r\n\r\n  ```JavaScript\r\n    import {bindable} from 'aurelia-framework';\r\n    \r\n    export class ModalHeader {\r\n      @bindable title = '';\r\n    }\r\n  \r\n```\r\n\r\nWe create the bindable property `title` with a default value of `''` (empty string).  Also, note that we are using ES7 property initializers to create the property.  If we didn't want to (or couldn't) use ES7 property initializers, we could always write that same code using class decorators, like this: \r\n\r\n\r\n\r\n  ```JavaScript\r\n    import {bindable} from 'aurelia-framework';\r\n    \r\n    @bindable({name:'title', defaultValue:''})\r\n    export class ModalHeader{}\r\n  \r\n```\r\n\r\nAnd, just for the sake of completeness, if you didn't want to use any ES7 features, you could use pure ES6 like this:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    import {Decorators} from 'aurelia-framework';\r\n    \r\n    export class ModalHeader{\r\n      static decorators(){ \r\n        return Decorators.bindable({name:'title', defaultValue:''});\r\n      }\r\n    }\r\n  \r\n```\r\n\r\nRemember though, in all cases, this creates a custom element with a single HTML bindable property \"title\" that has a default value of the empty string.\r\n\r\nThe footer is constructed in a similar way. Let's see the view first:\r\n\r\n**View** - *modal-footer.html*\r\n\r\n\r\n  ```HTML\r\n    <template>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-default\" repeat.for=\"button of buttons\">${button}</button>\r\n      </div>\r\n    </template>\r\n  \r\n```\r\n\r\nAgain, it's just the base bootstrap footer, but we've changed the button so we can display more, based on what is bound.\r\n\r\n**View-model** - *modal-footer.js*\r\n\r\n\r\n  ```JavaScript\r\n    import {bindable} from 'aurelia-framework';\r\n    \r\n    export class ModalFooter {\r\n      @bindable buttons = [];\r\n    }\r\n  \r\n```\r\n\r\nAgain we create a buttons property that is bindable and is an array which will contain the labels for our buttons.\r\n\r\n## Creating the Body\r\n\r\nNow we need our modal-body template. It will be in charge of what gets shown in the main content area. \r\n\r\n**View** - *modal-body.html*\r\n\r\n\r\n  ```HTML\r\n    <template>\r\n      <div class=\"modal-body\">\r\n        <compose view-model.bind=\"content\"></compose>\r\n      </div>\r\n    </template>\r\n  \r\n```\r\nIt is the base bootstrap body, but we've added Aurelia's `compose` element with a binding so that it renders whatever gets set for the content property. Here's the view-model:\r\n\r\n**View-model** - *modal-body.js*\r\n\r\n\r\n  ```JavaScript\r\n    import {bindable} from 'aurelia-framework';\r\n    \r\n    export class ModalBody {\r\n      @bindable content;\r\n    }\r\n  \r\n```\r\n\r\nOur content will be a string property which tells the view what to compose into the body.\r\n\r\n## Content to Render\r\n\r\nWe need to have some content to dynamically compose into the body of our modal.  Let's just steal from the starter kit's welcome.html in order to keep things simple:\r\n\r\n**View** - *person-information.html*\r\n\r\n\r\n  ```HTML\r\n    <template>\r\n      <form role=\"form\">\r\n        <div class=\"form-group\">\r\n          <label for=\"fn\">First Name</label>\r\n          <input type=\"text\" value.bind=\"person.firstName\" class=\"form-control\" id=\"fn\" placeholder=\"first name\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"ln\">Last Name</label>\r\n          <input type=\"text\" value.bind=\"person.lastName\" class=\"form-control\" id=\"ln\" placeholder=\"last name\">\r\n        </div>\r\n      </form>\r\n    </template>\r\n  \r\n```\r\n\r\n**View-Model** - *person-information.js*\r\n\r\n\r\n  ```JavaScript\r\n    export class PersonInformation {\r\n      constructor() {\r\n        this.person = new Person();\r\n      }\r\n    }\r\n    \r\n    class Person{\r\n      firstName = 'Patrick';\r\n      lastName = 'Patrick';\r\n    }\r\n  \r\n```\r\nHere we just create a person class and instantiate it to be our 'person'.  This will provide some demo data for our `person-information.html` \r\n\r\n## Summary\r\n\r\nNow, we have all the pieces for a functioning modal dialog which can dynamically display different content! To use it, don't forget to `require` the elements in your view or register them globally at startup (this is what my plugin does). As a reminder, here's the html you can now write to build a modal:\r\n\r\n\r\n\r\n  ```HTML\r\n    <modal>\r\n      <modal-header title=\"Edit Person\"></modal-header>\r\n      <modal-body content=\"person-information\"></modal-body>\r\n      <modal-footer buttons.bind=\"['Cancel']\"></modal-footer>\r\n    </modal>\r\n  \r\n```\r\n\r\nFor the title we just used a string.  The modal-body has a content property that tells it which template to render as the body.  You can see this in our `modal-body.html` where we used the `compose` binding to render some content.  Finally, buttons is an array of button labels to show in our modal.\r\n\r\nWe've separated our template logic that is specific to bootstrap out of our main app.  Now if we wanted to we could switch from Bootstrap to Semantic-ui or some other CSS framework and swap it in and out as needed. That's it!"}