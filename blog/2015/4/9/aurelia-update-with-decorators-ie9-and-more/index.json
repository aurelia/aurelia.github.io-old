{"name":"Aurelia Update with Decorators, IE9 and More","description":"Today's release finally brings full ES7 and TypeScript decorators, IE9 support and a new, simplified HTML Behavior programming model. We've also made a few performance enhancements along the way.","author":{"name":"AureliaEffect"},"links":{"static":"blog/2015/4/9/aurelia-update-with-decorators-ie9-and-more","html":"blog/2015/4/9/aurelia-update-with-decorators-ie9-and-more/index.html","fragment":"blog/2015/4/9/aurelia-update-with-decorators-ie9-and-more/index-fragment.html","self":"blog/2015/4/9/aurelia-update-with-decorators-ie9-and-more/index.json"},"content":"\r\nToday's release finally brings full ES7 and TypeScript decorators, IE9 support and a new, simplified HTML Behavior programming model. We've also made a few performance enhancements along the way.\r\n\r\n## Decorators\r\n\r\nWith the release of [Babel 5.0](http://babeljs.io/blog/2015/03/31/5.0.0/) and the [TypeScript 1.5 Alpha](http://www.infoq.com/news/2015/04/typescript-1-5/), we now have support for ES 2016 Decorators in the major compilers. To accompany these releases, we have now enabled full support for decorators in Aurelia. We've also done some renaming in our fallback mechanisms to account for this terminology (see \"Fallbacks\" below).\r\n\r\nAs of this release, if you are using Babel 5.0 or TypeScript 1.5, you can now optionally use a decorator to control dependency injection. Here's what it looks like:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    import {inject} from 'aurelia-framework';\r\n    import {HttpClient} from 'aurelia-http-client';\r\n    \r\n    @inject(HttpClient)\r\n    export class Flickr{\r\n      constructor(http){\r\n        this.http = http;\r\n      }\r\n    }\r\n  \r\n```\r\n\r\nWith decorators, there's no need for special static properties or callbacks on your class anymore. You can use this new language feature today. We've also updated the navigation skeleton to take advantage of it.\r\n\r\nIt's also worth noting that for dependency injection, you can still use the static `inject` property/method in place of the decorator as well. It's up to you. In fact, that's all the decorator does. Here's the `inject` decorator implementation, in case you are curious how that works:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    export function inject(...rest){\r\n      return function(target){\r\n        target.inject = rest;\r\n      }\r\n    }\r\n  \r\n```\r\n\r\n## HTML Behaviors\r\n\r\nWhile we were working on Decorators, we wanted to take the time to update the HTML Behaviors design. If you aren't familiar with this, HTML Behaviors are ways in which your JavaScript code can plug into the HTML compiler.\r\n\r\nAs of this release, there are two core types of HTML Behaviors: Custom Element and Custom Attribute. These ideas are based on core DOM primitives so hopefully they just \"make sense\".\r\n\r\n### Custom Elements\r\n\r\nAs always, you can use export conventions to identify these:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    export class NavBarCustomElement {}\r\n  \r\n```\r\n\r\nThis creates a custom element named `<nav-bar></nav-bar>`. If no naming pattern is matched, then it will default to a custom element. So, the export could also be called `NavBar`.\r\n\r\nDon't want to use conventions? No problem. You can always use decorators:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    import {customElement} from 'aurelia-framework';\r\n    \t\r\n    @customElement('nav-bar')\r\n    export class NavBar {}\r\n  \r\n```\r\n\r\nCustom Elements also have a number of other options. Here's a fun example to show a few things off:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    @useShadowDOM\r\n    export class Expander {\r\n      @bindable isExpanded = false;\r\n      @bindable header;\r\n      ...\r\n    }\r\n  \r\n```\r\n\r\nThis behavior shows how to indicate that the element's view is rendered in the Shadow DOM. It also shows how to create two properties which will be settable/bindable on the `<expander>` element in HTML. In this case we are using the `bindable` decorator with the new ES7 property initializer syntax. Property initializers are available in TypeScript and in Babel, with the \"es7.classProperties\" option. If you don't want to use initializers, you can also specify them on the class like this:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    @useShadowDOM\r\n    @bindable('isExpanded')\r\n    @bindable('header')\r\n    export class Expander {\r\n      ...\r\n    }\r\n  \r\n```\r\n\r\nThere are other options as well. Here's a summary of other decorators you may want to use on your custom elements:\r\n\r\n* `@syncChildren(property, changeHandler, selector)` - Creates an array property on your class that has its items automatically synchronized based on a query selector against its view.\r\n*  `@skipContentProcessing` - Tells the compiler not to process the content of your custom element. It is expected that you will do custom processing yourself.\r\n*  `@useView(path)` - Specifies a different view to use.\r\n*  `@noView` - Indicates that this custom element does not have a view and that the author intends to handle its own rendering internally.\r\n\r\n### Custom Attributes\r\n\t\r\nWhat about custom attributes? You can follow the convention:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    export class ShowCustomAttribute {\r\n      valueChanged(newValue, oldValue){\r\n      \t...\r\n      }\r\n    }\r\n  \r\n```\r\n\r\nNow you can just put a `show` attribute on any HTML element to use it. If you'd rather be explicit with decorators:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    import {customAttribute} from 'aurelia-framework';\r\n    \t\r\n    @customAttribute('show')\r\n    export class Show {\r\n      valueChanged(newValue, oldValue){\r\n      \t...\r\n      }\r\n    }\r\n  \r\n```\r\n\r\nNote that in both cases, your attribute maps to a `value` property on the class and you can be notified when it changes by implementing a `valueChanged` method. If you want to map a single attribute to more than one property, you can simply create `bindable` properties on the attribute itself and then use the options syntax in HTML. There are also some special options for custom attributes:\r\n\r\n* `@templateController` - Allows a custom attribute to turn the attributed HTML into an HTMLTemplate which it can then generate on the fly. This is how behaviors like `if` and `repeat` can be created.\r\n* `@dynamicOptions` - This allows a custom attribute to have a dynamic set of properties which are all mapped from the options attribute syntax into the class at runtime.\r\n\r\n**Note:** With the move to decorators, you may have noticed that we renamed `withProperty` to `bindable`. We have also changed the signature. If all you need to do is provide the name, you can provide it like so `@bindable('someProperty')` but if you need to specify more details, you should pass an options object like this:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    @bindable({\r\n      name:'myProperty', //name of the property on the class\r\n      attribute:'my-property', //name of the attribute in HTML\r\n      changeHandler:'myPropertyChanged', //name of the method to invoke on property changes\r\n      defaultBindingMode: ONE_WAY, //default binding mode used with the .bind command\r\n      defaultValue: undefined //default value of the property, if not bound or set in HTML\r\n    })\r\n  \r\n```\r\n\r\nThe defaults and conventions are shown above. So, you would only need to specify these options if you need to deviate.\r\n\r\n### Behaviors Summary\r\n\r\nHTML Behaviors are powerful. Most of the time you can create them by following a simple naming convention and then adding some `@bindable` decorators, but you can do much more. By combining ES7 Decorators and Property Initializers you can have a clean, standards-based way of defining advanced behaviors for any scenario.\r\n\r\n## IE9\r\n\r\nWe now have support for IE9! In order to get Aurelia to run in legacy browsers like IE9 and Safari 5.1 you need to polyfill MutationObservers and WeakMap. This can be achieved by a jspm install of `github:webreflection/es6-collections` and `github:polymer/mutationobservers`. Load these two scripts before system.js.\r\n\r\nIn Skeleton Navigation index.html will look like this:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    <script src=\"jspm_packages/github/webreflection/es6-collections@master/es6-collections.js\"></script>\r\n    <script src=\"jspm_packages/github/polymer/mutationobservers@0.4.2/MutationObserver.js\"></script>\r\n    <script src=\"jspm_packages/system.js\"></script>\r\n    <script src=\"config.js\"></script>\r\n    <script>\r\n      System.import('aurelia-bootstrapper');\r\n    </script>\r\n  \r\n```\r\n\r\nIt should be noted that WeakMap is not required by Aurelia itself but it is used by the MutationObserver polyfill. So, with this configuration, you should be able to get things working with IE9 today. We are looking into making this even smoother and there still may be a few random issues. If IE9 support is important to you, please try this out and provide us with some feedback.\r\n\r\n## Performance\r\n\r\nThis isn't primarily a performance release. However, I wanted to mention that Core Team Member Martin Gustafsson has done some optimization work on our repeater which gives it up to a 200x performance boost in certain scenarios. I've also done work to optimize our internal metadata read/write system and we are moving steadily torward getting our benchmarking infrastructure in place so we can make the big optimizations in the binding system. Stay tuned...\r\n\r\n## Other Goodies\r\n\r\nWe had tons of bug fixes naturally and we've continued to improve the binding engine as well, with support for more scenarios, but without adding any additional syntax or complexity. With the addition of decorators, we can now make it easy for computed properties to avoid dirty checking (only done for computeds anyways) by specifying their dependencies. Here's an example of how to do that:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    import {computedFrom} from 'aurelia-framework';\r\n    \r\n    export class Welcome{\r\n      firstName = 'John';\r\n      lastName = 'Doe';\r\n    \r\n      @computedFrom('firstName', 'lastName')\r\n      get fullName(){\r\n        return `${this.firstName} ${this.lastName}`;\r\n      }\r\n    }\r\n  \r\n```\r\n\r\nAlso, now that Babel and TypeScript have matured significantly, we see no more need to consider AtScript as a viable language for building apps. This release removes all support for AtScript.\r\n\r\n## Fallbacks\r\n\r\nIn this post we've been showing a lot of ways to leverage ES7 (ES 2016) features such as Decorators and Property Initializers with the new update. If you aren't using a compiler that supports these, don't worry. We still have a fallback mechanism that you can use. Take note though, we have removed the `metadata` static member and replaced it with a `decorators` static callback. We also have a `Decorators` helper to use in place of the `Metadata` helper. Here's what our first example from above would look like in ES5 with CommonJS using this fallback mechanism.\r\n\r\n\r\n\r\n  ```JavaScript\r\n    var Decorators = require('aurelia-framework').Decorators;\r\n    var HttpClient = require('aurelia-http-client').HttpClient;\r\n    \r\n    function Flickr(http){\r\n      this.http = http;\r\n    }\r\n    \r\n    Flickr.decorators = Decorators.inject(HttpClient);\r\n    exports.Flickr = Flickr;\r\n  \r\n```\r\n\r\nThe `Decorators` helper has methods that match every decorator in Aurelia, except `computedFor`. The names and casing are identical. The helper methods are chain-able, so you can easily compose them like this:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    Foo.decorators = Decorators.customElement('my-element')\r\n                               .bindable('someProperty')\r\n                               .inject(Element);\r\n  \r\n```\r\n\r\nIn fact there's nothing stopping you from using this in your ES7 code if you prefer it (though we think that decorators are superior for almost all cases).\r\n\r\n## How to Update\r\n\r\nClearly the new Decorators and HTML Behaviors design are breaking changes. The information above should get you through making the updates in your code, but I want to share here how to update your tooling and Aurelia itself.\r\n\r\nFirst, you need to update the Babel compiler to 5.x. You can use the following commands to update your gulp tasks as well as your testing infrastructure:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    sudo npm install --save-dev gulp-babel\r\n    sudo npm install --save-dev karma-babel-preprocessor\r\n    sudo npm install --save-dev karma-jspm\r\n  \r\n```\r\n\r\nYou will also need to update your compiler options. Here are the options we are now using in the Navigation Skeleton, located at `build/babel-options.js`:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    module.exports = {\r\n      modules: 'system',\r\n      moduleIds: false,\r\n      comments: false,\r\n      compact: false,\r\n      stage:2,\r\n      optional: [\r\n        \"es7.decorators\",\r\n        \"es7.classProperties\"\r\n      ]\r\n    };\r\n  \r\n```\r\n\r\nMake sure you also update the babel options in your `karma.conf.js file`. If you are using TypeScript instead of Babel, you will need to move to using version 1.5 if you want to take advantage of decorators.\r\n\r\nNext, you want to update Aurelia. Because these are breaking changes, you cannot do a simple `jspm update`. JSPM is smart in the way that it follows semver, and it won't let you break your app on accident. I recommend using `jspm install` for each \"top level\" Aurelia library. Just look in your `package.json` file, in the `jspm` section and be sure to re-install all the Aurelia dependencies listed there.\r\n\r\n## Next Steps\r\n\r\nThis release also includes some work on the router, route recognition and route generation, thanks to the work of community member Bryan Smith. The next release will yield a couple of breaking changes related to fixing the final issues with the router and making it easier and more capable in all scenarios.\r\n\r\nAs I mentioned, we are gearing up for big performance work too and we've got a couple of demoes we're putting together to spotlight that which I know you will find interesting. Hang in there :) I think you're going to like it.\r\n\r\n> **Note:** There are lots of updates in this release. At the moment, our site's docs are out of sync with these changes. We wanted to get this release out to you as soon as we could, so please be patient while we update the docs over the next day or so.\r\n\r\n## Upcoming Presentations\r\n\r\nInterested in getting a walkthrough of building your first Aurelia app? I've got good news for you. I'll be in Montreal on Monday April 13, 2015 presenting an introductory talk at the Radio Canada studios at 7PM EDT. Don't live in Montreal? No problem. [Radio-Canada Lab](http://lab.radio-canada.ca/) has generously offered to not only produce the show but live stream it on YouTube. You will be able to [watch it live from anywhere in the world](https://www.youtube.com/watch?v=6Pd53umA5wc)."}