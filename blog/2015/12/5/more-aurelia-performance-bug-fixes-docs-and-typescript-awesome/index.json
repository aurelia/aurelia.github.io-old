{"name":"More Aurelia Performance, Bug Fixes, Docs and TypeScript Awesome!","description":"Today's patch updates come with some really sweet benefits! Also, if you love TypeScript, I'm sure you'll be very happy with something new we are announcing today. To update your libraries, simply run jspm update. Read on to learn the details of what these releases include.","author":{"name":"AureliaEffect"},"links":{"static":"blog/2015/12/5/more-aurelia-performance-bug-fixes-docs-and-typescript-awesome","html":"blog/2015/12/5/more-aurelia-performance-bug-fixes-docs-and-typescript-awesome/index.html","fragment":"blog/2015/12/5/more-aurelia-performance-bug-fixes-docs-and-typescript-awesome/index-fragment.html","self":"blog/2015/12/5/more-aurelia-performance-bug-fixes-docs-and-typescript-awesome/index.json"},"content":"\nToday's patch updates come with some really sweet benefits! Also, if you love TypeScript, I'm sure you'll be very happy with something new we are announcing today. To update your libraries, simply run `jspm update`. Read on to learn the details of what these releases include.\n\n## Performance\n\nWe're constantly working on Aurelia's performance. A couple of weeks ago [we showed improvements to our repaint performance](http://blog.durandal.io/2015/12/04/aurelia-repaint-performance-rules/) that left every other framework in the dust. This week we're releasing some fixes that we've benchmarked as improvements against ourselves. Today's release involves a drastic reduction in memory consumption, especially for one-way and one-time bindings. It also comes with a 2-3x performance improvement on initial render time. Yes, view rendering just got 2-3x faster, thanks to Jeremy Danyow's continued performance innovations. Most of this work was done in the binding engine. If you are interested in the details of how that works, you can [watch Jeremy take you on a guided tour of the codebase](https://www.youtube.com/watch?v=NyxGZYgOCuo).\n\nWe also have a major performance improvement for Edge. What we discovered (and by we I mean Jeremy) is that the Edge native promise implementation is extremely slow. If you want to see a huge load-time performance boost, simply add [the bluebird promise library](http://bluebirdjs.com/docs/getting-started.html) before your system.js script tag. It's quite interesting what the affects of adding bluebird can be. To study this Jeremy ran 20 automated runs of a sample app in four browsers, and took the average load times both with and without bluebird:\n\nWithout bluebird\n\n* Chrome: 340ms\n* Firefox: 327ms\n* Internet Explorer 11: 311ms\n* Edge: 20000ms (seriously)\n\nWith bluebird\n\n* Chrome: 252ms\n* Firefox: 361ms\n* Internet Explorer 11: 326ms\n* Edge: 399ms\n\nIf you'd like to try your own setup out, you can [go here](http://jdanyow.github.io/edge-promise/). We're still working on a few additional issues with Edge that appear \"in the wild\". They aren't consistent and aren't reproduced by our normal tests. If you are interested in tracking that, you may want to follow [this GitHub issue](https://github.com/aurelia/framework/issues/254#issuecomment-165562615).\n\nWe're really happy about how Aurelia's performance is making such large improvements during the beta period. We've got more items we want to address here, so stay tuned for further improvements.\n\n> **Note:** For those of you who need to support IE9, after updating, you will need to include a `requestAnimationFrame` polyfill in your page. You can find one [here](https://github.com/darius/requestAnimationFrame).\n\n## Bug Fixes\n\nThis release contains numerous bug fixes, stability improvements and edge-case handling. As mentioned above, to get the fixes you can run `jspm update`. You'll be able to continue to run `jspm update` to get our latest fixes and improvements until we release Beta 2. You also should have no fear of breaking changes. If you encounter anything, then it's an accidental regression and something we would love for you to help us correct by creating an issue with the regression's details.\n\nYou can find the release notes related to today's patches at the end of this post.\n\n## Docs\n\nWe're constantly working on improving our docs. We've done some major upgrades to our docs format to make it easier for docs authors and translators to contribute. We'll have more information on that soon...but basically anyone who knows markdown can write docs by just learning about a few extra features we've added to facilitate multi-cultural and multi-language (programming) preferences as well as deep linking and inline, code demos.\n\nWith these improvements in place, we can start pushing out new articles more frequently. Today we're releasing a new article on bundling written by core team member Ahmed Shuhel. Next we'll be adding more detailed articles on binding, templating and docs translation.\n\n## TypeScript\n\nFor months we've seen a growing interest in writing Aurelia apps with TypeScript. We've heard many requests for a TypeScript Skeleton, similar to our existing Babel-based navigation skeleton. I'm happy to announce that today we have an official production-ready navigation skeleton for TypeScript developers! It's designed to parallel our Babel skeleton and will help you to get up and running fast. It features:\n\n* Designed specially for VSCode and Atom (w/ atom-typescript)\n* All app source, unit tests and end-to-end tests are written in TypeScript.\n* A gulp-based task system supporting:\n\t* Building\n\t* Linting\n\t* Unit Testing\n\t* End-to-End Testing\n\t* Bundling\n* Fully configured d.ts files that provide intellisense in source, unit tests and e2e tests.\n* Configuration of 3rd party libraries via the standard [tsd](http://definitelytyped.org/tsd/) tooling.\n* Wallaby testing configured.\n\nYou may have noticed that we list VSCode, but not Visual Studio above. That's because the above project does not contain a Visual Studio project or solution file. However, it can be opened as a web site in Visual Studio and all the above features should function correctly. If you are interested in specific Visual Studio support, as always, we invite you to create issues and submit PRs to help us evolve this skeleton in any way that improves that scenario.\n\nMuch thanks to core team member Mike Graham as well as the many community members who put together TS sample projects which helped us in building this.\n\n## What's Next?\n\nDuring the beta we're focusing on performance, bug fixes, improvements to our testing and infrastructure...and adding a few additional features we want for the final release. As we've talked about previously, we would like to do a second beta before our release. This is to address changes in various web specifications (decorators, shadow dom, etc.) as well as changes in the JSPM and the system.js loader. We are seeking to shield our community as much as possible from any breaking effects of these changes, but there will be some. Please refer to [our beta announcement](http://blog.durandal.io/2015/11/16/aurelia-beta-week-day-1-the-beta-is-here/) for more details. As I'm sure you've come to expect, we'll provide as many details as possible when the time is right. It's important to us that you always know as much as possible about what we are doing and where we are heading.\n\n## Release Notes\n\n### aurelia-pal 1.0.0-beta.1.0.1\n\n#### Features\n\n* **PAL:** requestAnimationFrame and performance APIs ([09177bff](http://github.com/aurelia/pal/commit/09177bffc52f02f9138972c44f4c0082adcad1e9))\n\n### aurelia-pal-browser 1.0.0-beta.1.0.1\n\n#### Features\n\n* **PAL:** requestAnimationFrame and performance APIs ([8427b1f2](http://github.com/aurelia/pal-browser/commit/8427b1f26c93033973cdfb91c4ec0c57ccf7326c))\n* **performance:** performance API polyfill ([9b706b38](http://github.com/aurelia/pal-browser/commit/9b706b38296a586f7716ae433ec8b603bc678b5e))\n\n### aurelia-binding 1.0.0-beta.1.0.3\n\n* performance improvements\n\n#### Bug Fixes\n\n* **array-observation:** handle push then sort ([2ae6d0e4](http://github.com/aurelia/binding/commit/2ae6d0e46f85a865fcf3261ddf0298244573f185), closes [#233](http://github.com/aurelia/binding/issues/233))\n* **binding:** check before assign ([44b5a669](http://github.com/aurelia/binding/commit/44b5a669d563d3aeb1268cad8058a8bbf51d21f8), closes [#258](http://github.com/aurelia/binding/issues/258))\n* **file-input:** Firefox issue ([debed4e5](http://github.com/aurelia/binding/commit/debed4e5fa71ad99e2b97c3def6d605da4da884f), closes [#256](http://github.com/aurelia/binding/issues/256))\n\n### aurelia-templating 1.0.0-beta.1.0.2\n\n#### Bug Fixes\n\n* **content-selector:** incorrect projection in nested scenarios ([2e248676](http://github.com/aurelia/templating/commit/2e248676635b6f7c698894e06056f1bd0e11603e), closes [#231](http://github.com/aurelia/templating/issues/231))\n\n### aurelia-templating-binding 1.0.0-beta.1.0.2\n\n* performance improvements\n\n### aurelia-templating-resources 1.0.0-beta.1.0.3\n\n* performance\n\n#### Bug Fixes\n\n* **plugins:**\n  * revert file extensions checking ([c67adfb2](http://github.com/aurelia/templating-resources/commit/c67adfb2549e03a2a94271f20ccced1fea0adf24))\n  * remove possible duplicate file extensions ([842a13e7](http://github.com/aurelia/templating-resources/commit/842a13e7baab62f4c032f6db64cc7661fb69dbf8))\n\t\n### aurelia-templating-router 1.0.0-beta.1.0.3\n\n#### Bug Fixes\n\n* **add-nextview-first:** Add the next first on with ([d188112c](http://github.com/aurelia/templating-router/commit/d188112c67bbfd290c046ad11ce95338386024ea))\n* **default-swap-order:** Set default swap order to after resolves aurelia/framework#263 ([984aeb12](http://github.com/aurelia/templating-router/commit/984aeb1260670a9202dcda0b933608a61b1daade))\n* **spelling:** Miss-Spelled SwapStrategies ([9b9fb9ea](http://github.com/aurelia/templating-router/commit/9b9fb9ea1990376d7d0642a39df23eae8700de84))\n\n### aurelia-fetch-client 1.0.0-beta.1.0.2\n\n#### Bug Fixes\n\n* **http-client:**\n  * work around bug in IE/Edge where Blob types are ignored ([36407e27](http://github.com/aurelia/fetch-client/commit/36407e27c5b1881473151126fed53f74299ad296))\n  * correct type check ([d38d1b34](http://github.com/aurelia/fetch-client/commit/d38d1b34373c50907e7c7673def8ba0ebc5a5427))\n\n### aurelia-animator-css 1.0.0-beta.1.0.2\n\n#### Bug Fixes\n\n* **npm-convention:** npm test works ([d44f2ca5](https://github.com/aurelia/animator-css/commit/d44f2ca513ce3a87ff17dbeae191c4ab0c4f28e0))\n* **race-condition:**\n  * fix for missing animationend event under stress ([f7963e3e](https://github.com/aurelia/animator-css/commit/f7963e3e76871704822408b32bd0caa5f111cd93))\n  * test for animation occurring without timeout ([3eefc533](https://github.com/aurelia/animator-css/commit/3eefc5334556403adb9284b9051187ba27f72939))\n* **tests:** Fixed ReferenceError in two tests ([f976e0b0](https://github.com/aurelia/animator-css/commit/f976e0b09a98136d702144747b4475547c349cb8))\n\n### aurelia-skeleton-navigation 1.0.0-beta.1.0.3\n\n#### Bug Fixes\n\n* **build:** remove the faulty doc task ([e5119bf4](http://github.com/aurelia/skeleton-navigation/commit/e5119bf4f772033a73dfbd34a9a426a15e358fd3))\n* **main:** add notes on swap order ([c051b2cb](http://github.com/aurelia/skeleton-navigation/commit/c051b2cb93f2e8d24b4c224af40f56cba6949955))\n\n### aurelia-i18n 0.4.4\n\n#### Bug Fixes\n\n* **all:** add missing dependencies ([73370c8f](http://github.com/aurelia/i18n/commit/73370c8fb75cf1e024fd6c22c616752c1b4a11a3))\n* **lint:** fixes linter issues and adds build ([1f60c4f5](http://github.com/aurelia/i18n/commit/1f60c4f522bc4b22225d1b7a4d52ad7028e2873e))\n* **tr:** fixes object flattening ([2fba7fbb](http://github.com/aurelia/i18n/commit/2fba7fbb589b4b2e6cfe1216ebc57b6e4eb3cbdf))\n\n#### Features\n\n* **signaling:** provides TBindingBehavior ([d9877eea](http://github.com/aurelia/i18n/commit/d9877eea7f5de73e75f5fa00a6c39a8613ce40ab))"}