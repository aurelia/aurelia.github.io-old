{"name":"Aurelia-Computed","description":"This week, Core Team Member Jeremy Danyow [https://github.com/jdanyow] shows us a new plugin to Aurelia's binding engine that he's been working on: aurelia-computed [https://github.com/jdanyow/aurelia-computed/].","author":{"name":"AureliaEffect"},"links":{"static":"blog/2015/5/13/aurelia-computed","html":"blog/2015/5/13/aurelia-computed/index.html","fragment":"blog/2015/5/13/aurelia-computed/index-fragment.html","self":"blog/2015/5/13/aurelia-computed/index.json"},"content":"\r\nThis week, Core Team Member [Jeremy Danyow](https://github.com/jdanyow) shows us a new plugin to Aurelia's binding engine that he's been working on: [aurelia-computed](https://github.com/jdanyow/aurelia-computed/).\r\n\r\n----\r\n\r\n[**aurelia-computed**](https://github.com/jdanyow/aurelia-computed/) is a plugin for the [Aurelia](http://www.aurelia.io/) platform that improves the efficiency of data-binding computed properties.  Binding to computed properties (properties with getter functions) typically requires dirty-checking.  This plugin uses Aurelia's javascript parser to parse the body of the property's getter function and check the resulting [abstract syntax tree (AST)](http://en.wikipedia.org/wiki/Abstract_syntax_tree) for \"observability\".  If the getter function is observable, a specialized observer is returned to Aurelia's [pluggable binding system](http://www.danyow.net/aurelia-property-observation/).  The observer publishes change events when properties accessed by the getter function change.\r\n\r\n#### What types of properties can aurelia-computed observe?\r\n\r\nOne-liners that access members that are accessible from the binding scope are good candidates for observation by this plugin.  Here's a few examples:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    // \"firstName\" and \"lastName\" will be observed.\r\n    get fullName() {\r\n      return `${this.firstName} ${this.lastName}`;\r\n    }\r\n  \r\n```\r\n\r\n\r\n  ```JavaScript\r\n    // \"isLoggedIn\", \"user\" and \"user.name\" will be observed.\r\n    get userName() {\r\n      return this.isLoggedIn ? this.user.name : '(Anonymous)';\r\n    }\r\n  \r\n```\r\n\r\n\r\n  ```JavaScript\r\n    // \"count\" will be observed.\r\n    get shoppingCartDescription() {\r\n      return this.count + ' ' + this.pluralize('item', this.count);\r\n    }\r\n  \r\n```\r\n\r\n\r\n  ```JavaScript\r\n    var _bar = 'baz';\r\n    \r\n    export class Foo {\r\n    \r\n      // This property cannot be observed by aurelia-computed.\r\n      // Dirty-checking will be required.\r\n      // \"_bar\" can't be accessed from the binding scope.\r\n      get bar() {\r\n        return _bar;\r\n      }\r\n    }\r\n  \r\n```\r\n\r\n#### Other options\r\n\r\nAurelia's binding system already has a method for observing computed properties- the `@computedFrom` decorator.  Simply decorate any property with `@computedFrom(propertyName1[, propertyName2..., propertyNameN])` and Aurelia's binding system will observe the specified properties and re-evaluate bindings when any of the properties change.  The aurelia-computed plugin simply automates the dependency identification and is able to support more complex scenarios such as observing property paths (`this.aurelia.computed.supports.me`).  There's also the dirty-checking fallback which isn't anything to worry about most of the time.\r\n\r\n#### Development Logging\r\n\r\nEnable debug logging in your application (see below for instructions) to view aurelia-computed's log messages.  Aurelia-computed logs when it's not able to parse a property getter function or when the function's logic is not observable.  This will tell you when Aurelia is going to use dirty-checking.  Here's an example:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    <template>\r\n      Thanos wants ${whatThanosWants}\r\n    </template>\r\n  \r\n```\r\n\r\n\r\n  ```JavaScript\r\n    var infinityStones = ['Soul','Time','Space','Mind','Reality','Power'];\r\n    \r\n    export class Thanos {\r\n      get whatThanosWants() {\r\n        return infinityStones;\r\n      }\r\n    }\r\n  \r\n```\r\n\r\nSince `infinityStones` is declared in the module scope, which binding cannot access, aurelia-computed logs the following message:\r\n\r\n![console](http://i.imgur.com/c0euMic.png)\r\n\r\n\r\n## Get Started\r\n\r\n1) Install aurelia-computed:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    jspm install aurelia-computed\r\n  \r\n```\r\n2) Use the plugin in your app's main.js:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    export function configure(aurelia) {\r\n      aurelia.use\r\n        .standardConfiguration()\r\n        // enable debug logging to see aurelia-computed's messages.\r\n        .developmentLogging()\r\n        // install the plugin\r\n        .plugin('aurelia-computed');\r\n    \r\n      aurelia.start().then(a => a.setRoot());\r\n    }\r\n  \r\n```"}