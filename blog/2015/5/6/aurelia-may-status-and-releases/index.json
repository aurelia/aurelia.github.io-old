{"name":"Aurelia May Status and Releases","description":"Today's release comes with what we believe is the final set of big breaking changes. We've also got new features, improvements and a few other goodies.","author":{"name":"AureliaEffect"},"links":{"static":"blog/2015/5/6/aurelia-may-status-and-releases","html":"blog/2015/5/6/aurelia-may-status-and-releases/index.html","fragment":"blog/2015/5/6/aurelia-may-status-and-releases/index-fragment.html","self":"blog/2015/5/6/aurelia-may-status-and-releases/index.json"},"content":"\nToday's release comes with what we believe is the final set of big breaking changes. We've also got new features, improvements and a few other goodies.\n\n## Changes\n\n### ES2016 Metadata\n\nThere's currently work being done to standardize how _metadata_ is attached to classes, members, etc. In this release, we remove Aurelia's metadata implementation and replace it with the emerging ES2016 standard. This causes breaking changes if you were working directly with metadata. However, if you were using Aurelia's decorators or the fallback apis, you should not see any changes, since this is mostly an implementation detail. If you are interested in the emerging Metadata Reflection API, you can read [the detailed spec](https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md) and [have a look at the polyfill](https://github.com/rbuckton/ReflectDecorators) that we've incorporated.\n\n#### Positive Side Effects\n\nNow that we've changed the way that metadata works, we've been able to remove some inheritance that was previously required by the framework. For example, in the dependency injection library, we were able to remove the base classes `InstanceActivator` and `Registration`. Now, if you want to customize how DI works using these extensibility points, you just implement a class with a particular api and then use the decorator api to associate it with a class. A related benefit is that, by removing some inheritance throughout the framework, we do get a performance increase in certain areas.\n\nThere's another benefit to this that relates to [yesterday's TypeScript 1.5 Beta release](http://blogs.msdn.com/b/typescript/archive/2015/04/30/announcing-typescript-1-5-beta.aspx). The latest version of TypeScript will emit type metadata for classes using the Reflect Metadata API if you compile your code with the `--emitDecoratorMetadata` flag. To support this, there's a new decorator we've added which you can use on your TypeScript classes:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    @autoinject()\n    export class Foo {\n      constructor(public bar:Bar){}\n    }\n  </source-code>\n</code-listing>\n\nBy using `@autoinject` on a class in combination with the `--emitDecoratorMetadata` compiler flag, Aurelia's dependency injection system will be able to automatically determine the constructor types. Sweet!\n\n### Enumerations\n\nWhile JavaScript doesn't have an enumeration type, there are several areas in Aurelia where we use enumeration-ish values. We've made a couple of breaking changes in order to make this consistent across all our libraries. All enumerations are now named using singular words. This means that the `levels` enum in the logging library is now named `logLevel` and is exported as follows:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    export var logLevel = {\n      none: 0,\n      error: 1,\n      warn: 2,\n      info: 3,\n      debug: 4\n    };\n  </source-code>\n</code-listing>\n\nThe binding modes, which were not grouped together at all, are now grouped under the export `bindingMode` as follows:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    export var bindingMode = {\n      oneTime: 0,\n      oneWay: 1,\n      twoWay: 2\n    };\n  </source-code>\n</code-listing>\n\nThe same type of change was made to the router's, also formerly ungrouped, activation strategies:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    export var activationStrategy = {\n      noChange: 'no-change',\n      invokeLifecycle: 'invoke-lifecycle',\n      replace: 'replace'\n    };\n  </source-code>\n</code-listing>\n\n### Naming Consistency\n\nThere were a few places across the libraries where different naming schemes were being used. We've tried to patch those up. In particular, we've replaced the use of \"uri\"  through our APIs with a consistent use of \"url\". This is a breaking API change to `HttpRequestBuilder` and `HttpRequestMessage`. To update, replace uses of `withUri`, `withBaseUri`, and `uri` with `withUrl`, `withBaseUrl`, and `url`, as appropriate. Another place was our plugin API. Previously plugins needed to implement an `install` method but everything else in Aurelia used a `configure` terminology. We've change plugins to now use a `configure` method so that it's the same everywhere.\n\n### Routing\n\nBy far, the biggest set of changes in these releases are to the router. There were a number of long-standing issues with the router that have now been resolved, thanks to the excellent work of core team member [Bryan Smith](https://github.com/bryanrsmith).\n\n#### Router Configuration\n\nPrior to this release, configuring the router has been a bit odd. One needed to have a router injected and then set it as a property named \"router\". Additionally, if you wanted to inject a router to control navigation but not to set up a child navigation, there were problems. To address these issues, we've changed the way configuring routers works. To configure a router, you now implement a `configureRouter` method. The method will receive the configuration object as its first parameter and the router instance as is second parameter. If you need the router, perhaps because you want to use the navigation model, then you can just store it, but if not, you can ignore it. Here's a look at the navigation skeleton's app class after this change:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    export class App {\n      configureRouter(config, router){\n        config.title = 'Aurelia';\n        config.map([\n          { route: ['','welcome'],  moduleId: './welcome',      nav: true },\n          { route: 'flickr',        moduleId: './flickr',       nav: true },\n          { route: 'child-router',  moduleId: './child-router', nav: true }\n        ]);\n    \n        this.router = router;\n      }\n    }\n  </source-code>\n</code-listing>\n\nAs as result of this change, you can now have a router injected into any class without accidentally creating a new child navigation system. The router that is injected will be the closest router in the navigation hierarchy and can be used to do programmatic navigation or route generation.\n\n#### Route Generation\n\nThe latest version of the router now has full support for route generation so that you no longer need to hard-code route patterns in your HTML or construct them in your JavaScript. To leverage this, simply name the route in your configuration. If you want to generate a route based on data in JavaScript, you use the `generate` method like so:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    let href = router.generate(routeName, params);\n  </source-code>\n</code-listing>\nThe generation mechanism understands whether you are running in hash change or push state mode, how your routes are parameterized and how to construct query strings. Just give it the name and a params object with key/value pairs for the route parameters and query string data.\n\nYou will often want to generate routes in your HTML so that you can link to different app states, but without hardcoding the route patterns. Aurelia now provides a `route-href` custom attribute that you can use to accomplish this. It takes `route` and `params` properties. Here's an example using it, based on our contact app sample:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    <a route-href=\"route: contacts; params.bind: {id:contact.id}\"></a>\n  </source-code>\n</code-listing>\n\nThis will generate the route named \"contacts\" based on the provided \"id\" parameter.\n\n#### Activation Parameters\n\nAs part of the work on route generation, and in an effort to encapsulate knowledge of route patterns, we've changed the way the `canActivate` and `activate` hooks receive data. We've simplified the provided data by combining the route parameters and query string values into a single key/value pair object. This makes the api mirror the generation api and allows the developer to not need to remember or lookup wether a given input is coming from a route parameter or a query string. The updated lifecycle method signature is as follows:\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    activate(params, config, instruction) { ... }\n  </source-code>\n</code-listing>\n\n## Updating Aurelia\n\nAs a reminder, these releases have breaking changes, so you cannot do a simple `jspm update`. JSPM is smart in the way that it follows semver, and it won't let you break your app on accident. I recommend using `jspm install` for each \"top level\" Aurelia library. Just look in your `package.json` file, in the `jspm` section and be sure to re-install all the Aurelia dependencies listed there.\n\n## Status\n\nThis has been a big release, and over the last month or so we've been making regular breaking changes. We believe that this release marks the end of the sweeping breaking changes to common use APIs. We are still in a pre-beta state, so we do expect there to be more changes, but changes after this point are likely to be much smaller and perhaps not effect you at all. As has been our practice, we will continue to communicate openly with you about everything we've been doing.\n\n### Performance\n\nThis release is both smaller and faster than previous releases. While we haven't done most of our serious perf work yet, we have optimized our compiler options to reduce code size and use more performant transpilation strategies. We've also been doing some work in our templating engine to optimize specific use cases which occur frequently.\n\nThere is major work still coming up here. First you will see the introduction of the \"view cache\"...or rather I should say the re-introduction of it. This is a concept from Durandal, circa 2012, where we had the idea to re-use view instances. In Durandal the implementation had some quirks and wasn't quite as flexible as needed due to our reliance on 3rd party libraries. In Aurelia, we don't have that problem and will be able to implement something quite powerful. Be on the lookout for that soon.\n\nThe second major advance that is coming is in our databinding system. We are going to rework portions of the internal implementation to drastically improve performance and reduce memory. Once that is complete, we'll be able to add a [few more features](http://www.danyow.net/extending-aurelias-binding-language/) to the binding engine that we really want to add.\n\n### Continued Communication\n\nWe've made it a goal to have at least one blog post here every week, so you have constant content informing you of the project status, releases and cool features. You've had the opportunity to hear from various members of our core team on a variety of topics from adaptive databinding to custom element creation. We're going to continue right along this path and next week you'll get to hear from core team member Mike Graham about how we are enabling TypeScript developers to have an awesome experience with Aurelia.\n\nThis isn't good enough though. We want to take it up a notch. In an effort to improve our project organization and give you further visibility into our work, we've adopted  [ZenHub](https://zenhub.io). If you would like to have deeper insight into our development process, you can now install the [ZenHub](https://zenhub.io) Chrome Extension and visit any of our repository's \"boards\". These boards will show you who is working on what, what is planned next, what is under review and what is recently finished. You can get an overview of all Aurelia work by visiting [the framework board](https://github.com/aurelia/framework#boards) and selecting \"show all\" in the upper left corner of the board."}