{"name":"Porting an Angular 2.0 App to Aurelia","description":"Recently, Joe Eames [https://twitter.com/josepheames] had a nice PluralSight [http://www.pluralsight.com] webinar demonstrating some of the features of Angular 2.0. We thought \"Wouldn't it be cool to see the same app built with Aurelia?\" It seemed like a good opportunity to show what we feel makes Aurelia so easy-to-use and efficient.","author":{"name":"AureliaEffect"},"links":{"static":"blog/2015/5/4/porting-an-angular-2-0-app-to-aurelia","html":"blog/2015/5/4/porting-an-angular-2-0-app-to-aurelia/index.html","fragment":"blog/2015/5/4/porting-an-angular-2-0-app-to-aurelia/index-fragment.html","self":"blog/2015/5/4/porting-an-angular-2-0-app-to-aurelia/index.json"},"content":"\nRecently, [Joe Eames](https://twitter.com/josepheames) had a nice [PluralSight](http://www.pluralsight.com) webinar demonstrating some of the features of Angular 2.0.  We thought \"Wouldn't it be cool to see the same app built with Aurelia?\" It seemed like a good opportunity to show what we feel makes Aurelia so easy-to-use and efficient.\n\n#### The Rules\n\nIn order to ensure that this is an even and accurate comparison, we set some ground rules:\n\n1. The code should be a direct port unless there is a blaring issue or error in the source.\n2. The code should use all of the same variables and names in order to avoid confusion.\n3. We'll use the standard Aurelia [skeleton](https://github.com/aurelia/skeleton-navigation) as our starting point.\n\n### Getting Started\n\nLooking at [Joe's original repo](https://github.com/joeeames/ng2-ps-webinar), the most logical place to start would be the \"TodoApp\" component. Let's see both versions side-by-side:\n\n<div>\n  <div style=\"float: left; width: 50%;\">\n    <h4>Angular 2.0</h4>\n    <strong>app.js</strong>\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    import {Component, View, bootstrap} from 'angular2/angular2';\n    import {NewItem} from 'components/new-item';\n    import {TodoList} from 'components/todo-list';\n\n    @Component({\n    \tselector: 'todo-app'\n    })\n    @View({\n    \ttemplateUrl: 'components/app.html',\n    \tdirectives: [NewItem, TodoList]\n    })\n    export class TodoApp {}\n\n    bootstrap(TodoApp);\n  </source-code>\n</code-listing>\n\n  </div>\n\n  <div style=\"float: right; width: 48%;\">  \n    <h4>Aurelia</h4>\n    <strong>app.js</strong>\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    export class TodoApp {}\n  </source-code>\n</code-listing>\n\n  </div>\n</div>\n\n<div style=\"clear: both;\"></div>\n\n<div>\n  <div style=\"float: left; width: 50%\">  \n\t<h4>Angular 2.0</h4>\n    <strong>app.html</strong>\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    <div>\n    \t<todo-list></todo-list>\n    \t<new-item></new-item>\n    </div>\n  </source-code>\n</code-listing>\n\n  </div>\n\n  <div style=\"float: right; width: 48%\">  \n    <h4>Aurelia</h4>\n    <strong>app.html</strong>\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    <template>\n      <require from=\"./todo-list\"></require>\n      <require from=\"./new-item\"></require>\n\n      <todo-list></todo-list>\n      <new-item></new-item>\n    </template>\n  </source-code>\n</code-listing>\n\n  </div>\n</div>\n\n<div style=\"clear: both;\"></div>\n</div>\n\n#### Commentary\n\nIn order to port the JS code, all we had to do was delete code from the Angular version. This is a nice little example of how Aurelia's support of simple conventions drastically reduces the boiler plate code developers need to write.\n\nIf you look at the HTML, you'll see that the Aurelia version has a little more markup than the Angular 2.0 version. To understand why, take a look back at the Angular 2.0 JS code. You will see that developers must list all `directives` that their view will use there.\n\n**Aurelia makes a fundamentally different choice.**\n\nWith Aurelia, we chose to support Separation of Concerns and believe strongly that details regarding a view's implementation should not be found inside of a Controller or ViewModel.  Aurelia accomplishes this by allowing the view to declare its internal dependencies using `require` elements. There are a number of important positive side-effects from this choice:\n\n* Separation of Concerns - As already mentioned, the details of a view's implementation stay inside the view and aren't leaked into the Controller or View-Model.\n* Multiple Views Per Controller/View-Model- You can now more easily have different views for the same Controller/View-Model and they can be implemented drastically differently, with each one loading only the resources it needs.\n* Sharing a View Between Controllers/View-Models - You can more easily have multiple View-Models use the same view. There's no need to duplicate the view's resources in every JS file.\n* Improved Readability/Understandability - If you look at a view's source, you know exactly what behaviors are active in that view. You don't have to hunt down a JS file, open it and examine it's directive list and then correlate those back to the view.\n\nUltimately, this important design difference, placing view resource declaration in the view where it belongs, allows developers greater flexibility, reduction in code duplication and an overall improvement in maintainability.\n\n*Next we'll look at the \"TodoList\" component:*\n\n<div>\n  <div style=\"float: left; width: 50%\">  \n    <h4>Angular 2.0</h4>\n    <strong>todo-list.js</strong>\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    import {Component, View, For, If, EventEmitter} from 'angular2/angular2';\n    import {Inject, bind} from 'angular2/di';\n    import {todoItems} from 'services/todoItems';\n\n    @Component({\n    \tselector: 'todo-list',\n      injectables: [\n        bind('todoItems').toValue(todoItems)\n      ]\n    })\n    @View({\n    \ttemplateUrl: 'components/todo-list.html',\n    \tdirectives: [For, If]\n    })\n    export class TodoList {\n      constructor(@Inject('todoItems') todoItems) {\n    \t\tthis.items = todoItems;\n    \t}\n    \tsetCompleted(item, checked) {\n    \t\titem.completed = checked;\n    \t}\n    \tcompleteAll() {\n    \t\tthis.items.forEach((item) => {\n    \t\t\tthis.setCompleted(item, true);\n    \t\t});\n    \t}\n    \tremoveItem(item) {\n    \t\tthis.items.splice(this.items.indexOf(item), 1);\n    \t}\n    }\n\n  </source-code>\n</code-listing>\n\n  </div>\n\n  <div style=\"float: right; width: 48%\">  \n    <h4>Aurelia</h4>\n    <strong>todo-list.js</strong>\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    import {TodoItems} from 'services/todo-items';\n\n    export class TodoList {\n      static inject = [TodoItems];\n      constructor(todoitems) {\n        this.items = todoitems.items;\n      }\n      completeAll() {\n        this.items.forEach(item => item.completed = true);\n      }\n      removeItem(item) {\n        this.items.splice(this.items.indexOf(item), 1);\n      }\n    }\n  </source-code>\n</code-listing>\n\n  </div>\n</div>\n\n<div style=\"clear: both;\"></div>\n\n<br />\n<br />\n\n<div>\n  <div style=\"float: left; width: 50%\">  \n    <h4>Angular 2.0</h4>\n    <strong>todo-list.html</strong>\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    <div style=\"margin-bottom:10px\">\n    \t<h1>To Do</h1>\n    \t<div style=\"padding:5px\" *for=\"var item of items\">\n    \t\t\t<input type=\"checkbox\" #chkbox [checked]=\"item.completed\" (click)=\"setCompleted(item, chkbox.value)\">\n    \t\t\t{{item.text}} <a class=\"glyphicon glyphicon-remove\" (click)=\"removeItem(item)\"></a>\n    \t</div>\n    \t<button *if=\"items.length > 1\" class=\"btn btn-xs btn-warning\" (click)=\"completeAll()\">Complete All</button>\n    </div>\n  </source-code>\n</code-listing>\n\n  </div>\n\n  <div style=\"float: right; width: 48%\">  \n    <h4>Aurelia</h4>\n    <strong>todo-list.html</strong>\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    <template style=\"margin-bottom:10px\">\n      <h1>To Do</h1>\n    <div style=\"padding:5px\" repeat.for=\"item of items\">\n          <input type=\"checkbox\" checked.bind=\"item.completed\" />\n          ${item.text} <a class=\"glyphicon glyphicon-remove\" click.trigger=\"$parent.removeItem(item)\"></a>\n      </div>\n      <button if.bind=\"items.length\" class=\"btn btn-xs btn-warning\" click.trigger=\"completeAll()\">Complete All</button>\n    </template>\n  </source-code>\n</code-listing>\n  </div>\n</div>\n\n<div style=\"clear: both;\"></div>\n</div>\n\n#### Commentary\n\nAgain, the primary change we made was to delete a bunch of code. Aurelia's conventions just don't require you to do all that work. We were also able to delete the `setCompleted` method, since Aurelia has Two-Way Databinding. The manual synchronization work required by Angular 2.0 can be automatically handled by Aurelia.\n\nIn this component, you also see the introduction of Dependency Injection. With Aurelia, you can simply create a static member named `inject` to declare your class's dependencies. If you prefer, [you can also use an ES7 decorator to accomplish the same thing](http://blog.durandal.io/2015/04/09/aurelia-update-with-decorators-ie9-and-more/#decorators). In the Angular 2.0 version, for some reason, the DI has to be configured in two places. Once in the Component decorator and once on the constructor.\n\nLooking at the HTML, we see two completely different approaches to syntax. The Angular 2.0 version relies on special characters: *, (), [] and #. The Aurelia version relies on binding commands, designated with the dot (.) character.\n\n**Again, this is an important design difference with serious ramifications.**\n\nWhile the special characters that Angular chooses for its templating language are technically valid in HTML, they are not valid in SVG nor can they be used directly with DOM APIs. The browser will not allow it. To get around this, you have to use a secondary syntax. So, all Angular 2.0 developers must learn two syntaxes for templating instead of one. On the other hand, Aurelia's templating syntax works in all scenarios without any issue: one, consistent syntax for everything. Additionally, using the dot as a separator allows us to make our binding language fully extensible.\n\nThere's another important side-effect of this design choice as well. If you've never seen Angular 2.0 before, you probably have no clue what those symbols mean. It's cryptic and requires even knowledgable developers to keep a constant mental map between the symbol and it's meaning. Aurelia, on the other hand, uses human-readable binding commands. Even developers who have never seen it before can often understand what it means. This results in improvements in learnability, readability and maintenance.\n\nA few more quick notes:\n\n* Angular uses `{{}}` and Aurelia uses `${}`. There's no real technical reason behind Aurelia's difference in choice here. It's more related to consistency. In ES 2015, JavaScript string interpolation is done with the `${}` syntax. Throughout Aurelia, wherever possible, we've constantly tried to adopt the same syntax and concepts as the native platform, including bridging similar ideas into our templating language.\n* Aurelia's templating language can leverage Two-Way binding on the `input` element, allowing us to remove Angular's manual event wireup in the view as well as the previously mentioned function from JavaScript.\n* We used Aurelia's `trigger` command for events in order to match Angular 2.0 behavior as much as possible. However, particularly in the case of the repeater, we would normally use `delegate` to enable event delegation and reduce event handler wire-ups. I believe that Angular also supports this with the `(^event)` syntax, but that may have changed.\n\n*Now, let's port the last piece, the NewItem component:*\n\n<div>\n  <div style=\"float: left; width: 50%\">  \n    <h4>Angular 2.0</h4>\n    <strong>new-item.js</strong>\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    import {Component, View} from 'angular2/angular2';\n    import {Inject, bind} from 'angular2/di';\n    import {todoItems} from 'services/todoItems';\n\n    @Component({\n    \tselector: 'new-item',\n      injectables: [\n        bind('todoItems').toValue(todoItems)\n      ]\n    })\n    @View({\n    \ttemplateUrl: 'components/new-item.html'\n    })\n    export class NewItem {\n    \tconstructor(@Inject('todoItems') todoItemList) {\n        this.items = todoItemList\n    \t}\n    \tkeyPressed($event, input) {\n    \t\tif($event.which === 13) {\n    \t\t\tthis.addItem(input);\n    \t\t}\n    \t}\n    \taddItem(input) {\n    \t\tthis.items.push({\n    \t\t\ttext: input.value,\n    \t\t\tcompleted: false\n    \t\t})\n    \t\tinput.value = '';\n    \t}\n    }\n  </source-code>\n</code-listing>\n\n  </div>\n\n  <div style=\"float: right; width: 48%\">  \n    <h4>Aurelia</h4>\n    <strong>new-item.js</strong>\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    import {TodoItems} from 'services/todo-items';\n\n    export class NewItem {\n      static inject = [TodoItems];\n      constructor(todoitems) {\n        this.items = todoitems.items;\n      }\n      keyPressed($event) {\n        if($event.which === 13) {\n          this.addItem(this.value);\n        }\n      }\n      addItem(input) {\n        this.items.push({\n          text: this.value,\n          completed: false\n        })\n        this.value = '';\n      }\n    }\n  </source-code>\n</code-listing>\n\n  </div>\n</div>\n\n<div style=\"clear: both;\"></div>\n\n<br />\n<br />\n\n<div>\n  <div style=\"float: left; width: 50%\">  \n    <h4>Angular 2.0</h4>\n    <strong>new-item.html</strong>\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    <div class=\"form-inline\">\n    \t<div class=\"form-group\">\n    \t\t<label for=\"description\">New Item</label>\n    \t\t<input id=\"description\" class=\"form-control\" #desc (keyup)=\"keyPressed($event, desc)\">\n    \t</div>\n    \t<button class=\"btn btn-primary\" type=\"button\" (click)=\"addItem(desc)\">Add Item</button>\n    </div>\n  </source-code>\n</code-listing>\n\n  </div>\n\n  <div style=\"float: right; width: 48%\">  \n    <h4>Aurelia</h4>\n    <strong>new-item.html</strong>\n\n\n<code-listing>\n  <source-code lang=\"JavaScript\">\n    <template>\n      <div class=\"form-inline\">\n        <div class=\"form-group\">\n          <label for=\"description\">New Item</label>\n          <input id=\"description\" class=\"form-control\" value.bind=\"value\" keyup.trigger=\"keyPressed($event)\">\n        </div>\n        <button class=\"btn btn-primary\" type=\"button\" click.trigger=\"addItem()\">Add Item</button>\n      </div>\n    </template>\n  </source-code>\n</code-listing>\n\n  </div>\n</div>\n\n<div style=\"clear: both;\"></div>\n\n#### Commentary\n\nAs in the previous examples, we begin the porting by deleting a lot of Angular 2.0 code which is just not needed. Dependency Injection takes on the same form here as previously with a single declaration in Aurelia vs. two for Angular.\n\nThere's a slightly different sort of interplay here between the ways the two versions interact with their views. In the Angular version, there's no Two-Way Databinding, so again the HTML must be manually wired up to shuffle data in both directions. In this case, it creates a direct coupling between the view and view-model in the Angular version because the lack of Two-Way Databinding forces the developer to pass the HTMLInputElement instance to the view-model in order to retrieve it's value. In the Aurelia version, we just bind the value. This results in more re-usable code, but also a much easier to test interface, as no faking/mocking of HTML elements is required for the Aurelia version.\n\n### Conclusion\n\nPorting the Angular 2.0 app to Aurelia was pretty straight forward. Aurelia Core Team Member, [Patrick Walters](https://github.com/PWKad), who helped to put this article together, said it took him about 8 minutes to do the port. As you can see, in every case we deleted great swathes of JavaScript code. If you look back over the Aurelia versions, you'll also notice something I think is very important. There's not a single reference to the Aurelia framework in any of the JavaScript. It's all just plain ES2015. No framework intrusion. That's a big contrast to the Angular version.\n\nHopefully you can also see how Aurelia's templating language ports in a pretty straight forward manner, but that doing so improves the readability and platform compatibility of the markup. Even though this example uses very little in terms of forms input, you can start to get the feel for how modern Two-Way Databinding can also reduce code and markup and simplify the implementation process.\n\nWe hope this has been informative. We didn't fabricate any examples for this post, but instead started with a recent Angular 2.0 sample app. We then ported it to see what the process was like, hoping to show you the elegance of Aurelia as well as the rationale and side-effects of some of the different design decisions we've made along the way.\n\n#### Project Links\n\n* [The Original Angular 2.0 Version](https://github.com/joeeames/ng2-ps-webinar)\n* [The Aurelia Port](https://github.com/PWKad/au-ps-comparison)\n\n#### Footnote\n\nWe don't intend to constantly do these sorts of Angular comparison posts. It's not fun for us and we don't want to have a reputation for doing this all the time. If you are wondering why we have done this, it's very simple. There's a huge demand for it. We receive a constant stream of requests through email, at conferences and in person to talk about how Aurelia differs from Angular 2.0. We get asked to come to conferences and user groups to speak about this, asked to write blog posts and asked to prepare private internal presentations for various organizations. This post is an attempt to provide some simple answers to a large group of people who has a critical interest in this topic."}