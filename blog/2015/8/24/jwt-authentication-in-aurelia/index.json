{"name":"JWT Authentication in Aurelia","description":"This week community member Ryan Chenkie [https://twitter.com/ryanchenkie] shows us how to implement JWT Authentication in Aurelia. Ryan is a full-stack developer from Canada who works for Auth0 [https://auth0.com] as a Tech Writer where he provides in-depth tutorials and seed projects for the newest frameworks such as Angular 2, React, and Aurelia as well as other modern web technologies.","author":{"name":"AureliaEffect"},"links":{"static":"blog/2015/8/24/jwt-authentication-in-aurelia","html":"blog/2015/8/24/jwt-authentication-in-aurelia/index.html","fragment":"blog/2015/8/24/jwt-authentication-in-aurelia/index-fragment.html","self":"blog/2015/8/24/jwt-authentication-in-aurelia/index.json"},"content":"\r\nThis week community member [Ryan Chenkie](https://twitter.com/ryanchenkie) shows us how to implement JWT Authentication in Aurelia. Ryan is a full-stack developer from Canada who works for [Auth0](https://auth0.com) as a Tech Writer where he provides in-depth tutorials and seed projects for the newest frameworks such as Angular 2, React, and Aurelia as well as other modern web technologies.\r\n\r\n---\r\n\r\n**TL;DR**: Aurelia is a great client-side JavaScript framework and adding JWT authentication to Aurelia apps is easy with the [aurelia-auth package](https://github.com/paulvanbladel/aurelia-auth). Checkout the [GitHub repo](https://github.com/chenkie/aurelia-jwt-auth) for this article to find out how to add authentication to your Aurelia app.\r\n\r\n---\r\n\r\n## Getting Started\r\n\r\nGetting started with Aurelia is a piece of cake. The framework's [getting started guide](http://aurelia.io/get-started.html) offers an in-depth set of instructions along with a [seed project](https://github.com/aurelia/skeleton-navigation/releases) that make it very simple to get up and running quickly.\r\n\r\nThis tutorial will expand upon the seed project and show how to add JWT authentication to a random quote application. We'll be using the [NodeJS JWT Authentication Sample](https://github.com/auth0/nodejs-jwt-authentication-sample) as our backend to show how we can retrieve a JWT upon login, save it in local storage, and send it along with every subsequent request. Our app will let all visitors retrieve a random quote, but logged-in users will be able to get a super-secret quote.\r\n\r\n![](https://www.dropbox.com/s/lxzd6qeq69l0p6y/aurelia-welcome.png?dl=1)\r\n\r\n### Two Ways to Get Going\r\n\r\nYou can go through the [getting started](http://aurelia.io/get-started.html) guide that Aurelia provides and follow along, changing files in their seed project as we go. Alternatively, you can clone [the project for this tutorial](https://github.com/chenkie/aurelia-jwt-auth) and follow along from there.\r\n\r\nIf you are starting from Aurelia's seed project, be sure to split it out into two subdirectories, `client` and `server`. The `server` directory is where the [NodeJS JWT authentication sample](https://github.com/auth0/nodejs-jwt-authentication-sample) will go.\r\n\r\nTo get the server setup, you can follow the instructions in the readme for the [NodeJS JWT Authentication Sample](https://github.com/auth0/nodejs-jwt-authentication-sample).\r\n\r\n### A Little Help From Aurelia-Auth\r\n\r\nTo help us with our token dealings on the front-end, we'll use the awesome [aurelia-auth plugin](https://github.com/paulvanbladel/aurelia-auth) provided by Paul van Bladel, along with some pointers from his [sample app repo](https://github.com/paulvanbladel/aurelia-auth-sample).\r\n\r\n## Setting Up the Client Config Files\r\n\r\nThere's a bit of configuration setup to do, but once it's in place things will be a breeze.\r\n\r\nAfter doing `npm install` and `jspm install` to pull in all the dependencies, we'll need to also install the `aurelia-auth` plugin. We can do this with `jspm` within the client directory:\r\n\r\n\tjspm install github:paulvanbladel/aurelia-auth\r\n\r\n### Application Bootstap Config\r\n\r\nLet's give our app a name of `quotes-app` and reflect this on the `body` tag of `index.html` where the app loads.\r\n\r\n\r\n\r\n  ```HTML\r\n    <!-- client/index.html -->\r\n    \r\n    ...\r\n    \r\n    <body aurelia-app=\"quotes-app\">\r\n      <script src=\"jspm_packages/system.js\"></script>\r\n      <script src=\"config.js\"></script>\r\n      <script>\r\n        System.import('aurelia-bootstrapper');\r\n      </script>\r\n    </body>\r\n    \r\n    ...\r\n    \r\n  \r\n```\r\n\r\nAurelia looks for a JavaScript file with the same name in the `src` directory for the main app config details. Let's create that now:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    \r\n    // client/src/quotes-app.js\r\n    \r\n    import config from './auth-config';\r\n    \r\n    export function configure(aurelia) {\r\n    \r\n      // Here we provide configuration for our application and can\r\n      // bring in the configuration settings we put within auth-config.js\r\n      // that will tell the aurelia-auth plugin the specific settings\r\n      // for our application's authentication context\r\n      aurelia.use\r\n        .standardConfiguration()\r\n        .developmentLogging()\r\n        .plugin('paulvanbladel/aurelia-auth', (baseConfig) => {\r\n             baseConfig.configure(config);\r\n        });\r\n    \r\n      aurelia.start().then(a => a.setRoot());\r\n    }\r\n  \r\n```\r\n\r\nYou can see here that we're importing a file called `auth-config.js` and that it's the export from this file that is passed to the `baseConfig` for the plugin. The `auth-config` file will let us override the aurelia-auth plugin's defaults with our own specifics. Let's create it now:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    // client/src/auth-config.js\r\n    \r\n    // Specific settings for our application's\r\n    // authentication context. These will override\r\n    // the default settings provided by aurelia-auth\r\n    \r\n    var config = {\r\n    \r\n      // Our Node API is being served from localhost:3001\r\n      baseUrl: 'http://localhost:3001',\r\n      // The API specifies that new users register at the POST /users enpoint\r\n      signupUrl: 'users',\r\n      // Logins happen at the POST /sessions/create endpoint\r\n      loginUrl: 'sessions/create',\r\n      // The API serves its tokens with a key of id_token which differs from\r\n      // aurelia-auth's standard\r\n      tokenName: 'id_token',\r\n      // Once logged in, we want to redirect the user to the welcome view\r\n      loginRedirect: '#/welcome',\r\n    \r\n    }\r\n    \r\n    export default config;\r\n  \r\n```\r\n\r\nThe API is accessible at `localhost:3001`, so we set this as our `baseUrl`. Next, we setup the proper endpoints that we'll need for signing users up and logging them in. We also need to override the `tokenName` with what our API serves, which in this case is `id_token`. Finally we say that we want to redirect the user to the `welcome` view once they login.\r\n\r\n### Application Routing Config\r\n\r\nWe'll now need to setup the application's routing configuration. Let's first setup the HTML that will require and load our nav bar and other views:\r\n\r\n\r\n\r\n  ```HTML\r\n    <!-- client/src/app.html -->\r\n    <template>\r\n      <require from=\"bootstrap/css/bootstrap.css\"></require>\r\n      <require from='./nav-bar'></require>\r\n    \r\n      <nav-bar router.bind=\"router\"></nav-bar>  \r\n    \r\n      <div class=\"container\">      \r\n        <router-view></router-view>\r\n      </div>\r\n      \r\n    </template>\r\n  \r\n```\r\n\r\nHere we are requiring the `nav-bar` and binding it to the router. We will serve our views from the `<router-view>` within our containing `<div>`.\r\n\r\n\r\n\r\n  ```JavaScript\r\n    // client/src/app.js\r\n    \r\n    import 'bootstrap';\r\n    \r\n    import {inject} from 'aurelia-framework';\r\n    import {Router} from 'aurelia-router';\r\n    import HttpClientConfig from 'paulvanbladel/aurelia-auth/app.httpClient.config';\r\n    import AppRouterConfig from 'router-config';\r\n    \r\n    // Using Aurelia's dependency injection, we inject Aurelia's router,\r\n    // the aurelia-auth http client config, and our own router config\r\n    // with the @inject decorator\r\n    @inject(Router, HttpClientConfig, AppRouterConfig)\r\n    \r\n    export class App {\r\n    \r\n      constructor(router, httpClientConfig, appRouterConfig) {\r\n        \r\n        this.router = router;\r\n    \r\n        // Client configuration provided by the aurelia-auth plugin\r\n        this.httpClientConfig = httpClientConfig;\r\n    \r\n        // The application's configuration, including the\r\n        // route definitions that we've declared in router-config.js\r\n        this.appRouterConfig = appRouterConfig;\r\n      };\r\n      \r\n      activate() {\r\n        \r\n        // Here we run the configuration when the app loads\r\n        this.httpClientConfig.configure();\r\n        this.appRouterConfig.configure();\r\n    \r\n      };\r\n    }\r\n  \r\n```\r\n\r\nThe HTTP configuration that `aurelia-auth` provides is what handles adding the JWT as a header if the user is authenticated. The `httpClientConfig` file has logic that checks for the existence of a token in `localstorage` and then adds an `Authorization` header with a value of `Bearer <token>` if one exists. The token will be sent for all HTTP requests to the API, but will obviously only be needed for protected resources.\r\n\r\n![](https://www.dropbox.com/s/1hzmzsla8l1vm7d/aurelia-auth-bearer.png?dl=1)\r\n\r\nWe can keep our routing logic within the main `app.js` file, like is done in a lot of Aurelia projects, but in our case we'll put this configuration in a separate file called `router-config.js` which we are injecting. Let's setup this routing configuration:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    // client/src/router-config.js\r\n    \r\n    import {AuthorizeStep} from 'paulvanbladel/aurelia-auth';\r\n    import {inject} from 'aurelia-framework';\r\n    import {Router} from 'aurelia-router';\r\n    \r\n    // Using Aurelia's dependency injection, we inject Router\r\n    // with the @inject decorator\r\n    @inject(Router)\r\n    \r\n    export default class {\r\n    \r\n      constructor(router) {\r\n        this.router = router;\r\n      };\r\n    \r\n      configure() {\r\n    \r\n        var appRouterConfig = function(config) {\r\n          \r\n          config.title = 'Random Quotes App';\r\n    \r\n          // Here we hook into the authorize extensibility point\r\n          // to add a route filter so that we can require authentication\r\n          // on certain routes\r\n          config.addPipelineStep('authorize', AuthorizeStep);\r\n    \r\n          // Here we describe the routes we want along with information about them\r\n          // such as which they are accessible at, which module they use, and whether\r\n          // they should be placed in the navigation bar\r\n          config.map([\r\n              { route: ['','welcome'], name: 'welcome', moduleId: './welcome', nav: true, title:'Welcome' },\r\n              { route: 'random-quote', name: 'random-quote', moduleId: './random-quote', nav: true, title:'Random Quote' },          \r\n              // The secret-quote route is the only one that the user needs to be logged in to see,  so we set auth: true\r\n              { route: 'secret-quote', name: 'secret-quote', moduleId: './secret-quote', nav: true, title:'Super Secret Quote', auth: true },\r\n              { route: 'signup', name: 'signup', moduleId: './signup', nav: false, title:'Signup', authRoute: true },\r\n              { route: 'login', name: 'login', moduleId: './login', nav: false, title:'Login', authRoute: true },\r\n              { route: 'logout', name: 'logout', moduleId: './logout', nav: false, title:'Logout', authRoute: true }\r\n            ]);\r\n          };\r\n    \r\n        // The router is configured with what we specify in the appRouterConfig\r\n        this.router.configure(appRouterConfig);\r\n    \r\n      };\r\n    }\r\n  \r\n```\r\n\r\nAurelia gives us the ability to customize the navigation pipeline with some extensibility points, including an `authorize` route filter. Using this filter means we can specify which routes we would like authentication to be required for. Since our `super-secret-quotes` route needs to remain top secret until the user is logged in, we put `auth: true` on it. We hook into this filter by calling `addPipelineStep`, passing in the `AuthorizeStep` that is provided by the `aurelia-auth` plugin.\r\n\r\nWith the configuration out of the way, let's get to coding the actual routes and their views! We'll need to have files that take care of each route in place before the app will work, so you can comment out the routes in `router-config.js` that aren't ready yet.\r\n\r\n## Setting Up Routes and Views\r\n\r\nTwo files are required for each route in Aurelia---a JavaScript file for the view model logic and an HTML file for the view itself. Views are enclosed within `<template>` tags but are otherwise made of normal HTML that can make use of Aurelia's databinding. \r\n\r\n### The Nav Bar and Welcome Route\r\n\r\nLet's start at the top and setup the navigation bar.\r\n\r\n\r\n\r\n  ```HTML\r\n    <!-- nav-bar.html -->\r\n    \r\n    ...\r\n        \r\n    <ul class=\"nav navbar-nav\">\r\n      <li repeat.for=\"row of router.navigation | authFilter: isAuthenticated\" class=\"${row.isActive ? 'active' : ''}\">\r\n        <a data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1.in\" href.bind=\"row.href\">${row.title}</a>\r\n      </li>\r\n    </ul>\r\n    \r\n    <ul if.bind=\"!isAuthenticated\" class=\"nav navbar-nav navbar-right\">\r\n      <li><a href=\"/#/login\">Login</a></li>\r\n      <li><a href=\"/#/signup\">Signup</a></li>\r\n    </ul>\r\n    \r\n    <ul if.bind=\"isAuthenticated\" class=\"nav navbar-nav navbar-right\">\r\n      <li><a href=\"/#/logout\">Logout</a></li>\r\n    </ul>\r\n    \r\n    ...      \r\n  \r\n```\r\nNotice here that we're running a filter on the repeated navigation items with `authFilter: isAuthenticated`. This allows us to hide any nav menu items that are to be protected if the user isn't authenticated and will be how we hide the `super-secret-quote` menu item when the user isn't logged in. We're also conditionally showing the Signup, Login and Logout links. See the [GitHub repo](https://github.com/chenkie/aurelia-jwt-auth/blob/master/client/src/nav-bar.html) for the rest of the markup.\r\n\r\n\r\n\r\n  ```JavaScript\r\n    // client/src/nav-bar.js\r\n    \r\n    import {bindable} from 'aurelia-framework';\r\n    import {inject} from 'aurelia-framework';\r\n    import {AuthService} from 'paulvanbladel/aurelia-auth';\r\n    \r\n    @inject(AuthService)\r\n    \r\n    export class NavBar {\r\n      // User isn't authenticated by default\r\n      _isAuthenticated = false;\r\n      @bindable router = null;\r\n    \r\n      constructor(auth) {\r\n        this.auth = auth;\r\n      };\r\n    \r\n      // We can check if the user is authenticated\r\n      // to conditionally hide or show nav bar items\r\n      get isAuthenticated() {\r\n        return this.auth.isAuthenticated();\r\n      };\r\n    }\r\n  \r\n```\r\n\r\nHere in the `nav-bar.js` file we have a method that checks whether the user is logged in which is what we hook into in the view.\r\n\r\nThe Aurelia seed comes with a welcome route, but in our case we can trim it down to be simpler.\r\n\r\n\r\n\r\n  ```HTML\r\n    <!-- client/src/welcome.html -->\r\n    \r\n    <template>\r\n      <section>\r\n        <h2>${heading}</h2>\r\n    \r\n        <div class=\"well\">\r\n          <h4>${info}</h4>\r\n        </div>\r\n        \r\n      </section>\r\n    </template>\r\n  \r\n```\r\nThe JavaScript becomes simpler as well.\r\n\r\n\r\n\r\n  ```JavaScript\r\n    // client/src/welcome.js\r\n    \r\n    export class Welcome {\r\n    \r\n      heading = 'Welcome to the Random Quotes App!';\r\n      info = 'You can get a random quote without logging in, but if you do login you can get a super secret quote!';\r\n    \r\n    }\r\n  \r\n```\r\n\r\n### Signup, Login and Logout\r\n\r\nNext, let's setup the `signup`, `login` and `logout` routes.\r\n\r\n### Signup\r\n\r\n\r\n\r\n  ```HTML\r\n    <!-- client/src/signup.html -->\r\n    \r\n    ...\r\n    \r\n    <form role=\"form\" submit.delegate=\"signup()\">\r\n      <div class=\"form-group\">\r\n        <label for=\"email\">Email</label>\r\n        <input type=\"text\" value.bind=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email\">\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"password\">Password</label>\r\n        <input type=\"password\" value.bind=\"password\" class=\"form-control\" id=\"password\" placeholder=\"Password\">\r\n      </div>\r\n      <button type=\"submit\" class=\"btn btn-default\">Signup</button>\r\n    </form>\r\n    <hr>\r\n    <div class=\"alert alert-danger\" if.bind=\"signupError\">${signupError}</div>\r\n    \r\n    ...\r\n  \r\n```\r\nIn this view we're providing two `<input>`s that take the user's email and password. We've also got an alert box at the bottom to show the user any errors that are returned. We'll need to setup the view models for these next.\r\n\r\n\r\n\r\n  ```JavaScript\r\n    // client/src/signup.js\r\n    \r\n    import {inject} from 'aurelia-framework';\r\n    import {AuthService} from 'paulvanbladel/aurelia-auth';\r\n    \r\n    // Using Aurelia's dependency injection, we inject the AuthService\r\n    // with the @inject decorator\r\n    @inject(AuthService)\r\n    \r\n    export class Signup {\r\n      \r\n      heading = 'Sign Up';\r\n    \r\n      // These view models will be given values\r\n      // from the signup form user input\r\n      email = '';\r\n      password = '';\r\n    \r\n      // Any signup errors will be reported by\r\n      // giving this view model a value in the\r\n      // catch block within the signup method\r\n      signupError = '';\r\n    \r\n      constructor(auth) {\r\n        this.auth = auth;\r\n      };\r\n    \r\n      signup() {\r\n    \r\n        // Object to hold the view model values passed into the signup method\r\n        var userInfo = { email: this.email, password: this.password }\r\n    \r\n        return this.auth.signup(userInfo)\r\n        .then((response) => {\r\n          console.log(\"Signed Up!\");\r\n        })\r\n        .catch(error => {\r\n          this.signupError = error.response;\r\n        });\r\n        \r\n      };\r\n    }\r\n  \r\n```\r\nThe `signup()` method uses `aurelia-auth` to send a POST request to the API which either creates a new user or returns an error if there was a problem.\r\n\r\n### Login\r\n\r\nThe `login` route is pretty similar. You'll just need to swap out `submit.delegate=\"signup()\"` for`submit.delegate=\"login()\"` and adjust the other [pieces of markup](https://github.com/chenkie/aurelia-jwt-auth/blob/master/client/src/login.html) appropriately\r\n\r\nThe JavaScript for `login` looks similar as well, but this time we are sending the POST request to the `sessions/create` endpoint:\r\n\r\n\r\n\r\n  ```JavaScript\r\n    // client/src/login.js\r\n    \r\n    ...\r\n    \r\n      login() {\r\n        return this.auth.login(this.email, this.password)\r\n        .then(response => {\r\n          console.log(\"Login response: \" + response);\r\n        })\r\n        .catch(error => {\r\n          this.loginError = error.response;\r\n        });\r\n      };\r\n    \r\n    ...\r\n  \r\n```\r\n\r\n### Logout\r\n\r\nThe `logout` route essentially follows the same pattern using `authService.logout()` to remove the user's JWT from `localstorage`. See [the repo](https://github.com/chenkie/aurelia-jwt-auth/blob/master/client/src/logout.js) for further detail.\r\n\r\nWith all this in place, we should now be able to signup, login and logout users. Test it out to make sure everything is running as expected. If everything is working properly, when the user logs in there will be a JWT set in `localstorage`.\r\n\r\n![](https://www.dropbox.com/s/t6f3rzevv1kmd3d/aurelia-localstorage-token.png?dl=1)\r\n\r\n## The Random Quote and Super-Secret Quote Routes\r\n\r\nWith signup, login and logout in place we now need to create the files for our quote routes. Let's first take care of the `random-quote` route.\r\n\r\n\r\n\r\n  ```HTML\r\n    <!-- client/src/random-quote.js -->\r\n    \r\n    <template>\r\n      <section class=\"col-sm-12\">\r\n          <h2>${heading}</h2>\r\n          <div class=\"row\">\r\n            <div class=\"well\">\r\n              <h4>${randomQuote}</h4>\r\n            </div>\r\n          </div>\r\n      </section>\r\n    </template>\r\n  \r\n```\r\n\r\nThis view simply displays the heading and the text of the quote that we retrieve.\r\n\r\n\r\n\r\n  ```JavaScript\r\n    // client/src/random-quote.js\r\n    \r\n    import {inject} from 'aurelia-framework';\r\n    import {HttpClient} from 'aurelia-http-client';\r\n    \r\n    // Using Aurelia's dependency injection, we inject HttpClient\r\n    // with the @inject decorator to make HTTP requests\r\n    @inject(HttpClient)\r\n    \r\n    export class RandomQuote {\r\n    \r\n      heading = 'Random Quote';\r\n    \r\n      // View model that will be populated with the \r\n      // the random quote retrieved from the API and\r\n      // displayed in the view\r\n      randomQuote = '';\r\n    \r\n      constructor(http) {\r\n        this.http = http;\r\n      };\r\n    \r\n      activate() {\r\n        return this.http.get('http://localhost:3001/api/random-quote')\r\n        .then(response => {\r\n          this.randomQuote = response.content;\r\n        }).catch(error => {\r\n          console.log('Error getting quote');\r\n        });\r\n      };\r\n    }\r\n  \r\n```\r\n\r\nWe want to fetch the quote when the route is hit so within the `activate()` method we are making a GET request to our `random-quote` endpoint which is located at `localhost:3001/api/random-quote`. If we get a good response, we set the quote text onto `randomQuote` so that it can be accessed in the view.\r\n\r\nThe `super-secret-quote` route is pretty much the same, except that we make our requests to a different endpoint. For the view in `secret-quote.html`, make sure to change `${randomQuote}` to `${secretQuote}`\r\n\r\n\r\n\r\n  ```JavaScript\r\n    // client/src/secret-quote.js\r\n    \r\n    ...\r\n    \r\n    activate() {\r\n      return this.http.get('http://localhost:3001/api/protected/random-quote')\r\n      .then(response => {\r\n        this.secretQuote = response.content;\r\n      }).catch(error => {\r\n        console.log('Error getting quote');\r\n      });\r\n    }\r\n    \r\n    ...\r\n  \r\n```\r\n\r\nAs you can see, the only real difference here is that the GET request we're making is going to the `protected/random-quote` endpoint. If there is no valid JWT in localstorage, we won't be able to get to this route. If somehow we got to it, the request will fail because no JWT will be sent to the server.\r\n\r\n![](https://www.dropbox.com/s/r73f7iuf0srqfz8/aurelia-super-secret-quote.png?dl=1)\r\n\r\n## Wrapping Up\r\n\r\nProtecting routes that we want to limit to logged-in users is actually quite simple with the `aurelia-auth` plugin because we can set the app up such that if a user isn't logged in they can't see or reach protected routes. If, for whatever reason, someone was able to get to a route they shouldn't be at and they don't have a valid JWT, any HTTP requests they make will be denied by the server. Properly authenticated users will have a valid JWT in `localstorage` which will be sent along as a header with all the requests they make which will give them access to protected resources.\r\n\r\nAurelia is a great next-generation JavaScript framework with a growing user base. As we saw in this tutorial, we can easily get users signed up and authenticated using the `aurelia-auth` plugin."}