{"name":"Aurelia 2018 Q2 Report","description":"The second quarter of 2018 was an amazing time for the Aurelia team with some major progress towards key goals in our 2018 roadmap [blog/2018/01/03/aurelia-2018-roadmap/]. Read on to hear about what we've accomplished and what's in store next.","author":{"name":"Rob Eisenberg","url":"rob@bluespire.com"},"links":{"static":"blog/2018/08/05/aurelia-2018-q2-report","html":"blog/2018/08/05/aurelia-2018-q2-report/index.html","fragment":"blog/2018/08/05/aurelia-2018-q2-report/index-fragment.html","self":"blog/2018/08/05/aurelia-2018-q2-report/index.json"},"content":"\nThe second quarter of 2018 was an amazing time for the Aurelia team with some major progress towards key goals in [our 2018 roadmap](blog/2018/01/03/aurelia-2018-roadmap/). Read on to hear about what we've accomplished and what's in store next.\n\n## Platform Features and Capabilities\n\nWe've made some major improvements in our core platform capabilities during Q2, including features that greatly improve Webpack scenarios, treeshaking, and modern bundler integrations. Our core plugins for state, i18n and UX continue with strong forward movement as well.\n\n### Templating and Binding\n\nEarly in the quarter [we announced major performance improvements](blog/2018/05/10/aurelia-release-notes-early-may-2018) in our binding engine's expression parser. In some cases a 10x speed improvement was measured. We've also added new binding expression syntax for template literals and tagged templates, new support for the `instanceof`, `in`, `typeof`, and `void` operators, and non-ASCII character variable name support. You can read more details about the new binding features [here](blog/2018/06/24/aurelia-release-notes-june-2018).\n\nSome of the most significant new capabilities of the quarter have been through work on the templating engine. In particular, usage of string module names is no longer required to register custom elements, custom attributes, or any other templating resources. Now, you can simply [provide the class itself to the resource API](blog/2018/06/24/aurelia-release-notes-june-2018). This provides better compile-time checking and enables simplified tree-shaking for Webpack users.\n\n#### What's Next\n\nDuring the next few months we're planning to continue the templating work by adding similar capabilities to the Aurelia router and dialog plugins. This will enable registering route patterns and displaying dialogs with classes, rather than module strings.\n\n> Info\n> Please note that we're not removing support for string-based module registration. Rather, we're adding additional support for direct class registration.\n\nWith these pieces in place, we'll then have a simpler mechanism for integrating with online tooling like [CodeSandbox](https://codesandbox.io/) and [StackBlitz](https://stackblitz.com/).\n\n### Aurelia Store\n\nOne of the biggest highlights of Q2 was that [we made our first official release of the Aurelia Store plugin](blog/2018/06/17/aurelia-store-released/), complete with [full documentation](docs/plugins/store)!\n\nOne of the main changes during this quarter was to switch Aurelia Store to RxJS 6. If you haven't seen it yet, please take a look at the [following upgrade instructions](https://github.com/ReactiveX/rxjs/blob/master/MIGRATION.md).\n\nBesides the update to RxJS 6, we've improved the `connectTo` decorator, which with the help of @jmzargorski, now has support for [multiple selectors](docs/plugins/store#subscribing-with-the-connectto-decorator). This opens up a whole new workflow in working with multiple modules and making parts of your app even more self-contained in regards to the Store. [Take a look at the following discussion](https://github.com/aurelia/store/issues/48) about how larger apps may be structured.\n\nFrom the very early days of Aurelia Sore, there has been fantastic support from the community to help improve both the library and the documentation. We're grateful for how they've contributed to building this plugin and how they've tirelessly worked to make it one of the best state management tools available today.\n\n#### What's Next\n\nThe Store plugin will continue to receive more samples showing-off its unique capabilities as well as more improvements to the docs. A major technical focus is to further reduce boilerplate code through improved decorators and optimized APIs. Finally, we hope to make the official 1.0 version release in the next few weeks.\n\n### Aurelia I18N\n\nThe Aurelia I18N library has seen several updates to the docs, plus improvements to the `t-attribute`, which now enables developers to define multiple target attributes for a single translation key. Here's an example:\n\n```HTML Multi-target Translation Attribute\nBefore, only this was valid:\n<span t=\"[html]title;[placeholder]placeholderValue\">Title</span>\n\nNow this is possible as well:\n<span t=\"[html]title;[placeholder, aria-placeholder]placeholderValue\">Title</span>\n```\n\nAdditionally, developers are now able to turn off translations for missing keys, which helps to identify undefined keys.\n\n#### What's Next\n\nThe I18N plugin's next major goal is a full TypeScript port and merge into [the Aurelia vNext monorepo](https://github.com/aurelia/aurelia) (info on vNext below). This will provide the opportunity to not only improve library usage for TypeScript users but also cleanup lots of work around setup and testability, making sure that the plugin initialization is more approachable and robust.\n\n### Aurelia UX\n\nIf you stay on top of design system news, you may have noticed that the Material Design standards were recently updated. In Q2 we updated Aurelia UX to match these standards. Additionally, we've been doing work to update UX to take advantage of many of the new templating features we added, as described above. This will improve the developer's ability to tree-shake Aurelia UX as well as give us some other, more streamlined options for shipping the components.\n\n#### What's Next\n\nIn the coming months we'll continue to align with design standards and further update UX to take advantage of new Aurelia features.\n\n## Aurelia vNext\n\nWe've made HUGE progress in our experiments around the next major version of Aurelia. We're very excited about how that's turning out. As we sat down to write our quarterly report, we realized there was so much to say about this topic that it would be better to put it in a dedicated post. We invite you to [hop on over to the Aurelia vNext post](blog/2018/08/05/aurelia-vnext/) and read all about it there.\n\n## Training, Support and More...\n\nOver the years we've had many requests for official Aurelia Training and Support. To address those needs, we've put together several options, which you can read about on the new [learn](learn) and [support](support) pages of the Aurelia site. With this, we're pleased to announce preview access to Aurelia enterprise support. Basic information is available on [our support page](support) and you can sign up to be contacted about support [here](contact).\n\n## Wrapping Up\n\nThe second quarter of 2018 has been an exciting time! In just a few short months we've made significant enhancements to templating, binding, performance and major plugins like Aurelia store. Additionally, we've made a very strong start on the next major version of Aurelia (you read the vNext post right?), which we're beyond excited about.\n\nIt's a great time to be a font-end developer working with Aurelia!"}