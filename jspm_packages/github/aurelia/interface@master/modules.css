html {
  box-sizing: border-box; }

*, *::after, *::before {
  box-sizing: inherit; }

ai-input {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex; }

ai-input {
  -webkit-box-direction: normal;
  -webkit-box-orient: vertical;
  -webkit-flex-direction: column;
  -moz-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column; }

ai-input {
  -webkit-box-flex: 1;
  -webkit-flex: 1 0 auto;
  -moz-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
  position: relative;
  line-height: 20px;
  padding-bottom: 4px;
  margin-bottom: 4px;
  margin-top: 8px; }
  ai-input textarea,
  ai-input input {
    border: none;
    outline: none;
    resize: none;
    background-color: transparent;
    background: transparent;
    overflow: hidden;
    line-height: 20px; }
  ai-input textarea {
    min-height: 20px;
    height: 40px;
    padding: 0;
    margin: 0; }
  ai-input input-border {
    position: absolute;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.2);
    min-width: 100%;
    min-height: 1px; }
    ai-input input-border:after {
      -webkit-transition-duration: 0.2s;
      transition-duration: 0.2s;
      -webkit-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
      transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
      -webkit-transform: scaleX(0);
      -ms-transform: scaleX(0);
      transform: scaleX(0);
      content: " ";
      display: block;
      height: 1px;
      width: 100%;
      background-color: #FF4081; }
  ai-input label[floating-label] {
    -webkit-transition-duration: 0.2s;
    transition-duration: 0.2s;
    -webkit-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    position: absolute;
    top: 0; }
  ai-input.has-value label[floating-label],
  ai-input textarea:focus ~ label[floating-label],
  ai-input input:focus ~ label[floating-label] {
    -webkit-transform: translate3d(0, -28px, 0);
    -ms-transform: translate3d(0, -28px, 0);
    transform: translate3d(0, -28px, 0); }
  ai-input textarea:focus ~ input-border:after,
  ai-input input:focus ~ input-border:after {
    -webkit-transform: scaleX(1);
    -ms-transform: scaleX(1);
    transform: scaleX(1); }

@-webkit-keyframes ai-menu-option-enter {
  0% {
    height: 0; }
  100% {
    height: 36px; } }

@keyframes ai-menu-option-enter {
  0% {
    height: 0; }
  100% {
    height: 36px; } }

@-webkit-keyframes ai-menu-enter {
  0% {
    width: 0; }
  100% {
    width: 100%; } }

@keyframes ai-menu-enter {
  0% {
    width: 0; }
  100% {
    width: 100%; } }

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9ib3VyYm9uLW5lYXQvYXBwL2Fzc2V0cy9zdHlsZXNoZWV0cy9ncmlkL19ib3gtc2l6aW5nLnNjc3MiLCJmcmFtZXdvcmsuc2NzcyIsImJhc2UvX3V0aWwuc2NzcyIsIm1vZHVsZXMuY3NzIiwiYmFzZS9fYnJlYWtwb2ludHMuc2NzcyIsImJhc2UvX3NldHRpbmdzLnNjc3MiLCJiYXNlL21peGluL19mbGV4Ym94LnNjc3MiLCJ1aS9lbGVtZW50cy9faW5wdXQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHRTtFQUNFLHVCQUF1QixFQUN4Qjs7QUFFRDtFQUlJLG9CQUFvQixFQUNyQjs7QUNMTDtFQ3NCQSxxQkFBQTtFQ3JCRSxzQkFBc0I7RUFDdEIsbUJBQW1CO0VBQ25CLHFCQUFxQjtFQUNyQixjRHNCQyxFQUFBOztBQ3BCSDtFQUNFLDhCQUE4QjtFQUM5Qiw2QkFBNkI7RUFDN0IsK0JBQStCO0VBQy9CLDRCQUE0QjtFQUM1QiwyQkFBMkI7RUFDM0IsdUJBQXVCLEVBQUU7O0FBRTNCO0VBQ0Usb0JBQW9CO0VBQ3BCLHVCQUF1QjtFQUV2QixvQkFBb0I7RUFDcEIsbUJBQW1CO0VBQ25CLGVBQWU7RUFDZixtQkFBbUI7RUFDbkIsa0JBQWtCO0VBQ2xCLG9CQUFvQjtFQUNwQixtQkFBbUI7RUFDbkIsZ0JBQWdCLEVBQUU7RUFDbEI7O0lBRUUsYUFBYTtJQUNiLGNBQWM7SUFDZCxhQUFhO0lBQ2IsOEJBQThCO0lBQzlCLHdCQUF3QjtJQUN4QixpQkFBaUI7SUNUbEIsa0JBQUEsRUFBQTtFSGhCSDtJSUxBLGlCQUFBO0lBd0VBLGFBQUE7SUFrQkEsV0FBQTtJQVdBLFVBQUEsRUFBQTtFRmhFRTtJQUNFLG1CRWlFUTtJQVVaLFVBQUE7SUZ6RUkscUNBQXFDO0lFMkV0QyxnQkFBQTtJSjNHSCxnQkFBZSxFQUFBO0lLRGY7TUhxQ00sa0NBQWtDO01BRWxDLDBCQUEwQjtNQUMxQixpRUFBaUU7TUlrRnZFLHlERDVHUztNQVBMLDZCQUFxQjtNQUVyQix5QkFBbUI7TUFFbkIscUJBRzJCO01Ia0N6QixhQUFhO01HL0JuQixlQUFBO01IaUNNLFlBQVk7TUFDWixZQUFZO01BQ1osMEJBQTBCLEVBQUU7RUFDaEM7SUcvQkMsa0NBQUE7SUhrQ0MsMEJBQTBCO0lBQzFCLGlFQUFpRTtJQUVqRSx5REFBeUQ7SUFDekQsMEJBQTBCO0lBQzFCLHVCQUF1QjtJQUN2QixzQkFBc0I7SUFDdEIsa0JBQWtCO0lBQ2xCLG1CQUFtQjtJQUNuQixPQUFPLEVBQUU7RUFDWDs7O0lBR0UsNENBQTRDO0lHbkI3Qyx3Q0FBQTtJQU1LLG9DQUE4QixFQUFBO0VBQzlCOztJQVNKLDZCQVE0QjtJQU41Qix5QkFPSDtJQWtCRCxxQkFBQSxFQUFBOztBSFhBO0VBQ0U7SUFDRSxVQUFVLEVBQUU7RUFDZDtJQUNFLGFBQWEsRUFBRSxFQUFFOztBQUpyQjtFQUNFO0lBQ0UsVUFBVSxFQUFFO0VBQ2Q7SUFDRSxhQUFhLEVBQUUsRUFBRTs7QUFFckI7RUFDRTtJQUNFLFNBQVMsRUFBRTtFQUNiO0lHMEJGLFlBQUEsRUFBQSxFQUFBOztBSDdCQTtFQUNFO0lBQ0UsU0FBUyxFQUFFO0VBQ2I7SUcwQkYsWUFBQSxFQUFBLEVBQUEiLCJmaWxlIjoibW9kdWxlcy5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJAY2hhcnNldCBcIlVURi04XCI7XG5cbkBpZiAkYm9yZGVyLWJveC1zaXppbmcgPT0gdHJ1ZSB7XG4gIGh0bWwgeyAvLyBodHRwOi8vYml0Lmx5LzFxazJ0VlJcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB9XG5cbiAgKiB7XG4gICAgJixcbiAgICAmOjphZnRlcixcbiAgICAmOjpiZWZvcmUge1xuICAgICAgYm94LXNpemluZzogaW5oZXJpdDtcbiAgICB9XG4gIH1cbn1cbiIsIlxuQGltcG9ydCAnYm91cmJvbic7XG4vLyBAaW1wb3J0ICdiYXNlL19ncmlkLXNldHRpbmdzJztcbkBpbXBvcnQgJ25lYXQnO1xuLy8gQGltcG9ydCAnYmFzZS9fYmFzZSc7XG5AaW1wb3J0ICdfc2Fzc2Rhc2gnO1xuXG4vKiBCQVNFICovXG5AaW1wb3J0ICdiYXNlL3V0aWwnO1xuQGltcG9ydCAnYmFzZS9jb2xvcnMnO1xuQGltcG9ydCAnYmFzZS9kZWZhdWx0cyc7XG5AaW1wb3J0ICdiYXNlL3N1cHBvcnQnO1xuQGltcG9ydCAnYmFzZS9sb2FkZXInO1xuQGltcG9ydCAnYmFzZS9icmVha3BvaW50cyc7XG5cbi8qIFNFVFRJTkdTICovXG5AaW1wb3J0ICdiYXNlL3NldHRpbmdzJztcblxuLyogRnJhbWV3b3JrICovXG5AaW1wb3J0ICdiYXNlL21peGluL3RvdWNoLXV0aWwnO1xuQGltcG9ydCAnYmFzZS9taXhpbi9haWNvbnMnO1xuQGltcG9ydCAnYmFzZS9taXhpbi9hbnktdGV4dCc7XG5AaW1wb3J0ICdiYXNlL21peGluL2FuaW1hdGlvbic7XG5AaW1wb3J0ICdiYXNlL21peGluL2JsdXInO1xuQGltcG9ydCAnYmFzZS9taXhpbi9ib3JkZXItbGluZSc7XG5AaW1wb3J0ICdiYXNlL21peGluL2N1c3RvbS1lbGVtZW50JztcbkBpbXBvcnQgJ2Jhc2UvbWl4aW4vZmxleGJveCc7XG5AaW1wb3J0ICdiYXNlL21peGluL2xhYmVsJztcbkBpbXBvcnQgJ2Jhc2UvbWl4aW4vcGxhY2Vob2xkZXInO1xuQGltcG9ydCAnYmFzZS9taXhpbi90cmFuc2Zvcm0nO1xuXG4vKiBVSSAqL1xuQGltcG9ydCAndWkvc2V0dGluZ3MnO1xuQGltcG9ydCAndWkvZnVuY3Rpb24nO1xuQGltcG9ydCAndWkvY29yZS90aGVtZSc7XG5AaW1wb3J0ICd1aS9jb3JlL3R5cG9ncmFwaHknO1xuXG5cbiRBSV9GUkFNRVdPUktfRVhQT1JUOiB0cnVlO1xuIiwiQGZ1bmN0aW9uIHBpeGVsKCR2YWx1ZSkge1xuICAgIEByZXR1cm4gdW5xdW90ZSgkdmFsdWUgKyBweCk7XG59XG5cbi8vIGEgbWFwLXNldCBmdW5jdGlvbiAobm90IGluY2x1ZGVkIHdpdGggU2FzcylcbkBmdW5jdGlvbiBtYXAtc2V0KCRtYXAsICRrZXksICR2YWx1ZSkge1xuICAkbmV3OiAoJGtleTogJHZhbHVlKTtcbiAgQHJldHVybiBtYXAtbWVyZ2UoJG1hcCwgJG5ldyk7XG59XG5cblxuXG5AZnVuY3Rpb24gZXhpc3RzKCRtYXAsICRrZXlzLi4uKSB7XG4gICAgJHZhbHVlOiAkbWFwO1xuICAgICRsYXN0OiBudWxsO1xuICAgIEBpZiBfaXMtbGlzdCgka2V5cykge1xuICAgICAgICAkbGFzdDogX2xhc3QoJGtleXMpO1xuICAgICAgICAka2V5czogX2Ryb3AoJGtleXMpO1xuICAgIH1cbiAgICBAZWFjaCAka2V5IGluICRrZXlzIHtcbiAgICAgICAgJHZhbHVlOiBtYXAtZmV0Y2goJHZhbHVlLCAka2V5KTtcbiAgICB9XG4gICAgQGlmICRsYXN0ICE9IG51bGwge1xuICAgICAgICBAcmV0dXJuIG1hcC1oYXMta2V5KCR2YWx1ZSwgJGxhc3QpO1xuICAgIH1cblxuICAgIEByZXR1cm4gbm90IG5vdCAkdmFsdWU7XG59XG5cbi8qKlxuICogbWFwLWZldGNoXG4gKiBAcGFyYW0gIHtNYXB9ICRtYXAgICAgIE1hcCB0byBpdGVyYXRlIHRocm91Z2hcbiAqIEBwYXJhbSAge1N0cmluZ3N9ICRrZXlzLi4uIExpc3Qgb2Ygc3RyaW5ncyB0byBmZXRjaCBmcm9tXG4gKi9cbkBmdW5jdGlvbiBtYXAtZmV0Y2goJG1hcCwgJGtleXMuLi4pIHtcbiAgJHZhbHVlOiAkbWFwO1xuICBAZWFjaCAka2V5IGluICRrZXlzIHtcbiAgICAkdmFsdWU6IF9nZXQoJHZhbHVlLCAka2V5KTtcbiAgfVxuICBAcmV0dXJuICR2YWx1ZTtcbn1cblxuQGZ1bmN0aW9uIGlzLW1hcCgkbWFwKSB7XG4gICAgQHJldHVybiB0eXBlX29mKCRtYXApID09IG1hcDtcbn1cblxuQGZ1bmN0aW9uIGlzLWxpc3QoJGxpc3QpIHtcbiAgQHJldHVybiB0eXBlX29mKCRsaXN0KSA9PSBsaXN0O1xufVxuXG5cbkBtaXhpbiBfbWFwLXJ1bGVzKCRwcm9wcykge1xuICBAaWYgaXMtbWFwKCRwcm9wcykge1xuICAgIEBpbmNsdWRlIF9kZWNsYXJlKCRwcm9wcyk7XG4gIH1cbn1cblxuIiwiaHRtbCB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH1cblxuKiwgKjo6YWZ0ZXIsICo6OmJlZm9yZSB7XG4gIGJveC1zaXppbmc6IGluaGVyaXQ7IH1cblxuYWktaW5wdXQge1xuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgZGlzcGxheTogLXdlYmtpdC1mbGV4O1xuICBkaXNwbGF5OiAtbW96LWZsZXg7XG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICBkaXNwbGF5OiBmbGV4OyB9XG5cbmFpLWlucHV0IHtcbiAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiBub3JtYWw7XG4gIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XG4gIC13ZWJraXQtZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgLW1vei1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAtbXMtZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsgfVxuXG5haS1pbnB1dCB7XG4gIC13ZWJraXQtYm94LWZsZXg6IDE7XG4gIC13ZWJraXQtZmxleDogMSAwIGF1dG87XG4gIC1tb3otYm94LWZsZXg6IDE7XG4gIC1tb3otZmxleDogMSAwIGF1dG87XG4gIC1tcy1mbGV4OiAxIDAgYXV0bztcbiAgZmxleDogMSAwIGF1dG87XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gIHBhZGRpbmctYm90dG9tOiA0cHg7XG4gIG1hcmdpbi1ib3R0b206IDRweDtcbiAgbWFyZ2luLXRvcDogOHB4OyB9XG4gIGFpLWlucHV0IHRleHRhcmVhLFxuICBhaS1pbnB1dCBpbnB1dCB7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgcmVzaXplOiBub25lO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7IH1cbiAgYWktaW5wdXQgdGV4dGFyZWEge1xuICAgIG1pbi1oZWlnaHQ6IDIwcHg7XG4gICAgaGVpZ2h0OiA0MHB4O1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwOyB9XG4gIGFpLWlucHV0IGlucHV0LWJvcmRlciB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogMDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMik7XG4gICAgbWluLXdpZHRoOiAxMDAlO1xuICAgIG1pbi1oZWlnaHQ6IDFweDsgfVxuICAgIGFpLWlucHV0IGlucHV0LWJvcmRlcjphZnRlciB7XG4gICAgICAtd2Via2l0LXRyYW5zaXRpb24tZHVyYXRpb246IDAuMnM7XG4gICAgICAtbW96LXRyYW5zaXRpb24tZHVyYXRpb246IDAuMnM7XG4gICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjJzO1xuICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTtcbiAgICAgIC1tb3otdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7XG4gICAgICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTtcbiAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZVgoMCk7XG4gICAgICAtbW96LXRyYW5zZm9ybTogc2NhbGVYKDApO1xuICAgICAgLW1zLXRyYW5zZm9ybTogc2NhbGVYKDApO1xuICAgICAgLW8tdHJhbnNmb3JtOiBzY2FsZVgoMCk7XG4gICAgICB0cmFuc2Zvcm06IHNjYWxlWCgwKTtcbiAgICAgIGNvbnRlbnQ6IFwiIFwiO1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBoZWlnaHQ6IDFweDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGNDA4MTsgfVxuICBhaS1pbnB1dCBsYWJlbFtmbG9hdGluZy1sYWJlbF0ge1xuICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4ycztcbiAgICAtbW96LXRyYW5zaXRpb24tZHVyYXRpb246IDAuMnM7XG4gICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4ycztcbiAgICAtd2Via2l0LXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO1xuICAgIC1tb3otdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7XG4gICAgdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7XG4gICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcbiAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xuICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwOyB9XG4gIGFpLWlucHV0Lmhhcy12YWx1ZSBsYWJlbFtmbG9hdGluZy1sYWJlbF0sXG4gIGFpLWlucHV0IHRleHRhcmVhOmZvY3VzIH4gbGFiZWxbZmxvYXRpbmctbGFiZWxdLFxuICBhaS1pbnB1dCBpbnB1dDpmb2N1cyB+IGxhYmVsW2Zsb2F0aW5nLWxhYmVsXSB7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0yOHB4LCAwKTtcbiAgICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTI4cHgsIDApO1xuICAgIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0yOHB4LCAwKTtcbiAgICAtby10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0yOHB4LCAwKTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0yOHB4LCAwKTsgfVxuICBhaS1pbnB1dCB0ZXh0YXJlYTpmb2N1cyB+IGlucHV0LWJvcmRlcjphZnRlcixcbiAgYWktaW5wdXQgaW5wdXQ6Zm9jdXMgfiBpbnB1dC1ib3JkZXI6YWZ0ZXIge1xuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZVgoMSk7XG4gICAgLW1vei10cmFuc2Zvcm06IHNjYWxlWCgxKTtcbiAgICAtbXMtdHJhbnNmb3JtOiBzY2FsZVgoMSk7XG4gICAgLW8tdHJhbnNmb3JtOiBzY2FsZVgoMSk7XG4gICAgdHJhbnNmb3JtOiBzY2FsZVgoMSk7IH1cblxuQGtleWZyYW1lcyBhaS1tZW51LW9wdGlvbi1lbnRlciB7XG4gIDAlIHtcbiAgICBoZWlnaHQ6IDA7IH1cbiAgMTAwJSB7XG4gICAgaGVpZ2h0OiAzNnB4OyB9IH1cblxuQGtleWZyYW1lcyBhaS1tZW51LWVudGVyIHtcbiAgMCUge1xuICAgIHdpZHRoOiAwOyB9XG4gIDEwMCUge1xuICAgIHdpZHRoOiAxMDAlOyB9IH1cbiIsIlxuXG4vKipcbiAqIEBNaXhpbigpOiBicmVha3BvaW50XG4gKiBASGVscGVyLU1peGlucygpOiBtZWRpYS0oeHN8c218bWR8bGd8eGwpXG4gKlxuICogQGRlc2NyaXB0aW9uIFdyYXAgeW91ciBzdHlsZXMgaW4gYSBtZWRpYSBxdWVyeSByYW5naW5nIGZyb20gKHhzIHRvIGxnKVxuICogQHBhcmFtICB7U3RyaW5nfSBbJGJyZWFrcG9pbnRdICAoeHN8c218bWR8bGd8eGwpXG4gKiBAdmFsdWUgeHMgPSAwXG4gKiBAdmFsdWUgc20gPSAzNGVtXG4gKiBAdmFsdWUgbWQgPSA0OGVtXG4gKiBAdmFsdWUgbGcgPSA2MmVtXG4gKiBAdmFsdWUgeGwgPSA3NWVtXG4gKlxuICogQHVzYWdlXG4gKlxuICogYGBgIHNjc3NcbiAqXG4gKiAgQGluY2x1ZGUgYnJlYWtwb2ludCh4cykge1xuICogICAgICAuc2VsZWN0b3Ige1xuICogICAgICAgIHBhZGRpbmc6IDE2cHhcbiAqICAgICAgfVxuICogIH1cbiAqXG4gKiAgQGluY2x1ZGUgYnJlYWtwb2ludChtZCkge1xuICogICAgICAuc2VsZWN0b3Ige1xuICogICAgICAgIHBhZGRpbmc6IDI0cHhcbiAqICAgICAgfVxuICogIH1cbiAqXG4gKiBgYGBcbiAqL1xuXG5AbWl4aW4gYnJlYWtwb2ludCgkYnJlYWtwb2ludCkge1xuICBAbWVkaWEgKG1pbi13aWR0aDogbWFwLWdldCgkYnJlYWtwb2ludHMsICRicmVha3BvaW50KSkge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cbkBtaXhpbiBtYXgtYnJlYWtwb2ludCgkYnJlYWtwb2ludCkge1xuICBAbWVkaWEgKG1heC13aWR0aDogbWFwLWdldCgkYnJlYWtwb2ludHMsICRicmVha3BvaW50KSkge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5AbWl4aW4gbWVkaWEteHMgeyBAaW5jbHVkZSBicmVha3BvaW50KHhzKSB7QGNvbnRlbnQ7fSB9XG5AbWl4aW4gbWVkaWEtc20geyBAaW5jbHVkZSBicmVha3BvaW50KHNtKSB7QGNvbnRlbnQ7fSB9XG5AbWl4aW4gbWVkaWEtbWQgeyBAaW5jbHVkZSBicmVha3BvaW50KG1kKSB7QGNvbnRlbnQ7fSB9XG5AbWl4aW4gbWVkaWEtbGcgeyBAaW5jbHVkZSBicmVha3BvaW50KGxnKSB7QGNvbnRlbnQ7fSB9XG5AbWl4aW4gbWVkaWEteGwgeyBAaW5jbHVkZSBicmVha3BvaW50KHhsKSB7QGNvbnRlbnQ7fSB9XG5cbkBtaXhpbiBtYXgtbWVkaWEteHMgeyBAaW5jbHVkZSBtYXgtYnJlYWtwb2ludCh4cykge0Bjb250ZW50O30gfVxuQG1peGluIG1heC1tZWRpYS1zbSB7IEBpbmNsdWRlIG1heC1icmVha3BvaW50KHNtKSB7QGNvbnRlbnQ7fSB9XG5AbWl4aW4gbWF4LW1lZGlhLW1kIHsgQGluY2x1ZGUgbWF4LWJyZWFrcG9pbnQobWQpIHtAY29udGVudDt9IH1cbkBtaXhpbiBtYXgtbWVkaWEtbGcgeyBAaW5jbHVkZSBtYXgtYnJlYWtwb2ludChsZykge0Bjb250ZW50O30gfVxuXG5cblxuQG1peGluIHRvLXNjcmVlbigkdG8pIHtcbiAgJGJyZWFrcG9pbnQ6IG1hcC1nZXQoJGdyaWQtYnJlYWtwb2ludHMsICR0byk7XG4gIEBpZiBub3QgJGJyZWFrcG9pbnQge1xuICAgIEB3YXJuIFwiQnJlYWtwb2ludCBbI3skYnJlYWtwb2ludH1dIGRvZXMgbm90IEV4aXN0XCI7XG4gIH0gQGVsc2Uge1xuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAkYnJlYWtwb2ludCkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBmcm9tLXNjcmVlbigkZnJvbSkge1xuICAkYnJlYWtwb2ludDogbWFwLWdldCgkZ3JpZC1icmVha3BvaW50cywgJGZyb20pO1xuICBAaWYgbm90ICRicmVha3BvaW50IHtcbiAgICBAd2FybiBcIkJyZWFrcG9pbnQgWyN7JGJyZWFrcG9pbnR9XSBkb2VzIG5vdCBFeGlzdFwiO1xuICB9IEBlbHNlIHtcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogJGJyZWFrcG9pbnQpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxufVxuQG1peGluIGZyb20tdG8tc2NyZWVuKCRmcm9tLCAkdG8pIHtcbiAgJGJyZWFrcG9pbnQtbWluOiBtYXAtZ2V0KCRncmlkLWJyZWFrcG9pbnRzLCAkZnJvbSk7XG4gICRicmVha3BvaW50LW1heDogbWFwLWdldCgkZ3JpZC1icmVha3BvaW50cywgJHRvKTtcbiAgQGlmIG5vdCAkYnJlYWtwb2ludC1taW4ge1xuICAgIEB3YXJuIFwiQnJlYWtwb2ludCBbI3skYnJlYWtwb2ludC1taW59XSBkb2VzIG5vdCBFeGlzdFwiO1xuICB9XG4gIEBlbHNlIGlmIG5vdCAkYnJlYWtwb2ludC1tYXgge1xuICAgIEB3YXJuIFwiQnJlYWtwb2ludCBbI3skYnJlYWtwb2ludC1tYXh9XSBkb2VzIG5vdCBFeGlzdFwiO1xuICB9XG4gIEBlbHNlIHtcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogJGZyb20pIGFuZCAobWF4LXdpZHRoOiAkdG8pIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxufVxuXG5cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDozMjBweCkge1xuXG59XG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6NDgwcHgpIHtcblxufVxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOjc2OHB4KSB7XG5cbn1cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDoxMDI0cHgpIHtcblxufVxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOjExNDBweCkge1xuXG59XG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6MTI4MHB4KSB7XG5cbn1cbkBtZWRpYSBwcmludCwgKC1vLW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDUvNCksICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDEuMjUpLCAobWluLXJlc29sdXRpb246IDEyMGRwaSkge1xuXG59XG4iLCJcbiRlbmFibGUtZmxleC1ib3g6IHRydWU7XG4kZW5hYmxlLW91dGxpbmVzOiBmYWxzZTtcblxuXG4kbmF2YmFyLWhlaWdodDogICAgNHJlbSAhZGVmYXVsdDtcbiRzaWRlYmFyLXdpZHRoOiAgICAxOHJlbSAhZGVmYXVsdDtcbiRzdGF0dXNiYXItaGVpZ2h0OiAyMnB4ICFkZWZhdWx0O1xuXG5cbi8qIC0tLSBncmlkLS0tLS0tLS0tLS0tLS0gKi9cbiRncmlkLWd1dHRlci13aWR0aDogICAgICAgICAgMS44NzVyZW0gIWRlZmF1bHQ7IC8vIDMwcHhcbiRncmlkLWNvbHVtbnM6ICAgICAgICAgICAgICAgJGJhc2UtY29sdW1ucyAhZGVmYXVsdDtcbiRncmlkLWJyZWFrcG9pbnRzOiAgICAgICAgICAgJGJhc2UtYnJlYWtwb2ludHMgIWRlZmF1bHQ7XG4kYnJlYWtwb2ludHM6ICAgICAgICAgICAgICAgICRncmlkLWJyZWFrcG9pbnRzICFkZWZhdWx0O1xuXG4vLyBTaXplc1xuJHNpemUteHM6ICAgICAgICAgICAgICAgMjRweCAhZGVmYXVsdDtcbiRzaXplLXM6ICAgICAgICAgICAgICAgIDMwcHggIWRlZmF1bHQ7XG4kc2l6ZS1tOiAgICAgICAgICAgICAgICAzNnB4ICFkZWZhdWx0O1xuJHNpemUtbDogICAgICAgICAgICAgICAgNDBweCAhZGVmYXVsdDtcbiRzaXplLXhsOiAgICAgICAgICAgICAgIDU2cHggIWRlZmF1bHQ7XG5cbiRsaW5lLWhlaWdodC1sZzogICAgICAgIDQgIWRlZmF1bHQ7XG4kbGluZS1oZWlnaHQtbWQ6ICAgICAgICAyICFkZWZhdWx0O1xuJGxpbmUtaGVpZ2h0LXNtOiAgICAgICAgMC41ICFkZWZhdWx0O1xuXG4vLyBNYWluIGNvbG9yc1xuJHJlZDogICAgICAgICAgICAgICAgICAgJHJlZC01MDAgICAgICAgICAgICAhZGVmYXVsdDtcbiRwaW5rOiAgICAgICAgICAgICAgICAgICRwaW5rLTUwMCAgICAgICAgICAgIWRlZmF1bHQ7XG4kcHVycGxlOiAgICAgICAgICAgICAgICAkcHVycGxlLTUwMCAgICAgICAgICFkZWZhdWx0O1xuJGRlZXAtcHVycGxlOiAgICAgICAgICAgJGRlZXAtcHVycGxlLTUwMCAgICAhZGVmYXVsdDtcbiRpbmRpZ286ICAgICAgICAgICAgICAgICRpbmRpZ28tNTAwICAgICAgICAgIWRlZmF1bHQ7XG4kYmx1ZTogICAgICAgICAgICAgICAgICAkYmx1ZS01MDAgICAgICAgICAgICFkZWZhdWx0O1xuJGxpZ2h0LWJsdWU6ICAgICAgICAgICAgJGxpZ2h0LWJsdWUtNTAwICAgICAhZGVmYXVsdDtcbiRjeWFuOiAgICAgICAgICAgICAgICAgICRjeWFuLTUwMCAgICAgICAgICAgIWRlZmF1bHQ7XG4kdGVhbDogICAgICAgICAgICAgICAgICAkdGVhbC01MDAgICAgICAgICAgICFkZWZhdWx0O1xuJGdyZWVuOiAgICAgICAgICAgICAgICAgJGdyZWVuLTUwMCAgICAgICAgICAhZGVmYXVsdDtcbiRsaWdodC1ncmVlbjogICAgICAgICAgICRsaWdodC1ncmVlbi01MDAgICAgIWRlZmF1bHQ7XG4kbGltZTogICAgICAgICAgICAgICAgICAkbGltZS01MDAgICAgICAgICAgICFkZWZhdWx0O1xuJHllbGxvdzogICAgICAgICAgICAgICAgJHllbGxvdy01MDAgICAgICAgICAhZGVmYXVsdDtcbiRhbWJlcjogICAgICAgICAgICAgICAgICRhbWJlci01MDAgICAgICAgICAgIWRlZmF1bHQ7XG4kb3JhbmdlOiAgICAgICAgICAgICAgICAkb3JhbmdlLTUwMCAgICAgICAgICFkZWZhdWx0O1xuJGRlZXAtb3JhbmdlOiAgICAgICAgICAgJGRlZXAtb3JhbmdlLTUwMCAgICAhZGVmYXVsdDtcbiRicm93bjogICAgICAgICAgICAgICAgICRicm93bi01MDAgICAgICAgICAgIWRlZmF1bHQ7XG4kZ3JleTogICAgICAgICAgICAgICAgICAkZ3JleS01MDAgICAgICAgICAgICFkZWZhdWx0O1xuJGJsdWUtZ3JleTogICAgICAgICAgICAgJGJsdWUtZ3JleS01MDAgICAgICAhZGVmYXVsdDtcblxuJGJhc2UtY29sb3JzOiAoXG4gIHJlZDogJHJlZCwgcGluazogJHBpbmssIHB1cnBsZTogJHB1cnBsZSwgZGVlcC1wdXJwbGU6ICRkZWVwLXB1cnBsZSwgaW5kaWdvOiAkaW5kaWdvLCBibHVlOiAkYmx1ZSwgbGlnaHQtYmx1ZTogJGxpZ2h0LWJsdWUsIGN5YW46ICRjeWFuLCB0ZWFsOiAkdGVhbCwgZ3JlZW46ICRncmVlbiwgbGlnaHQtZ3JlZW46ICRsaWdodC1ncmVlbiwgbGltZTogJGxpbWUsIHllbGxvdzogJHllbGxvdywgYW1iZXI6ICRhbWJlciwgb3JhbmdlOiAkb3JhbmdlLCBkZWVwLW9yYW5nZTogJGRlZXAtb3JhbmdlLCBicm93bjogJGJyb3duLCBncmV5OiAkZ3JleSwgYmx1ZS1ncmV5OiAkYmx1ZS1ncmV5XG4pO1xuXG4vLyBQcmltYXJ5IHBhbGV0dGUgY29sb3JzIGFuZCBhY2NlbnQgY29sb3JzXG4kcHJpbWFyeTogICAgICAgICAgICAgICAkaW5kaWdvLTUwMCAhZGVmYXVsdDtcbiRwcmltYXJ5LWh1ZS0xOiAgICAgICAgICRpbmRpZ28tMTAwICFkZWZhdWx0O1xuJHByaW1hcnktaHVlLTI6ICAgICAgICAgJGluZGlnby03MDAgIWRlZmF1bHQ7XG4kcHJpbWFyeS1hY2NlbnQ6ICAgICAgICAkaW5kaWdvLUEyMDAgIWRlZmF1bHQ7XG4kYWNjZW50OiAgICAgICAgICAgICAgICAkcGluay1BMjAwICAhZGVmYXVsdDtcbiRhY2NlbnQtaHVlLTE6ICAgICAgICAgICRwaW5rLUExMDAgICFkZWZhdWx0O1xuJGFjY2VudC1odWUtMjogICAgICAgICAgJHBpbmstQTQwMCAgIWRlZmF1bHQ7XG5cbiRzdWNjZXNzOiAkZ3JlZW47XG4kd2FybmluZzogJG9yYW5nZTtcbiRlcnJvcjogJHJlZDtcbiRpbmZvOiAkbGlnaHQtYmx1ZTtcbiRsaW5rOiAkbGlnaHQtYmx1ZS0zMDA7XG5cbi8vIHRleHRcbiRkZWZhdWx0LXRleHQ6ICAgICAgICAgICAgJGJhc2UtdGV4dC1jb2xvciAhZGVmYXVsdDtcbiRsaWdodC10ZXh0OiAgICAgICAgICAgICAgJGdyZXktMzAwO1xuJGRhcmstdGV4dDogICAgICAgICAgICAgICAkZ3JleS03MDA7XG5cbi8vIFNoYWRvd3NcbiRzaGFkb3ctMWRwOiAgICAjeyRiYXNlLXNoYWRvdy0xZHB9ICAhZGVmYXVsdDtcbiRzaGFkb3ctMmRwOiAgICAjeyRiYXNlLXNoYWRvdy0yZHB9ICAhZGVmYXVsdDtcbiRzaGFkb3ctM2RwOiAgICAjeyRiYXNlLXNoYWRvdy0zZHB9ICAhZGVmYXVsdDtcbiRzaGFkb3ctNGRwOiAgICAjeyRiYXNlLXNoYWRvdy00ZHB9ICAhZGVmYXVsdDtcbiRzaGFkb3ctNmRwOiAgICAjeyRiYXNlLXNoYWRvdy02ZHB9ICAhZGVmYXVsdDtcbiRzaGFkb3ctOGRwOiAgICAjeyRiYXNlLXNoYWRvdy04ZHB9ICAhZGVmYXVsdDtcbiRzaGFkb3ctMTZkcDogICAjeyRiYXNlLXNoYWRvdy0xNmRwfSAhZGVmYXVsdDtcblxuXG4vKiBUb3VjaCBBY3Rpb25zICovXG4kdG91Y2gtcHJlc3M6IGF1dG87XG4kdG91Y2gtdGFwOiBhdXRvO1xuJHRvdWNoLW11bHRpdGFwOiBtYW5pcHVsYXRpb247XG4kdG91Y2gtdmVydGljYWw6IHBhbi14O1xuJHRvdWNoLWhvcml6b250YWw6IHBhbi15O1xuJHRvdWNoLXJvdGF0ZTogcGFuLXggcGFuLXk7XG4kdG91Y2gtcGluY2g6IHBhbi14IHBhbi15O1xuJHRvdWNoLWFjdGlvbnM6IChcbiAgIHByZXNzOiAkdG91Y2gtcHJlc3NcbiAgLHRhcDogJHRvdWNoLXRhcFxuICAsbXVsdGl0YXA6ICR0b3VjaC1tdWx0aXRhcFxuICAsaG9yaXpvbnRhbDogJHRvdWNoLWhvcml6b250YWxcbiAgLHZlcnRpY2FsOiAkdG91Y2gtdmVydGljYWxcbiAgLHJvdGF0ZTogJHRvdWNoLXJvdGF0ZVxuICAscGluY2g6ICR0b3VjaC1waW5jaFxuKTtcblxuLyogQW5pbWF0aW9uIEN1cnZlcyAqL1xuJHRyYW5zaXRpb24tY3VydmUtZmFzdC1vdXQtc2xvdy1pbiAgIDogY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKSAhZGVmYXVsdDtcbiR0cmFuc2l0aW9uLWN1cnZlLWxpbmVhci1vdXQtc2xvdy1pbiA6IGN1YmljLWJlemllcigwLCAwLCAwLjIsIDEpICFkZWZhdWx0O1xuJHRyYW5zaXRpb24tY3VydmUtZmFzdC1vdXQtbGluZWFyLWluIDogY3ViaWMtYmV6aWVyKDAuNCwgMCwgMSwgMSkgIWRlZmF1bHQ7XG4kdHJhbnNpdGlvbi1jdXJ2ZS1kZWZhdWx0OiAkdHJhbnNpdGlvbi1jdXJ2ZS1mYXN0LW91dC1zbG93LWluO1xuXG4kYW5pbWF0aW9uLWN1cnZlLWZhc3Qtb3V0LXNsb3ctaW4gICA6ICR0cmFuc2l0aW9uLWN1cnZlLWZhc3Qtb3V0LXNsb3ctaW4gIWRlZmF1bHQ7XG4kYW5pbWF0aW9uLWN1cnZlLWxpbmVhci1vdXQtc2xvdy1pbiA6ICR0cmFuc2l0aW9uLWN1cnZlLWxpbmVhci1vdXQtc2xvdy1pbiAhZGVmYXVsdDtcbiRhbmltYXRpb24tY3VydmUtZmFzdC1vdXQtbGluZWFyLWluIDogJHRyYW5zaXRpb24tY3VydmUtZmFzdC1vdXQtbGluZWFyLWluICFkZWZhdWx0O1xuJGFuaW1hdGlvbi1jdXJ2ZS1kZWZhdWx0OiAkYW5pbWF0aW9uLWN1cnZlLWZhc3Qtb3V0LXNsb3ctaW47XG5cbi8qKioqKioqKioqKlxuICogRm9udCBQYXRoc1xuICoqKioqKioqKiovXG4kcm9ib3RvLWZvbnQtcGF0aDogXCIuLi9hc3NldHMvZm9udC9yb2JvdG8vXCIgIWRlZmF1bHQ7XG4kaWNvbnMtZm9udC1wYXRoOiBcIi4uL2Fzc2V0cy9mb250L21hdGVyaWFsLWRlc2lnbi1pY29ucy9cIiAhZGVmYXVsdDtcbiRub3RvLWZvbnQtcGF0aDogXCIuLi9hc3NldHMvZm9udC9ub3RvL1wiICFkZWZhdWx0O1xuJGFydWFsLWZvbnQtcGF0aDogXCIuLi9hc3NldHMvZm9udC9hcnVhbC9cIiAhZGVmYXVsdDtcbiRtZGljb25zLWZvbnQtcGF0aDogXCIuLi9hc3NldHMvZm9udC9tZGljb24vXCIgIWRlZmF1bHQ7XG4kYWljb25zLWZvbnQtcGF0aDogXCIuLi9hc3NldHMvZm9udC9haWNvbi9cIiAhZGVmYXVsdDtcbiRhaWNvbnMtZm9udC1mYW1pbHk6IFwiYUljb25zXCIgIWRlZmF1bHQ7XG4kYWljb25zLXZlcnNpb246IFwiMi4wLjBcIiAhZGVmYXVsdDtcblxuLyoqXG4gKiBFTEVNRU5UU1xuICovXG5cbiRlbmFibGUtbmF2YmFyLWJvcmRlcjogICAgIHRydWUgIWRlZmF1bHQ7XG4kbmF2YmFyLWJhY2tncm91bmQ6ICAgICAgICByZ2JhKDI1NSwyNTUsMjU1LDAuOSkgIWRlZmF1bHQ7XG4kbmF2YmFyLWJvcmRlci1jb2xvcjogICAgICAkYmxhY2stNCAhZGVmYXVsdDtcbiRuYXZiYXItYm9yZGVyLXdpZHRoOiAgICAgIDFweCAhZGVmYXVsdDtcbiRuYXZiYXItYm9yZGVyLXN0eWxlOiAgICAgIHNvbGlkICFkZWZhdWx0O1xuJG5hdmJhci1hY3RpdmUtYmFja2dyb3VuZDogcmdiYSgwLDAsMCwwLjEpICFkZWZhdWx0O1xuXG4kZW5hYmxlLXNpZGViYXItYm9yZGVyOiAgdHJ1ZSAhZGVmYXVsdDtcbiRlbmFibGUtc2lkZWJhci1zaGFkb3c6ICBmYWxzZSAhZGVmYXVsdDtcbiRzaWRlYmFyLWJhY2tncm91bmQ6ICAgICAkd2hpdGUgIWRlZmF1bHQ7XG4kc2lkZWJhci1ib3JkZXItd2lkdGg6ICAgMXB4ICFkZWZhdWx0O1xuJHNpZGViYXItYm9yZGVyLXN0eWxlOiAgIHNvbGlkICFkZWZhdWx0O1xuJHNpZGViYXItYm9yZGVyLWNvbG9yOiAgICRibGFjay00ICFkZWZhdWx0O1xuXG4kYnV0dG9uLWhlaWdodDogICAgICAgICAgMzJweCAgIWRlZmF1bHQ7XG4kYnV0dG9uLW1pbi13aWR0aDogICAgICAgNzJweCAgIWRlZmF1bHQ7XG4kYnV0dG9uLW1heC13aWR0aDogICAgICAgMTIwcHggIWRlZmF1bHQ7XG5cbiRidXR0b24tc21hbGwtbWluLXdpZHRoOiA1NnB4ICAhZGVmYXVsdDtcbiRidXR0b24tc21hbGwtbWF4LXdpZHRoOiAxMDBweCAhZGVmYXVsdDtcbiRidXR0b24tc21hbGwtaGVpZ2h0OiAgICAyNnB4ICAhZGVmYXVsdDtcblxuJGJ1dHRvbi1tZWRpdW0tbWluLXdpZHRoOiAkYnV0dG9uLWhlaWdodCAgICAgIWRlZmF1bHQ7XG4kYnV0dG9uLW1lZGl1bS1tYXgtd2lkdGg6ICRidXR0b24tbWluLXdpZHRoICAhZGVmYXVsdDtcbiRidXR0b24tbWVkaXVtLWhlaWdodDogICAgJGJ1dHRvbi1tYXgtd2lkdGggICFkZWZhdWx0O1xuXG4kYnV0dG9uLWxhcmdlLW1pbi13aWR0aDogODhweCAgIWRlZmF1bHQ7XG4kYnV0dG9uLWxhcmdlLW1heC13aWR0aDogMTYwcHggIWRlZmF1bHQ7XG4kYnV0dG9uLWxhcmdlLWhlaWdodDogICAgNDhweCAgIWRlZmF1bHQ7XG5cbiRidXR0b24tYmc6ICRncmV5LTMwMDtcbiRidXR0b24tY29sb3I6ICRncmV5LTgwMDtcbiRidXR0b24tZGVmYXVsdHM6IChcbiAgcm9vdDogKFxuICAgIGhlaWdodDogJGJ1dHRvbi1oZWlnaHQsXG4gICAgbWluLXdpZHRoOiAkYnV0dG9uLW1pbi13aWR0aCxcbiAgICBjb2xvcjogJGJ1dHRvbi1jb2xvcixcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYnV0dG9uLWJnXG4gICksXG4gIGhvdmVyOihcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZ3JleS00MDAsXG4gICAgY29sb3I6ICRncmV5LTkwMFxuICApLFxuICBhY3RpdmU6IChcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZ3JleS00MDBcbiAgKSxcbiAgZGlzYWJsZWQ6IChcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZ3JleS0yMDAsXG4gICAgY29sb3I6ICRncmV5LTYwMFxuICApLFxuICBzbWFsbDogKFxuICAgIG1pbi13aWR0aDogJGJ1dHRvbi1zbWFsbC1taW4td2lkdGgsXG4gICAgbWF4LXdpZHRoOiAkYnV0dG9uLXNtYWxsLW1heC13aWR0aCxcbiAgICBoZWlnaHQ6ICRidXR0b24tc21hbGwtaGVpZ2h0XG4gICksXG4gIG1lZGl1bTogKFxuICAgIG1pbi13aWR0aDogJGJ1dHRvbi1tZWRpdW0tbWluLXdpZHRoLFxuICAgIG1heC13aWR0aDogJGJ1dHRvbi1tZWRpdW0tbWF4LXdpZHRoLFxuICAgIGhlaWdodDogJGJ1dHRvbi1tZWRpdW0taGVpZ2h0XG4gICksXG4gIGxhcmdlOiAoXG4gICAgbWluLXdpZHRoOiAkYnV0dG9uLWxhcmdlLW1pbi13aWR0aCxcbiAgICBtYXgtd2lkdGg6ICRidXR0b24tbGFyZ2UtbWF4LXdpZHRoLFxuICAgIGhlaWdodDogJGJ1dHRvbi1sYXJnZS1oZWlnaHRcbiAgKVxuKSAhZGVmYXVsdDtcblxuXG5AZnVuY3Rpb24gYnV0dG9uLXNldHRpbmdzKCRwcm9wcy4uLikge1xuICBAcmV0dXJuIF9nZXQoJGJ1dHRvbi1kZWZhdWx0cywgJHByb3BzLi4uKTtcbn1cblxuQG1peGluIGJ1dHRvbi1zdGF0ZSgkcHJvcHMuLi4pIHtcbiAgJGJ1dHRvbjogYnV0dG9uLXNldHRpbmdzKCRwcm9wcy4uLik7XG4gIEBpbmNsdWRlIF9kZWNsYXJlKCRidXR0b24pO1xufVxuIiwiXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vL1xuLy8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmxleGJveCBDb250YWluZXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vXG4vLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAvLy9cbi8vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vL1xuLy8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vXG4vLy8gQHJlc291Y2UgaHR0cDovL3czLm9yZy90ci9jc3MzLWZsZXhib3gvI2ZsZXgtY29udGFpbmVycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy9cbi8vLyBATk9URTogIC0gVGhlICdmbGV4JyB2YWx1ZSBjYXVzZXMgYW4gZWxlbWVudCB0byBnZW5lcmF0ZSBhIGJsb2NrLWxldmVsIGZsZXggY29udGFpbmVyIGJveC4gICAgICAgICAgIC8vL1xuLy8vICAgICAgICAgLSBUaGUgJ2lubGluZS1mbGV4JyB2YWx1ZSBjYXVzZXMgYW4gZWxlbWVudCB0byBnZW5lcmF0ZSBhIGlubGluZS1sZXZlbCBmbGV4IGNvbnRhaW5lciBib3guICAgLy8vXG4vLy8gICAgICAgICAtIGRpc3BsYXk6IGZsZXggfCBpbmxpbmUtZmxleCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy9cbi8vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vL1xuLy8vIEBVU0UgICAgLSAoUGxhY2Vob2xkZXIgc2VsZWN0b3JzIGZvciBlYWNoIHR5cGUsIGZvciB0aG9zZSB3aG8gcmF0aGVyIEBleHRlbmQpICAgICAgICAgICAgICAgICAgICAgICAgLy8vXG4vLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEBNaXhpbigpOiBmbGV4Ym94XG4gKiBAUGxhY2Vob2xkZXI6ICVmbGV4Ym94XG4gKlxuICogQGRlc2NyaXB0aW9uIGFwcGxpZXMgcHJvcGVyIHZlbmRlciBwcmVmaXhlcyBmb3Igb2xkZXIgYnJvd3NlcnMgd2hlbiB1c2luZyBgZGlzcGxheTpmbGV4YDtcbiAqL1xuQG1peGluIGZsZXhib3gge1xuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAgIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcbiAgICBkaXNwbGF5OiAtbW96LWZsZXg7XG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gICAgZGlzcGxheTogZmxleDtcbn1cblxuJWZsZXhib3ggeyBAaW5jbHVkZSBmbGV4Ym94OyB9XG5cblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQE1peGluKCk6IGlubGluZS1mbGV4XG4gKiBAUGxhY2Vob2xkZXI6ICVpbmxpbmUtZmxleFxuICpcbiAqIEBkZXNjcmlwdGlvbiBhcHBsaWVzIHByb3BlciB2ZW5kZXIgcHJlZml4ZXMgZm9yIG9sZGVyIGJyb3dzZXJzIHdoZW4gdXNpbmcgYGRpc3BsYXk6aW5saW5lLWZsZXhgO1xuICovXG5AbWl4aW4gaW5saW5lLWZsZXgge1xuICAgIGRpc3BsYXk6IC13ZWJraXQtaW5saW5lLWJveDtcbiAgICBkaXNwbGF5OiAtd2Via2l0LWlubGluZS1mbGV4O1xuICAgIGRpc3BsYXk6IC1tb3otaW5saW5lLWZsZXg7XG4gICAgZGlzcGxheTogLW1zLWlubGluZS1mbGV4Ym94O1xuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xufVxuXG4laW5saW5lLWZsZXggeyBAaW5jbHVkZSBpbmxpbmUtZmxleDsgfVxuXG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEBNaXhpbigpOiBmbGV4LWRpcmVjdGlvblxuICpcbiAqIEByZXNvdXJjZTogaHR0cDovL3czLm9yZy90ci9jc3MzLWZsZXhib3gvI2ZsZXgtZGlyZWN0aW9uLXByb3BlcnR5XG4gKiBASGVscGVyLU1peGluKCk6IGZsZXgtZGlyXG4gKiBASGVscGVyLU1peGluKCk6IGZsZXgtY29sdW1uXG4gKiBASGVscGVyLU1peGluKCk6IGZsZXgtcm93XG4gKiBAUGxhY2Vob2xkZXI6ICVmbGV4LWNvbHVtblxuICogQFBsYWNlaG9sZGVyOiAlZmxleC1yb3dcbiAqXG4gKiBAZGVzY3JpcHRpb24gVGhlICdmbGV4LWRpcmVjdGlvbicgcHJvcGVydHkgc3BlY2lmaWVzIGhvdyBmbGV4IGl0ZW1zIGFyZSBwbGFjZWQgaW5cbiAqICAgICAgICAgICAgICB0aGUgZmxleCBjb250YWluZXIsIGJ5IHNldHRpbmcgdGhlIGRpcmVjdGlvbiBvZiB0aGUgZmxleCBjb250YWluZXInc1xuICogICAgICAgICAgICAgIG1haW4gYXhpcy4gVGhpcyBkZXRlcm1pbmVzIHRoZSBkaXJlY3Rpb24gdGhhdCBmbGV4IGl0ZW1zIGFyZSBsYWlkIG91dCBpbi5cbiAqXG4gKiBAdmFsdWVzOiByb3cgfCByb3ctcmV2ZXJzZSB8IGNvbHVtbiB8IGNvbHVtbi1yZXZlcnNlXG4gKiBAZGVmYXVsdDogcm93XG4gKi9cbkBtaXhpbiBmbGV4LWRpcmVjdGlvbigkdmFsdWU6IHJvdykge1xuICAgIEBpZiAkdmFsdWUgPT0gcm93LXJldmVyc2Uge1xuICAgICAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IHJldmVyc2U7XG4gICAgICAgIC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbDtcbiAgICB9IEBlbHNlIGlmICR2YWx1ZSA9PSBjb2x1bW4ge1xuICAgICAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcbiAgICAgICAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcbiAgICB9IEBlbHNlIGlmICR2YWx1ZSA9PSBjb2x1bW4tcmV2ZXJzZSB7XG4gICAgICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogcmV2ZXJzZTtcbiAgICAgICAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcbiAgICB9IEBlbHNlIHtcbiAgICAgICAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiBub3JtYWw7XG4gICAgICAgIC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbDtcbiAgICB9XG4gICAgLXdlYmtpdC1mbGV4LWRpcmVjdGlvbjogJHZhbHVlO1xuICAgIC1tb3otZmxleC1kaXJlY3Rpb246ICR2YWx1ZTtcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246ICR2YWx1ZTtcbiAgICBmbGV4LWRpcmVjdGlvbjogJHZhbHVlO1xufVxuQG1peGluIGZsZXgtZGlyKCRhcmdzLi4uKSB7IEBpbmNsdWRlIGZsZXgtZGlyZWN0aW9uKCRhcmdzLi4uKTsgfVxuXG4vLyBOT1RFOiBETyBOT1QgaW5zaWRlIGFuIEBtZWRpYSBibG9ja1xuJWZsZXgtY29sdW1uIHtcbiAgQGluY2x1ZGUgZmxleC1kaXJlY3Rpb24oY29sdW1uKTtcbn1cblxuLy8gTk9URTogRE8gTk9UIGluc2lkZSBhbiBAbWVkaWEgYmxvY2tcbiVmbGV4LXJvdyB7XG4gIEBpbmNsdWRlIGZsZXgtZGlyZWN0aW9uKHJvdyk7XG59XG5cbi8vIE5PVEU6IERPIE5PVCBpbnNpZGUgYW4gQG1lZGlhIGJsb2NrXG5AbWl4aW4gZmxleC1jb2x1bW4ge1xuICBAZXh0ZW5kICVmbGV4LWNvbHVtbjtcbn1cblxuLy8gTk9URTogRE8gTk9UIGluc2lkZSBhbiBAbWVkaWEgYmxvY2tcbkBtaXhpbiBmbGV4LXJvdyB7XG4gIEBleHRlbmQgJWZsZXgtcm93O1xufVxuXG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEBNaXhpbigpOiBmbGV4LXdyYXBcbiAqXG4gKiBAcmVzb3VyY2U6IGh0dHA6Ly93My5vcmcvdHIvY3NzMy1mbGV4Ym94LyNmbGV4LXdyYXAtcHJvcGVydHlcbiAqIEBkZXNjcmlwdGlvbjogVGhlICdmbGV4LXdyYXAnIHByb3BlcnR5IGNvbnRyb2xzIHdoZXRoZXIgdGhlIGZsZXggY29udGFpbmVyIGlzIHNpbmdsZS1saW5lXG4gKiAgICAgICAgICAgICAgIG9yIG11bHRpLWxpbmUsIGFuZCB0aGUgZGlyZWN0aW9uIG9mIHRoZSBjcm9zcy1heGlzLCB3aGljaCBkZXRlcm1pbmVzXG4gKiAgICAgICAgICAgICAgIHRoZSBkaXJlY3Rpb24gbmV3IGxpbmVzIGFyZSBzdGFja2VkIGluLlxuICogQHBhcmFtICB7U3RyaW5nfSBbJHZhbHVlOiBub3dyYXBdXG4gKlxuICogQHZhbHVlczogbm93cmFwIHwgd3JhcCB8IHdyYXAtcmV2ZXJzZVxuICogQGRlZmF1bHQ6IG5vd3JhcFxuICovXG5AbWl4aW4gZmxleC13cmFwKCR2YWx1ZTogbm93cmFwKSB7XG4gICAgLy8gTm8gV2Via2l0IEJveCBmYWxsYmFjay5cbiAgICAtd2Via2l0LWZsZXgtd3JhcDogJHZhbHVlO1xuICAgIC1tb3otZmxleC13cmFwOiAkdmFsdWU7XG4gICAgQGlmICR2YWx1ZSA9PSBub3dyYXAge1xuICAgICAgICAtbXMtZmxleC13cmFwOiBub25lO1xuICAgIH0gQGVsc2Uge1xuICAgICAgICAtbXMtZmxleC13cmFwOiAkdmFsdWU7XG4gICAgfVxuICAgIGZsZXgtd3JhcDogJHZhbHVlO1xufVxuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBATWl4aW4oKTogZmxleC1mbG93XG4gKlxuICogQHJlc291cmNlOiBodHRwOi8vdzMub3JnL3RyL2NzczMtZmxleGJveC8jZmxleC1mbG93LXByb3BlcnR5XG4gKiBAZGVzY3JpcHRpb246IFRoZSAnZmxleC1mbG93JyBwcm9wZXJ0eSBpcyBhIHNob3J0aGFuZCBmb3Igc2V0dGluZyB0aGUgJ2ZsZXgtZGlyZWN0aW9uJ1xuICogICAgICAgICAgICAgICBhbmQgJ2ZsZXgtd3JhcCcgcHJvcGVydGllcywgd2hpY2ggdG9nZXRoZXIgZGVmaW5lIHRoZSBmbGV4IGNvbnRhaW5lcidzXG4gKiAgICAgICAgICAgICAgIG1haW4gYW5kIGNyb3NzIGF4ZXMuXG4gKiBAdmFsdWVzOiA8ZmxleC1kaXJlY3Rpb24+IHwgPGZsZXgtd3JhcD5cbiAqIEBkZWZhdWx0OiByb3cgbm93cmFwXG4gKi9cbkBtaXhpbiBmbGV4LWZsb3coJHZhbHVlczogKHJvdyBub3dyYXApKSB7XG4gICAgLy8gTm8gV2Via2l0IEJveCBmYWxsYmFjay5cbiAgICAtd2Via2l0LWZsZXgtZmxvdzogJHZhbHVlcztcbiAgICAtbW96LWZsZXgtZmxvdzogJHZhbHVlcztcbiAgICAtbXMtZmxleC1mbG93OiAkdmFsdWVzO1xuICAgIGZsZXgtZmxvdzogJHZhbHVlcztcbn1cblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQE1peGluKCk6IG9yZGVyXG4gKlxuICogQHJlc291cmNlOiBodHRwOi8vdzMub3JnL3RyL2NzczMtZmxleGJveC8jb3JkZXItcHJvcGVydHlcbiAqIEBkZXNjcmlwdGlvbjogVGhlICdvcmRlcicgcHJvcGVydHkgY29udHJvbHMgdGhlIG9yZGVyIGluIHdoaWNoIGZsZXggaXRlbXMgYXBwZWFyIHdpdGhpblxuICogICAgICAgICAgICAgICB0aGVpciBmbGV4IGNvbnRhaW5lciwgYnkgYXNzaWduaW5nIHRoZW0gdG8gb3JkaW5hbCBncm91cHMuXG4gKiBAZGVmYXVsdDogMFxuICovXG5AbWl4aW4gb3JkZXIoJGludDogMCkge1xuICAgIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6ICRpbnQgKyAxO1xuICAgIC13ZWJraXQtb3JkZXI6ICRpbnQ7XG4gICAgLW1vei1vcmRlcjogJGludDtcbiAgICAtbXMtZmxleC1vcmRlcjogJGludDtcbiAgICBvcmRlcjogJGludDtcbn1cblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQE1peGluKCk6IGZsZXgtZ3Jvd1xuICpcbiAqIEByZXNvdXJjZTogaHR0cDovL3czLm9yZy90ci9jc3MzLWZsZXhib3gvI2ZsZXgtZ3Jvdy1wcm9wZXJ0eVxuICogQGRlc2NyaXB0aW9uOiBUaGUgJ2ZsZXgtZ3JvdycgcHJvcGVydHkgc2V0cyB0aGUgZmxleCBncm93IGZhY3Rvci4gTmVnYXRpdmUgbnVtYmVyc1xuICogICAgICAgICAgICAgICBhcmUgaW52YWxpZC5cbiAqIEBkZWZhdWx0OiAwXG4gKi9cbkBtaXhpbiBmbGV4LWdyb3coJGludDogMCkge1xuICAgIC13ZWJraXQtYm94LWZsZXg6ICRpbnQ7XG4gICAgLXdlYmtpdC1mbGV4LWdyb3c6ICRpbnQ7XG4gICAgLW1vei1mbGV4LWdyb3c6ICRpbnQ7XG4gICAgLW1zLWZsZXgtcG9zaXRpdmU6ICRpbnQ7XG4gICAgZmxleC1ncm93OiAkaW50O1xufVxuXG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEBNaXhpbigpOiBmbGV4LXNocmlua1xuICpcbiAqIEByZXNvdXJjZTogaHR0cDovL3czLm9yZy90ci9jc3MzLWZsZXhib3gvI2ZsZXgtc2hyaW5rLXByb3BlcnR5XG4gKiBAZGVzY3JpcHRpb246IFRoZSAnZmxleC1zaHJpbmsnIHByb3BlcnR5IHNldHMgdGhlIGZsZXggc2hyaW5rIGZhY3Rvci4gTmVnYXRpdmUgbnVtYmVyc1xuICogICAgICAgICAgICAgICBhcmUgaW52YWxpZC5cbiAqIEBkZWZhdWx0OiAxXG4gKi9cbkBtaXhpbiBmbGV4LXNocmluaygkaW50OiAxKSB7XG4gICAgLXdlYmtpdC1mbGV4LXNocmluazogJGludDtcbiAgICAtbW96LWZsZXgtc2hyaW5rOiAkaW50O1xuICAgIC1tcy1mbGV4LW5lZ2F0aXZlOiAkaW50O1xuICAgIGZsZXgtc2hyaW5rOiAkaW50O1xufVxuXG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEBNaXhpbigpOiBmbGV4LWJhc2lzXG4gKlxuICogQHJlc291cmNlOiBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWZsZXhib3gvI2ZsZXgtYmFzaXMtcHJvcGVydHlcbiAqIEBkZXNjcmlwdGlvbjogVGhlICdmbGV4LWJhc2lzJyBwcm9wZXJ0eSBzZXRzIHRoZSBmbGV4IGJhc2lzLiBOZWdhdGl2ZSBsZW5ndGhzIGFyZSBpbnZhbGlkLlxuICpcbiAqIEB2YWx1ZXM6IExpa2UgXCJ3aWR0aFwiXG4gKiBAZGVmYXVsdDogYXV0b1xuICovXG5AbWl4aW4gZmxleC1iYXNpcygkdmFsdWU6IGF1dG8pIHtcbiAgICAtd2Via2l0LWZsZXgtYmFzaXM6ICR2YWx1ZTtcbiAgICAtbW96LWZsZXgtYmFzaXM6ICR2YWx1ZTtcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogJHZhbHVlO1xuICAgIGZsZXgtYmFzaXM6ICR2YWx1ZTtcbn1cblxuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBATWl4aW4oKTogZmxleFxuICpcbiAqIEByZXNvdXJjZTogaHR0cDovL3czLm9yZy90ci9jc3MzLWZsZXhib3gvI2ZsZXgtcHJvcGVydHlcbiAqIEBkZXNjcmlwdGlvbjogVGhlICdmbGV4JyBwcm9wZXJ0eSBzcGVjaWZpZXMgdGhlIGNvbXBvbmVudHMgb2YgYSBmbGV4aWJsZSBsZW5ndGg6IHRoZVxuICogICAgICAgICAgICAgICBmbGV4IGdyb3cgZmFjdG9yIGFuZCBmbGV4IHNocmluayBmYWN0b3IsIGFuZCB0aGUgZmxleCBiYXNpcy4gV2hlbiBhblxuICogICAgICAgICAgICAgICBlbGVtZW50IGlzIGEgZmxleCBpdGVtLCAnZmxleCcgaXMgY29uc3VsdGVkIGluc3RlYWQgb2YgdGhlIG1haW4gc2l6ZVxuICogICAgICAgICAgICAgICBwcm9wZXJ0eSB0byBkZXRlcm1pbmUgdGhlIG1haW4gc2l6ZSBvZiB0aGUgZWxlbWVudC4gSWYgYW4gZWxlbWVudCBpc1xuICogICAgICAgICAgICAgICBub3QgYSBmbGV4IGl0ZW0sICdmbGV4JyBoYXMgbm8gZWZmZWN0LlxuICogQHZhbHVlczogbm9uZSB8IDxmbGV4LWdyb3c+IDxmbGV4LXNocmluaz4gfHwgPGZsZXgtYmFzaXM+XG4gKiBAZGVmYXVsdDogU2VlIGluZGl2aWR1YWwgcHJvcGVydGllcyAoMSAxIDApLlxuICovXG5AbWl4aW4gZmxleCgkZmc6IDEsICRmczogbnVsbCwgJGZiOiBudWxsKSB7XG5cbiAgICAvLyBTZXQgYSB2YXJpYWJsZSB0byBiZSB1c2VkIGJ5IGJveC1mbGV4IHByb3BlcnRpZXNcbiAgICAkZmctYm94ZmxleDogJGZnO1xuXG4gICAgLy8gQm94LUZsZXggb25seSBzdXBwb3J0cyBhIGZsZXgtZ3JvdyB2YWx1ZSBzbyBsZXQncyBncmFiIHRoZVxuICAgIC8vIGZpcnN0IGl0ZW0gaW4gdGhlIGxpc3QgYW5kIGp1c3QgcmV0dXJuIHRoYXQuXG4gICAgQGlmIHR5cGUtb2YoJGZnKSA9PSAnbGlzdCcge1xuICAgICAgICAkZmctYm94ZmxleDogbnRoKCRmZywgMSk7XG4gICAgfVxuXG4gICAgLXdlYmtpdC1ib3gtZmxleDogJGZnLWJveGZsZXg7XG4gICAgLXdlYmtpdC1mbGV4OiAkZmcgJGZzICRmYjtcbiAgICAtbW96LWJveC1mbGV4OiAkZmctYm94ZmxleDtcbiAgICAtbW96LWZsZXg6ICRmZyAkZnMgJGZiO1xuICAgIC1tcy1mbGV4OiAkZmcgJGZzICRmYjtcbiAgICBmbGV4OiAkZmcgJGZzICRmYjtcbn1cblxuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEBNaXhpbigpOiBqdXN0aWZ5LWNvbnRlbnRcbiAqIEBIZWxwZXItTWl4aW4oKTogZmxleC1qdXN0XG4gKlxuICogQHJlc291cmNlOiBodHRwOi8vdzMub3JnL3RyL2NzczMtZmxleGJveC8janVzdGlmeS1jb250ZW50LXByb3BlcnR5XG4gKiBAZGVzY3JpcHRpb246IFRoZSAnanVzdGlmeS1jb250ZW50JyBwcm9wZXJ0eSBhbGlnbnMgZmxleCBpdGVtcyBhbG9uZyB0aGUgbWFpbiBheGlzXG4gKiAgICAgICAgICAgICAgIG9mIHRoZSBjdXJyZW50IGxpbmUgb2YgdGhlIGZsZXggY29udGFpbmVyLiBUaGlzIGlzIGRvbmUgYWZ0ZXIgYW55IGZsZXhpYmxlXG4gKiAgICAgICAgICAgICAgIGxlbmd0aHMgYW5kIGFueSBhdXRvIG1hcmdpbnMgaGF2ZSBiZWVuIHJlc29sdmVkLiBUeXBpY2FsbHkgaXQgaGVscHMgZGlzdHJpYnV0ZVxuICogICAgICAgICAgICAgICBleHRyYSBmcmVlIHNwYWNlIGxlZnRvdmVyIHdoZW4gZWl0aGVyIGFsbCB0aGUgZmxleCBpdGVtcyBvbiBhIGxpbmUgYXJlXG4gKiAgICAgICAgICAgICAgIGluZmxleGlibGUsIG9yIGFyZSBmbGV4aWJsZSBidXQgaGF2ZSByZWFjaGVkIHRoZWlyIG1heGltdW0gc2l6ZS4gSXQgYWxzb1xuICogICAgICAgICAgICAgICBleGVydHMgc29tZSBjb250cm9sIG92ZXIgdGhlIGFsaWdubWVudCBvZiBpdGVtcyB3aGVuIHRoZXkgb3ZlcmZsb3cgdGhlIGxpbmUuXG4gKlxuICogQE5vdGU6ICdzcGFjZS0qJyB2YWx1ZXMgbm90IHN1cHBvcnRlZCBpbiBvbGRlciBzeW50YXhlcy5cbiAqIEB2YWx1ZXM6IGZsZXgtc3RhcnQgfCBmbGV4LWVuZCB8IGNlbnRlciB8IHNwYWNlLWJldHdlZW4gfCBzcGFjZS1hcm91bmRcbiAqIEBkZWZhdWx0OiBmbGV4LXN0YXJ0XG4gKi9cbkBtaXhpbiBqdXN0aWZ5LWNvbnRlbnQoJHZhbHVlOiBmbGV4LXN0YXJ0KSB7XG4gICAgQGlmICR2YWx1ZSA9PSBmbGV4LXN0YXJ0IHtcbiAgICAgICAgLXdlYmtpdC1ib3gtcGFjazogc3RhcnQ7XG4gICAgICAgIC1tcy1mbGV4LXBhY2s6IHN0YXJ0O1xuICAgIH0gQGVsc2UgaWYgJHZhbHVlID09IGZsZXgtZW5kIHtcbiAgICAgICAgLXdlYmtpdC1ib3gtcGFjazogZW5kO1xuICAgICAgICAtbXMtZmxleC1wYWNrOiBlbmQ7XG4gICAgfSBAZWxzZSBpZiAkdmFsdWUgPT0gc3BhY2UtYmV0d2VlbiB7XG4gICAgICAgIC13ZWJraXQtYm94LXBhY2s6IGp1c3RpZnk7XG4gICAgICAgIC1tcy1mbGV4LXBhY2s6IGp1c3RpZnk7XG4gICAgfSBAZWxzZSBpZiAkdmFsdWUgPT0gc3BhY2UtYXJvdW5kIHtcbiAgICAgICAgLW1zLWZsZXgtcGFjazogZGlzdHJpYnV0ZTtcbiAgICB9IEBlbHNlIHtcbiAgICAgICAgLXdlYmtpdC1ib3gtcGFjazogJHZhbHVlO1xuICAgICAgICAtbXMtZmxleC1wYWNrOiAkdmFsdWU7XG4gICAgfVxuICAgIC13ZWJraXQtanVzdGlmeS1jb250ZW50OiAkdmFsdWU7XG4gICAgLW1vei1qdXN0aWZ5LWNvbnRlbnQ6ICR2YWx1ZTtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6ICR2YWx1ZTtcbn1cbkBtaXhpbiBmbGV4LWp1c3QoJGFyZ3MuLi4pIHsgQGluY2x1ZGUganVzdGlmeS1jb250ZW50KCRhcmdzLi4uKTsgfVxuXG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQE1peGluKCk6IGFsaWduLWl0ZW1zXG4gKiBASGVscGVyLU1peGluKCk6IGZsZXgtaXRlbXNcbiAqXG4gKiBAcmVzb3VyY2U6IGh0dHA6Ly93My5vcmcvdHIvY3NzMy1mbGV4Ym94LyNhbGlnbi1pdGVtcy1wcm9wZXJ0eVxuICogQGRlc2NyaXB0aW9uOiBGbGV4IGl0ZW1zIGNhbiBiZSBhbGlnbmVkIGluIHRoZSBjcm9zcyBheGlzIG9mIHRoZSBjdXJyZW50IGxpbmUgb2YgdGhlXG4gKiAgICAgICAgICAgICAgIGZsZXggY29udGFpbmVyLCBzaW1pbGFyIHRvICdqdXN0aWZ5LWNvbnRlbnQnIGJ1dCBpbiB0aGUgcGVycGVuZGljdWxhclxuICogICAgICAgICAgICAgICBkaXJlY3Rpb24uICdhbGlnbi1pdGVtcycgc2V0cyB0aGUgZGVmYXVsdCBhbGlnbm1lbnQgZm9yIGFsbCBvZiB0aGUgZmxleFxuICogICAgICAgICAgICAgICBjb250YWluZXIncyBpdGVtcywgaW5jbHVkaW5nIGFub255bW91cyBmbGV4IGl0ZW1zLiAnYWxpZ24tc2VsZicgYWxsb3dzXG4gKiAgICAgICAgICAgICAgIHRoaXMgZGVmYXVsdCBhbGlnbm1lbnQgdG8gYmUgb3ZlcnJpZGRlbiBmb3IgaW5kaXZpZHVhbCBmbGV4IGl0ZW1zLiAoRm9yXG4gKiAgICAgICAgICAgICAgIGFub255bW91cyBmbGV4IGl0ZW1zLCAnYWxpZ24tc2VsZicgYWx3YXlzIG1hdGNoZXMgdGhlIHZhbHVlIG9mICdhbGlnbi1pdGVtcydcbiAqICAgICAgICAgICAgICAgb24gdGhlaXIgYXNzb2NpYXRlZCBmbGV4IGNvbnRhaW5lci4pXG4gKlxuICogQHZhbHVlczogZmxleC1zdGFydCB8IGZsZXgtZW5kIHwgY2VudGVyIHwgYmFzZWxpbmUgfCBzdHJldGNoXG4gKiBAZGVmYXVsdDogc3RyZXRjaFxuICovXG5AbWl4aW4gYWxpZ24taXRlbXMoJHZhbHVlOiBzdHJldGNoKSB7XG4gICAgQGlmICR2YWx1ZSA9PSBmbGV4LXN0YXJ0IHtcbiAgICAgICAgLXdlYmtpdC1ib3gtYWxpZ246IHN0YXJ0O1xuICAgICAgICAtbXMtZmxleC1hbGlnbjogc3RhcnQ7XG4gICAgfSBAZWxzZSBpZiAkdmFsdWUgPT0gZmxleC1lbmQge1xuICAgICAgICAtd2Via2l0LWJveC1hbGlnbjogZW5kO1xuICAgICAgICAtbXMtZmxleC1hbGlnbjogZW5kO1xuICAgIH0gQGVsc2Uge1xuICAgICAgICAtd2Via2l0LWJveC1hbGlnbjogJHZhbHVlO1xuICAgICAgICAtbXMtZmxleC1hbGlnbjogJHZhbHVlO1xuICAgIH1cbiAgICAtd2Via2l0LWFsaWduLWl0ZW1zOiAkdmFsdWU7XG4gICAgLW1vei1hbGlnbi1pdGVtczogJHZhbHVlO1xuICAgIGFsaWduLWl0ZW1zOiAkdmFsdWU7XG59XG5AbWl4aW4gZmxleC1pdGVtcygkYXJncy4uLikgeyBAaW5jbHVkZSBhbGlnbi1pdGVtcygkYXJncy4uLik7IH1cblxuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEBNaXhpbigpOiBhbGlnbi1zZWxmXG4gKiBASGVscGVyLU1peGluKCk6IGZsZXgtc2VsZlxuICpcbiAqIEB2YWx1ZXM6IGF1dG8gfCBmbGV4LXN0YXJ0IHwgZmxleC1lbmQgfCBjZW50ZXIgfCBiYXNlbGluZSB8IHN0cmV0Y2hcbiAqIEBkZWZhdWx0OiBhdXRvXG4gKi9cbkBtaXhpbiBhbGlnbi1zZWxmKCR2YWx1ZTogYXV0bykge1xuICAgIC8vIE5vIFdlYmtpdCBCb3ggRmFsbGJhY2suXG4gICAgLXdlYmtpdC1hbGlnbi1zZWxmOiAkdmFsdWU7XG4gICAgLW1vei1hbGlnbi1zZWxmOiAkdmFsdWU7XG4gICAgQGlmICR2YWx1ZSA9PSBmbGV4LXN0YXJ0IHtcbiAgICAgICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogc3RhcnQ7XG4gICAgfSBAZWxzZSBpZiAkdmFsdWUgPT0gZmxleC1lbmQge1xuICAgICAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBlbmQ7XG4gICAgfSBAZWxzZSB7XG4gICAgICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246ICR2YWx1ZTtcbiAgICB9XG4gICAgYWxpZ24tc2VsZjogJHZhbHVlO1xufVxuQG1peGluIGZsZXgtc2VsZigkYXJncy4uLikgeyBAaW5jbHVkZSBhbGlnbi1zZWxmKCRhcmdzLi4uKTsgfVxuXG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQE1peGluKCk6IGFsaWduLWNvbnRlbnRcbiAqIEBIZWxwZXItTWl4aW4oKTogZmxleC1jb250ZW50XG4gKlxuICogQHJlc291cmNlOiBodHRwOi8vdzMub3JnL3RyL2NzczMtZmxleGJveC8jYWxpZ24tY29udGVudC1wcm9wZXJ0eVxuICogQGRlc2NyaXB0aW9uOiBUaGUgJ2FsaWduLWNvbnRlbnQnIHByb3BlcnR5IGFsaWducyBhIGZsZXggY29udGFpbmVyJ3MgbGluZXMgd2l0aGluIHRoZVxuICogICAgICAgICAgICAgICBmbGV4IGNvbnRhaW5lciB3aGVuIHRoZXJlIGlzIGV4dHJhIHNwYWNlIGluIHRoZSBjcm9zcy1heGlzLCBzaW1pbGFyIHRvXG4gKiAgICAgICAgICAgICAgIGhvdyAnanVzdGlmeS1jb250ZW50JyBhbGlnbnMgaW5kaXZpZHVhbCBpdGVtcyB3aXRoaW4gdGhlIG1haW4tYXhpcy4gTm90ZSxcbiAqICAgICAgICAgICAgICAgdGhpcyBwcm9wZXJ0eSBoYXMgbm8gZWZmZWN0IHdoZW4gdGhlIGZsZXhib3ggaGFzIG9ubHkgYSBzaW5nbGUgbGluZS5cbiAqXG4gKiBAdmFsdWVzOiBmbGV4LXN0YXJ0IHwgZmxleC1lbmQgfCBjZW50ZXIgfCBzcGFjZS1iZXR3ZWVuIHwgc3BhY2UtYXJvdW5kIHwgc3RyZXRjaFxuICogQGRlZmF1bHQ6IHN0cmV0Y2hcbiAqL1xuQG1peGluIGFsaWduLWNvbnRlbnQoJHZhbHVlOiBzdHJldGNoKSB7XG4gICAgLy8gTm8gV2Via2l0IEJveCBGYWxsYmFjay5cbiAgICAtd2Via2l0LWFsaWduLWNvbnRlbnQ6ICR2YWx1ZTtcbiAgICAtbW96LWFsaWduLWNvbnRlbnQ6ICR2YWx1ZTtcbiAgICBAaWYgJHZhbHVlID09IGZsZXgtc3RhcnQge1xuICAgICAgICAtbXMtZmxleC1saW5lLXBhY2s6IHN0YXJ0O1xuICAgIH0gQGVsc2UgaWYgJHZhbHVlID09IGZsZXgtZW5kIHtcbiAgICAgICAgLW1zLWZsZXgtbGluZS1wYWNrOiBlbmQ7XG4gICAgfSBAZWxzZSB7XG4gICAgICAgIC1tcy1mbGV4LWxpbmUtcGFjazogJHZhbHVlO1xuICAgIH1cbiAgICBhbGlnbi1jb250ZW50OiAkdmFsdWU7XG59XG5AbWl4aW4gZmxleC1jb250ZW50KCRhcmdzLi4uKSB7IEBpbmNsdWRlIGFsaWduLWNvbnRlbnQoJGFyZ3MuLi4pOyB9XG5cblxuQG1peGluIGZsZXhpYmxlKCRkaXNwbGF5Om51bGwsICRkaXJlY3Rpb246bnVsbCwgJGZsZXg6bnVsbCwgJGl0ZW1zOm51bGwsICRqdXN0aWZ5Om51bGwsICRzZWxmOm51bGwpIHtcbiAgQGlmICRkaXNwbGF5ID09IHRydWUge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gIH1cblxuICBAZWxzZSBpZiAkZGlzcGxheSA9PSBpbmxpbmUge1xuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICB9XG5cbiAgQGlmICRkaXJlY3Rpb24gIT0gbnVsbCB7XG4gICAgQGluY2x1ZGUgZmxleC1kaXJlY3Rpb24oJGRpcmVjdGlvbik7XG4gIH1cblxuICBAaWYgJGZsZXggIT0gbnVsbCB7XG4gICAgQGluY2x1ZGUgZmxleCgkZmxleCk7XG4gIH1cblxuICBAaWYgJGl0ZW1zICE9IG51bGwge1xuICAgIEBpbmNsdWRlIGFsaWduLWl0ZW1zKCRpdGVtcyk7XG4gIH1cblxuICBAaWYgJGp1c3RpZnkgIT0gbnVsbCB7XG4gICAgQGluY2x1ZGUganVzdGlmeS1jb250ZW50KCRqdXN0aWZ5KTtcbiAgfVxuXG4gIEBpZiAkc2VsZiAhPSBudWxsIHtcbiAgICBAaW5jbHVkZSBhbGlnbi1zZWxmKCRzZWxmKTtcbiAgfVxufVxuIiwiXG5AbWl4aW4gdGV4dC1pbnB1dC0tdmFyaWFudCgkdHlwZTpmYWxzZSwgJGxhYmVsLXNpemU6c21hbGwsICRuby1wbGFjZWhvbGRlcnM6ZmFsc2UpIHtcbiAgQGlmICRuby1wbGFjZWhvbGRlcnMge1xuICAgIEBpbmNsdWRlIG5vLXBsYWNlaG9sZGVycztcbiAgfVxuICBAaWYgJGxhYmVsLXNpemUgPT0gc21hbGwge1xuICAgIGxhYmVsIHtcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICB9XG4gIH1cbiAgQGVsc2UgaWYgJGxhYmVsLXNpemUgPT0gbGFyZ2Uge1xuICAgIGxhYmVsIHtcbiAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICB9XG4gIH1cbiAgQGlmICR0eXBlID09IGZsb2F0IHtcbiAgICBsYWJlbCB7XG4gICAgICBAaW5jbHVkZSBmbG9hdGluZy1sYWJlbDtcbiAgICB9XG4gIH1cbiAgQGVsc2UgaWYgJHR5cGUgPT0gc3RhY2sge1xuICAgIGxhYmVsIHtcbiAgICAgIEBpbmNsdWRlIHN0YWNrLWxhYmVsO1xuICAgIH1cbiAgfVxuICBAZWxzZSBpZiAkdHlwZSA9PSBpbmxpbmUge1xuICAgIGxhYmVsIHtcbiAgICAgIEBpbmNsdWRlIGlubGluZS1sYWJlbCgpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuQG1peGluIGFpLWlucHV0LXZhbGlkaXR5IHtcbiAgLy8gdmFsaWQsIGludmFsaWQsIHJlcXVpcmVkLCBvcHRpb25hbCwgaW4tcmFuZ2UsIG91dC1vZi1yYW5nZVxuICAmOnZhbGlkIH5pbnB1dC1ib3JkZXI6YmVmb3JlIHtcbiAgICAvLyBiYWNrZ3JvdW5kLWNvbG9yOiBjb2xvcihzdWNjZXNzKTtcbiAgfVxuXG4gICY6aW52YWxpZCB7XG4gICAgQGluY2x1ZGUgcGxhY2Vob2xkZXJzLWNvbG9yKGNvbG9yKHJlZCkpO1xuICAgIGNvbG9yOiBjb2xvcihyZWQpO1xuICB9XG5cbiAgJjppbnZhbGlkIH4gaW5wdXQtYm9yZGVyOmJlZm9yZSB7XG4gICAgLy8gbWluLWhlaWdodDogMnB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6IGNvbG9yKHJlZCk7XG4gIH1cbn1cblxuXG5AbWl4aW4gbm8tcGxhY2Vob2xkZXJzICgpIHtcbiAgOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIHtcbiAgICBkaXNwbGF5OiBub25lOyBvcGFjaXR5OjA7IHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgfVxuICA6LW1vei1wbGFjZWhvbGRlciB7XG4gICAgZGlzcGxheTogbm9uZTsgb3BhY2l0eTowOyB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIH1cbiAgOjotbW96LXBsYWNlaG9sZGVyIHtcbiAgICBkaXNwbGF5OiBub25lOyBvcGFjaXR5OjA7IHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgfVxuICA6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHtcbiAgICBkaXNwbGF5OiBub25lOyBvcGFjaXR5OjA7IHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgfVxufVxuXG5AbWl4aW4gcGxhY2Vob2xkZXJzLWNvbG9yICgkY29sb3IpIHtcbiAgJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XG4gICAgY29sb3I6ICRjb2xvcjtcbiAgfVxuICAmOi1tb3otcGxhY2Vob2xkZXIge1xuICAgIGNvbG9yOiAkY29sb3I7XG4gIH1cbiAgJjo6LW1vei1wbGFjZWhvbGRlciB7XG4gICAgY29sb3I6ICRjb2xvcjtcbiAgfVxuICAmOi1tcy1pbnB1dC1wbGFjZWhvbGRlciB7XG4gICAgY29sb3I6ICRjb2xvcjtcbiAgfVxufVxuXG5AaW5jbHVkZSBSb290Q29tcG9uZW50KGFpLWlucHV0KSB7XG5cbiAgZm9ybSB0ZXh0YXJlYTo6LXdlYmtpdC12YWxpZGF0aW9uLWJ1YmJsZS1tZXNzYWdlLFxuICBmb3JtIGlucHV0Ojotd2Via2l0LXZhbGlkYXRpb24tYnViYmxlLW1lc3NhZ2UsXG4gIGZvcm0gc2VsZWN0Ojotd2Via2l0LXZhbGlkYXRpb24tYnViYmxlLW1lc3NhZ2UsXG4gIGZvcm0gdGV4dGFyZWE6Oi13ZWJraXQtdmFsaWRhdGlvbi1idWJibGUtbWVzc2FnZSB7XG4gICAgICBkaXNwbGF5Om5vbmU7XG4gIH1cbn1cbkBtaXhpbiBmbG9hdGluZy1sYWJlbCgpIHtcbiAgbGFiZWwge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGxlZnQ6IDA7XG4gICAgdG9wOiAwO1xuICAgIEBpbmNsdWRlIHRyYW5zZm9ybSh0cmFuc2xhdGUzZCgwLCAxLjhlbSwgMCkpO1xuICB9XG4gIEBpbmNsdWRlIG5vLXBsYWNlaG9sZGVycygpO1xuXG5cbiAgJi5oYXMtdmFsdWUgbGFiZWwsXG4gIGlucHV0OmZvY3VzIH4gbGFiZWwge1xuICAgIEBpbmNsdWRlIHRyYW5zZm9ybSh0cmFuc2xhdGUzZCgwLCAwLCAwKSlcbiAgfVxufVxuXG5AbWl4aW4gSW5wdXRCb3JkZXIge1xuICBtYXgtd2lkdGg6IDEwMCU7XG4gIG1pbi13aWR0aDogMTAwJTtcbiAgbWluLWhlaWdodDogMXB4O1xuICBtYXgtaGVpZ2h0OiAxcHg7XG4gIHBhZGRpbmc6IDA7XG4gIGJvdHRvbTogMDtcbiAgbGVmdDogMDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBAaW5jbHVkZSBmbGV4KDEpO1xuICBAaW5jbHVkZSB0cmFuc2Zvcm0odHJhbnNsYXRlWigwKSk7XG5cbiAgJjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6IFwiIFwiO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBtaW4td2lkdGg6IDEwMCU7XG4gICAgbWluLWhlaWdodDogMXB4O1xuICAgIEBpbmNsdWRlIHRyYW5zZm9ybSh0cmFuc2xhdGVaKDApKTtcbiAgfVxuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiBcIiBcIjtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbWluLXdpZHRoOiAxMDAlO1xuICAgIG1pbi1oZWlnaHQ6IDFweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjb2xvcihhY2NlbnQpO1xuICAgIEBpbmNsdWRlIHRyYW5zZm9ybShzY2FsZVgoMCkgdHJhbnNsYXRlWigwKSk7XG4gICAgQGluY2x1ZGUgdHJhbnNmb3JtLW9yaWdpbihjZW50ZXIpO1xuICAgIEBpbmNsdWRlIHRyYW5zaXRpb24tZGVmYXVsdDtcbiAgfVxufVxuXG5haS1pbnB1dCB7XG4gICR0b3A6ICgoJHRleHQtaW5wdXQtbWFyZ2luICsgJHRleHQtaW5wdXQtaGVpZ2h0KSAqIC0xKTtcbiAgQGV4dGVuZCAlZmxleGJveDtcbiAgQGluY2x1ZGUgZmxleC1jb2x1bW47XG4gIEBpbmNsdWRlIGZsZXgoMSAwIGF1dG8pO1xuXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbGluZS1oZWlnaHQ6ICR0ZXh0LWlucHV0LWhlaWdodDtcbiAgcGFkZGluZy1ib3R0b206ICgkdGV4dC1pbnB1dC1tYXJnaW4gLyAyKTtcbiAgbWFyZ2luLWJvdHRvbTogKCR0ZXh0LWlucHV0LW1hcmdpbiAvIDIpO1xuICBtYXJnaW4tdG9wOiAkdGV4dC1pbnB1dC1tYXJnaW47XG5cbiAgdGV4dGFyZWEsXG4gIGlucHV0IHtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICByZXNpemU6bm9uZTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICB9XG5cbiAgdGV4dGFyZWEge1xuICAgIG1pbi1oZWlnaHQ6IDIwcHg7XG4gICAgaGVpZ2h0OiA0MHB4O1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOjA7XG4gIH1cblxuICBpbnB1dC1ib3JkZXIge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBib3R0b206IDA7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLDAsMCwwLjIpO1xuICAgIG1pbi13aWR0aDogMTAwJTtcbiAgICBtaW4taGVpZ2h0OiAxcHg7XG4gICAgJjphZnRlciB7XG4gICAgICBAaW5jbHVkZSB0cmFuc2l0aW9uLWRlZmF1bHQ7XG4gICAgICBAaW5jbHVkZSB0cmFuc2Zvcm0oc2NhbGVYKDApKTtcbiAgICAgIGNvbnRlbnQ6IFwiIFwiO1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBoZWlnaHQ6IDFweDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGFjY2VudDtcbiAgICB9XG4gIH1cblxuICBsYWJlbFtmbG9hdGluZy1sYWJlbF0ge1xuICAgIEBpbmNsdWRlIHRyYW5zaXRpb24tZGVmYXVsdDtcbiAgICBAaW5jbHVkZSB1c2VyLXNlbGVjdChub25lKTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICB9XG5cbiAgJi5oYXMtdmFsdWUgbGFiZWxbZmxvYXRpbmctbGFiZWxdLFxuICB0ZXh0YXJlYTpmb2N1cyB+IGxhYmVsW2Zsb2F0aW5nLWxhYmVsXSxcbiAgaW5wdXQ6Zm9jdXMgfiBsYWJlbFtmbG9hdGluZy1sYWJlbF0ge1xuICAgIEBpbmNsdWRlIHRyYW5zZm9ybSh0cmFuc2xhdGUzZCgwLCAkdG9wLCAwKSk7XG4gIH1cblxuICB0ZXh0YXJlYTpmb2N1cyB+IGlucHV0LWJvcmRlcjphZnRlcixcbiAgaW5wdXQ6Zm9jdXMgfiBpbnB1dC1ib3JkZXI6YWZ0ZXIge1xuICAgIEBpbmNsdWRlIHRyYW5zZm9ybShzY2FsZVgoMSkpO1xuICB9XG59XG5cbkBtaXhpbiBBSUlucHV0RWxlbWVudCB7XG59XG5cbkBtaXhpbiBBSUlucHV0RWxlbWVudDIge1xuXG4gICZbcmVhZG9ubHldLFxuICAmLmlucHV0LS1kaXNhYmxlIHtcbiAgICB0ZXh0YXJlYSxcbiAgICBpbnB1dCB7XG4gICAgICBjb2xvcjogYWktdGhlbWUobGlnaHQsIHRleHQpO1xuICAgIH1cblxuICAgIGlucHV0LWJvcmRlciB7XG4gICAgICBib3JkZXI6IDFweCBkb3R0ZWQgdGhlbWUtY29sb3IobGlnaHQsIGRpdmlkZXIpO1xuICAgICAgJjphZnRlcixcbiAgICAgICY6YmVmb3JlIHtiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudH1cbiAgICB9XG4gIH1cblxuICB2YWxpZGF0aW9uLW1lc3NhZ2Uge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZm9udC1zaXplOiBlbSgxMik7XG4gICAgbGluZS1oZWlnaHQ6IGVtKDEyKTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbWluLXdpZHRoOiAxMDAlO1xuICAgIGxlZnQ6IDA7XG4gICAgYm90dG9tOiAwO1xuICAgIGNvbG9yOiBjb2xvcihyZWQpO1xuICAgIEBpbmNsdWRlIHRyYW5zZm9ybSh0cmFuc2xhdGVZKC04cHgpKTtcbiAgfVxuXG4gIGFpLWhpbnQge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZm9udC1zaXplOiBlbSgxMik7XG4gICAgbGluZS1oZWlnaHQ6IGVtKDEyKTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogMDtcbiAgICBib3R0b206IDA7XG4gICAgQGluY2x1ZGUgdHJhbnNmb3JtKHRyYW5zbGF0ZVkoLThweCkpO1xuICB9XG59XG5cbkBtaXhpbiBkZWZhdWx0LWlucHV0LWxpZ2h0VGhlbWUge1xuICBhaS1pbnB1dCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdGhlbWUtbGlnaHQocGFwZXIpO1xuICAgIHRleHRhcmVhLFxuICAgIGlucHV0IHtcbiAgICAgIGNvbG9yOiB0aGVtZS1saWdodCh0ZXh0KTtcbiAgICAgIEBpbmNsdWRlIGFpLWlucHV0LXZhbGlkaXR5O1xuICAgIH1cblxuICAgIGlucHV0LWJvcmRlcjpiZWZvcmUge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdGhlbWUtbGlnaHQoZGl2aWRlcik7XG4gICAgfVxuICAgIHRleHRhcmVhOmRpc2FibGVkLFxuICAgIGlucHV0OmRpc2FibGVkLFxuICAgICZbcmVhZG9ubHldLFxuICAgICYuaW5wdXQtLWRpc2FibGUgdGV4dGFyZWEsXG4gICAgJi5pbnB1dC0tZGlzYWJsZSBpbnB1dCB7XG4gICAgICBjb2xvcjogdGhlbWUtbGlnaHQodGV4dCk7XG4gICAgfVxuXG4gICAgdGV4dGFyZWE6ZGlzYWJsZWQgfiBpbnB1dC1ib3JkZXIsXG4gICAgaW5wdXQ6ZGlzYWJsZWQgfiBpbnB1dC1ib3JkZXIsXG4gICAgJltyZWFkb25seV0gIGlucHV0LWJvcmRlcixcbiAgICAmLmlucHV0LS1kaXNhYmxlIGlucHV0LWJvcmRlciB7XG4gICAgICBib3JkZXI6IDFweCBkb3R0ZWQgdGhlbWUtbGlnaHQoZGl2aWRlcik7XG4gICAgICAmOmFmdGVyLFxuICAgICAgJjpiZWZvcmUge2JhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50fVxuICAgIH1cblxuICAgICZbcmVhZG9ubHldIHtiYWNrZ3JvdW5kLWNvbG9yOiB0aGVtZS1saWdodChkaXZpZGVyKX1cbiAgfVxufVxuXG5cbkBtaXhpbiBkZWZhdWx0LWlucHV0LWRhcmtUaGVtZSB7XG4gIGFpLWlucHV0IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0aGVtZS1kYXJrKHBhcGVyKTtcbiAgICB0ZXh0YXJlYSxcbiAgICBpbnB1dCB7XG4gICAgICBjb2xvcjogdGhlbWUtZGFyayh0ZXh0KTtcbiAgICB9XG5cbiAgICBpbnB1dC1ib3JkZXI6YmVmb3JlIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHRoZW1lLWRhcmsoZGl2aWRlcik7XG4gICAgfVxuXG4gICAgdGV4dGFyZWE6ZGlzYWJsZWQsXG4gICAgaW5wdXQ6ZGlzYWJsZWQsXG4gICAgJltyZWFkb25seV0gIHRleHRhcmVhLFxuICAgICZbcmVhZG9ubHldICBpbnB1dCxcbiAgICAmLmlucHV0LS1kaXNhYmxlIHRleHRhcmVhLFxuICAgICYuaW5wdXQtLWRpc2FibGUgaW5wdXQge1xuICAgICAgY29sb3I6IHRoZW1lLWRhcmsodGV4dCk7XG4gICAgfVxuXG4gICAgdGV4dGFyZWE6ZGlzYWJsZWQgfiBpbnB1dC1ib3JkZXIsXG4gICAgaW5wdXQ6ZGlzYWJsZWQgfiBpbnB1dC1ib3JkZXIsXG4gICAgJltyZWFkb25seV0gaW5wdXQtYm9yZGVyLFxuICAgICYuaW5wdXQtLWRpc2FibGUgaW5wdXQtYm9yZGVyIHtcbiAgICAgIGJvcmRlcjogMXB4IGRvdHRlZCB0aGVtZS1kYXJrKGRpdmlkZXIpO1xuICAgICAgJjphZnRlcixcbiAgICAgICY6YmVmb3JlIHtiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudH1cbiAgICB9XG4gICAgJltyZWFkb25seV0ge2JhY2tncm91bmQtY29sb3I6IHRoZW1lLWRhcmsoZGl2aWRlcil9XG4gIH1cbn1cblxuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0= */
