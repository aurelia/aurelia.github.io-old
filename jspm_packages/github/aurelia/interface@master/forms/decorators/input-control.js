/* */ 
define(['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  exports.inputControl = inputControl;

  function inputControl(target) {
    target.prototype.selectLabel = selectLabel;
    target.prototype.createElementListeners = createElementListeners;
    target.prototype.removeElementListeners = removeElementListeners;
    target.prototype.checkedChanged = checkedChanged;
    target.prototype.disabledChanged = disabledChanged;
    return target;
  }

  function selectLabel() {
    var labelElement = this.element.querySelectorAll('label')[0];
    if (labelElement) {
      var labelText = labelElement.innerText || labelElement.innerHTML;
      labelText = labelText.trim();

      if (!this.name) this.name = labelText;

      if (labelElement.hasAttribute('for')) {
        this.id = labelElement.getAttribute('for');
      } else {
        this.id = labelText.toLowerCase();
        labelElement.setAttribute('for', this.id || this.name || '');
      }
      this.labelElement = labelElement;
    }
  }

  function createElementListeners() {
    var _this = this;

    this.clickEvent = function (event) {
      if (event.target.nodeName === 'LABEL') return;
      if (event.target.nodeName === 'INPUT') return;
      if (_this.disabled) return;
      _this.checked = !_this.checked;
    };
    this.element.addEventListener('click', this.clickEvent.bind(this), true);
    if (this.changed) {
      this.inputElement.addEventListener('change', this.change.bind(this), false);
    }
  }

  function removeElementListeners() {
    this.element.removeEventListener('click', this.clickEvent.bind(this), true);
    if (this.changed) {
      this.inputElement.removeEventListener('change', this.change.bind(this), false);
    }
  }

  function checkedChanged(value) {
    this.form.setValue(this.name, value);
  }

  function disabledChanged(value) {
    if (value) this.inputElement.disabled = true;
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvcm1zL2RlY29yYXRvcnMvaW5wdXQtY29udHJvbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFPLFdBQVMsWUFBWSxDQUFDLE1BQU0sRUFBRTtBQUNuQyxVQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7QUFDM0MsVUFBTSxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsR0FBRyxzQkFBc0IsQ0FBQztBQUNqRSxVQUFNLENBQUMsU0FBUyxDQUFDLHNCQUFzQixHQUFHLHNCQUFzQixDQUFDO0FBQ2pFLFVBQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztBQUNqRCxVQUFNLENBQUMsU0FBUyxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7QUFDbkQsV0FBTyxNQUFNLENBQUM7R0FDZjs7QUFJRCxXQUFTLFdBQVcsR0FBRztBQUNyQixRQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdELFFBQUksWUFBWSxFQUFFO0FBQ2hCLFVBQUksU0FBUyxHQUFHLFlBQVksQ0FBQyxTQUFTLElBQUksWUFBWSxDQUFDLFNBQVMsQ0FBQztBQUM3RCxlQUFTLEdBQUcsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDOztBQUVqQyxVQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQzs7QUFFdEMsVUFBSyxZQUFZLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFHO0FBQ3RDLFlBQUksQ0FBQyxFQUFFLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztPQUM1QyxNQUNJO0FBQ0gsWUFBSSxDQUFDLEVBQUUsR0FBRyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDbEMsb0JBQVksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztPQUM5RDtBQUNELFVBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0tBQ2xDO0dBQ0Y7O0FBT0QsV0FBUyxzQkFBc0IsR0FBRzs7O0FBQ2hDLFFBQUksQ0FBQyxVQUFVLEdBQUcsVUFBQyxLQUFLLEVBQUk7QUFDMUIsVUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsS0FBSyxPQUFPLEVBQUUsT0FBTztBQUM5QyxVQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxLQUFLLE9BQU8sRUFBRSxPQUFPO0FBQzlDLFVBQUksTUFBSyxRQUFRLEVBQUUsT0FBTztBQUMxQixZQUFLLE9BQU8sR0FBRyxDQUFDLE1BQUssT0FBTyxDQUFDO0tBQzlCLENBQUM7QUFDRixRQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN6RSxRQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFDaEIsVUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDN0U7R0FDRjs7QUFPRCxXQUFTLHNCQUFzQixHQUFHO0FBQ2hDLFFBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzVFLFFBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtBQUNoQixVQUFJLENBQUMsWUFBWSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUNoRjtHQUNGOztBQU9ELFdBQVMsY0FBYyxDQUFDLEtBQUssRUFBRTtBQUM3QixRQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0dBQ3RDOztBQU9ELFdBQVMsZUFBZSxDQUFDLEtBQUssRUFBRTtBQUM5QixRQUFLLEtBQUssRUFBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7R0FDaEQiLCJmaWxlIjoiZm9ybXMvZGVjb3JhdG9ycy9pbnB1dC1jb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlucHV0Q29udHJvbCh0YXJnZXQpIHtcbiAgdGFyZ2V0LnByb3RvdHlwZS5zZWxlY3RMYWJlbCA9IHNlbGVjdExhYmVsO1xuICB0YXJnZXQucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnRMaXN0ZW5lcnMgPSBjcmVhdGVFbGVtZW50TGlzdGVuZXJzO1xuICB0YXJnZXQucHJvdG90eXBlLnJlbW92ZUVsZW1lbnRMaXN0ZW5lcnMgPSByZW1vdmVFbGVtZW50TGlzdGVuZXJzO1xuICB0YXJnZXQucHJvdG90eXBlLmNoZWNrZWRDaGFuZ2VkID0gY2hlY2tlZENoYW5nZWQ7XG4gIHRhcmdldC5wcm90b3R5cGUuZGlzYWJsZWRDaGFuZ2VkID0gZGlzYWJsZWRDaGFuZ2VkO1xuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5cblxuZnVuY3Rpb24gc2VsZWN0TGFiZWwoKSB7XG4gIGxldCBsYWJlbEVsZW1lbnQgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbGFiZWwnKVswXTtcbiAgaWYgKGxhYmVsRWxlbWVudCkge1xuICAgIGxldCBsYWJlbFRleHQgPSBsYWJlbEVsZW1lbnQuaW5uZXJUZXh0IHx8IGxhYmVsRWxlbWVudC5pbm5lckhUTUw7XG4gICAgICAgIGxhYmVsVGV4dCA9IGxhYmVsVGV4dC50cmltKCk7XG5cbiAgICBpZiAoIXRoaXMubmFtZSkgdGhpcy5uYW1lID0gbGFiZWxUZXh0O1xuXG4gICAgaWYgKCBsYWJlbEVsZW1lbnQuaGFzQXR0cmlidXRlKCdmb3InKSApIHtcbiAgICAgIHRoaXMuaWQgPSBsYWJlbEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdmb3InKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlkID0gbGFiZWxUZXh0LnRvTG93ZXJDYXNlKCk7XG4gICAgICBsYWJlbEVsZW1lbnQuc2V0QXR0cmlidXRlKCdmb3InLCB0aGlzLmlkIHx8IHRoaXMubmFtZSB8fCAnJyk7XG4gICAgfVxuICAgIHRoaXMubGFiZWxFbGVtZW50ID0gbGFiZWxFbGVtZW50O1xuICB9XG59XG5cbi8qKlxuICogUHJvdG90eXBlKCk6IGNyZWF0ZUVsZW1lbnRMaXN0ZW5lcnNcbiAqXG4gKiBDcmVhdGUgZXZlbnQgbGlzdGVuZXJzIGZvciB0aGUgZWxlbWVudFxuICovXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TGlzdGVuZXJzKCkge1xuICB0aGlzLmNsaWNrRXZlbnQgPSAoZXZlbnQpPT4ge1xuICAgIGlmIChldmVudC50YXJnZXQubm9kZU5hbWUgPT09ICdMQUJFTCcpIHJldHVybjtcbiAgICBpZiAoZXZlbnQudGFyZ2V0Lm5vZGVOYW1lID09PSAnSU5QVVQnKSByZXR1cm47XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQpIHJldHVybjtcbiAgICB0aGlzLmNoZWNrZWQgPSAhdGhpcy5jaGVja2VkO1xuICB9O1xuICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrRXZlbnQuYmluZCh0aGlzKSwgdHJ1ZSk7XG4gIGlmICh0aGlzLmNoYW5nZWQpIHtcbiAgICB0aGlzLmlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmNoYW5nZS5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBQcm90b3R5cGUoKTogcmVtb3ZlRWxlbWVudExpc3RlbmVyc1xuICpcbiAqIERlc3Ryb3kgZXZlbnQgbGlzdGVuZXJzIGZvciB0aGUgZWxlbWVudFxuICovXG5mdW5jdGlvbiByZW1vdmVFbGVtZW50TGlzdGVuZXJzKCkge1xuICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrRXZlbnQuYmluZCh0aGlzKSwgdHJ1ZSk7XG4gIGlmICh0aGlzLmNoYW5nZWQpIHtcbiAgICB0aGlzLmlucHV0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmNoYW5nZS5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBQcm90b3R5cGUoKTogY2hlY2tlZENoYW5nZWRcbiAqXG4gKiBAcGFyYW0gIHtCb29sZWFufSB2YWx1ZSBXaGV0aGVyIGNoZWNrZWQgaGFzIGNoYW5nZWRcbiAqL1xuZnVuY3Rpb24gY2hlY2tlZENoYW5nZWQodmFsdWUpIHtcbiAgdGhpcy5mb3JtLnNldFZhbHVlKHRoaXMubmFtZSwgdmFsdWUpO1xufVxuXG4vKipcbiAqIFByb3RvdHlwZSgpOiBkaXNhYmxlZENoYW5nZWRcbiAqXG4gKiBAcGFyYW0gIHtCb29sZWFufSB2YWx1ZSBXaGV0aGVyIGRpc2FibGVkIGhhcyBjaGFuZ2VkXG4gKi9cbmZ1bmN0aW9uIGRpc2FibGVkQ2hhbmdlZCh2YWx1ZSkge1xuICBpZiAoIHZhbHVlICkgdGhpcy5pbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlO1xufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
