html {
  box-sizing: border-box; }

*, *::after, *::before {
  box-sizing: inherit; }

@font-face {
  font-family: "Roboto";
  src: url("../assets/font/roboto/Roboto-Thin.woff2") format("woff2"), url("../assets/font/roboto/Roboto-Thin.woff") format("woff"), url("../assets/font/roboto/Roboto-Thin.ttf") format("truetype");
  font-weight: 200; }

@font-face {
  font-family: "Roboto";
  src: url("../assets/font/roboto/Roboto-Light.woff2") format("woff2"), url("../assets/font/roboto/Roboto-Light.woff") format("woff"), url("../assets/font/roboto/Roboto-Light.ttf") format("truetype");
  font-weight: 300; }

@font-face {
  font-family: "Roboto";
  src: url("../assets/font/roboto/Roboto-Regular.woff2") format("woff2"), url("../assets/font/roboto/Roboto-Regular.woff") format("woff"), url("../assets/font/roboto/Roboto-Regular.ttf") format("truetype");
  font-weight: 400; }

@font-face {
  font-family: "Roboto";
  src: url("../assets/font/roboto/Roboto-Medium.woff2") format("woff2"), url("../assets/font/roboto/Roboto-Medium.woff") format("woff"), url("../assets/font/roboto/Roboto-Medium.ttf") format("truetype");
  font-weight: 500; }

@font-face {
  font-family: "Roboto";
  src: url("../assets/font/roboto/Roboto-Bold.woff2") format("woff2"), url("../assets/font/roboto/Roboto-Bold.woff") format("woff"), url("../assets/font/roboto/Roboto-Bold.ttf") format("truetype");
  font-weight: 700; }

@font-face {
  font-family: "Noto";
  src: url("../assets/font/noto/NotoSerif-Regular.ttf") format("truetype"); }

@font-face {
  font-family: "Arual";
  src: url("../assets/font/arual/Arual.ttf") format("truetype"); }

@font-face {
  font-family: "San Francisco";
  font-weight: 100;
  src: url("assets/fonts/SF-UI/SF-UI-Display-Ultralight.otf") format("otf"); }

@font-face {
  font-family: "San Francisco";
  font-weight: 200;
  src: url("assets/fonts/SF-UI/SF-UI-Display-Thin.otf") format("otf"); }

@font-face {
  font-family: "San Francisco";
  font-weight: normal;
  src: url("assets/fonts/SF-UI/SF-UI-Display-Medium.otf") format("otf"); }

@font-face {
  font-family: "San Francisco";
  font-weight: 500;
  src: url("assets/fonts/SF-UI/SF-UI-Display-Semibold.otf") format("otf"); }

@font-face {
  font-family: "San Francisco";
  font-weight: bold;
  src: url("assets/fonts/SF-UI/SF-UI-Display-Bold.otf") format("otf"); }

@font-face {
  font-family: 'MDIcons';
  font-style: normal;
  font-weight: 400;
  src: url(../assets/font/mdicon/MaterialIcons-Regular.eot);
    src: local("MD Icons"), local("MDIcons-Regular"), url(../assets/font/mdicon/MaterialIcons-Regular.woff2) format("woff2"), url(../assets/font/mdicon/MaterialIcons-Regular.woff) format("woff"), url(../assets/font/mdicon/MaterialIcons-Regular.ttf) format("truetype"); }

@font-face {
  font-family: "aIcons";
  src: url("../assets/font/aicon/aicons.eot?v=2.0.0");
  src: url("../assets/font/aicon/aicons.eot?v=2.0.0#iefix") format("embedded-opentype"), url("../assets/font/aicon/aicons.ttf?v=2.0.0") format("truetype"), url("../assets/font/aicon/aicons.woff?v=2.0.0") format("woff"), url("../assets/font/aicon/aicons.svg?v=2.0.0#Ionicons") format("svg");
  font-weight: normal;
  font-style: normal; }

/*# sourceMappingURL=data:application/json;base64, */
