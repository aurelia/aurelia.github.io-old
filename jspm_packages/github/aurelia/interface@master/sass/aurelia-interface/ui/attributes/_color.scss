[shadow="1"]  { @extend %shadow-1dp;  }
[shadow="2"]  { @extend %shadow-2dp;  }
[shadow="3"]  { @extend %shadow-3dp;  }
[shadow="4"]  { @extend %shadow-4dp;  }
[shadow="6"]  { @extend %shadow-6dp;  }
[shadow="8"]  { @extend %shadow-8dp;  }
[shadow="16"] { @extend %shadow-16dp; }

[color="primary"] {
  @extend %i-color-primary;
}
[color="accent"] {
  @extend %i-color-accent;
}
[bg="primary"] {
  @extend %i-bg-primary;
}
[bg="accent"] {
  @extend %i-bg-accent;
}
[text="light"] {
  @extend %i-light-text;
}
[text="dark"] {
  @extend %i-dark-text;
}

[bg="black-opaque"] {
  background-color: rgba(0,0,0,0.8);
  color: $white;
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
}


@mixin color-attributes($color-list, $prefix:false) {

  @each $name, $color in $color-list {

    @if type-of($color) == map {

      @include color-attributes($color, $name);

    } @else {

      $label: if($prefix, "#{$prefix}-#{$name}", $name);
      $offset: if(lightness($color) < 60%, $white, false);
      [color~="bg-#{$label}"] {
        background-color: $color !important;
      }

      [color~="text-#{$label}"] {
        color: $color !important;
      }

      [color~="border-#{$label}"] {
        border-color: $color !important;
      }

      [color~="outline-#{$label}"] {
        color: $color !important;
        border-color: $color !important;
      }

      [color~="#{$label}"] {
        background-color: $color;
        @if $offset {
          color: $offset;
        }
        &[color~="borders"] {
          border-color: $color;
        }
      }
    }
  }
}


@include color-attributes($base-colors);
@include color-attributes($ai-colors);
