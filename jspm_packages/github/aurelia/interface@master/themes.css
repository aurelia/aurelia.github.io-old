html {
  box-sizing: border-box; }

*, *::after, *::before {
  box-sizing: inherit; }

.theme-light [color=base] {
  color: theme-light(base); }

.theme-light [color=xbase] {
  color: theme-dark(base); }

.theme-light [bg=base] {
  background-color: theme-light(base); }

.theme-light [bg=xbase] {
  background-color: theme-dark(base); }

.theme-light [color=text] {
  color: theme-light(text); }

.theme-light [color=xtext] {
  color: theme-dark(text); }

.theme-light [bg=text] {
  background-color: theme-light(text); }

.theme-light [bg=xtext] {
  background-color: theme-dark(text); }

.theme-light [color=secondary] {
  color: theme-light(secondary); }

.theme-light [color=xsecondary] {
  color: theme-dark(secondary); }

.theme-light [bg=secondary] {
  background-color: theme-light(secondary); }

.theme-light [bg=xsecondary] {
  background-color: theme-dark(secondary); }

.theme-light [color=icon] {
  color: theme-light(icon); }

.theme-light [color=xicon] {
  color: theme-dark(icon); }

.theme-light [bg=icon] {
  background-color: theme-light(icon); }

.theme-light [bg=xicon] {
  background-color: theme-dark(icon); }

.theme-light [color=disable] {
  color: theme-light(disable); }

.theme-light [color=xdisable] {
  color: theme-dark(disable); }

.theme-light [bg=disable] {
  background-color: theme-light(disable); }

.theme-light [bg=xdisable] {
  background-color: theme-dark(disable); }

.theme-light [color=hint] {
  color: theme-light(hint); }

.theme-light [color=xhint] {
  color: theme-dark(hint); }

.theme-light [bg=hint] {
  background-color: theme-light(hint); }

.theme-light [bg=xhint] {
  background-color: theme-dark(hint); }

.theme-light [color=label] {
  color: theme-light(label); }

.theme-light [color=xlabel] {
  color: theme-dark(label); }

.theme-light [bg=label] {
  background-color: theme-light(label); }

.theme-light [bg=xlabel] {
  background-color: theme-dark(label); }

.theme-light [color=divider] {
  color: theme-light(divider); }

.theme-light [color=xdivider] {
  color: theme-dark(divider); }

.theme-light [bg=divider] {
  background-color: theme-light(divider); }

.theme-light [bg=xdivider] {
  background-color: theme-dark(divider); }

.theme-light [color=default] {
  color: theme-light(default); }

.theme-light [color=xdefault] {
  color: theme-dark(default); }

.theme-light [bg=default] {
  background-color: theme-light(default); }

.theme-light [bg=xdefault] {
  background-color: theme-dark(default); }

.theme-light [color=status-bar] {
  color: theme-light(status-bar); }

.theme-light [color=xstatus-bar] {
  color: theme-dark(status-bar); }

.theme-light [bg=status-bar] {
  background-color: theme-light(status-bar); }

.theme-light [bg=xstatus-bar] {
  background-color: theme-dark(status-bar); }

.theme-light [color=app-bar] {
  color: theme-light(app-bar); }

.theme-light [color=xapp-bar] {
  color: theme-dark(app-bar); }

.theme-light [bg=app-bar] {
  background-color: theme-light(app-bar); }

.theme-light [bg=xapp-bar] {
  background-color: theme-dark(app-bar); }

.theme-light [color=list] {
  color: theme-light(list); }

.theme-light [color=xlist] {
  color: theme-dark(list); }

.theme-light [bg=list] {
  background-color: theme-light(list); }

.theme-light [bg=xlist] {
  background-color: theme-dark(list); }

.theme-light [color=paper] {
  color: theme-light(paper); }

.theme-light [color=xpaper] {
  color: theme-dark(paper); }

.theme-light [bg=paper] {
  background-color: theme-light(paper); }

.theme-light [bg=xpaper] {
  background-color: theme-dark(paper); }

.theme-light [color=paper-light] {
  color: theme-light(paper-light); }

.theme-light [color=xpaper-light] {
  color: theme-dark(paper-light); }

.theme-light [bg=paper-light] {
  background-color: theme-light(paper-light); }

.theme-light [bg=xpaper-light] {
  background-color: theme-dark(paper-light); }

.theme-dark [color=base] {
  color: theme-dark(base); }

.theme-dark [color=xbase] {
  color: theme-light(base); }

.theme-dark [bg=base] {
  background-color: theme-dark(base); }

.theme-dark [bg=xbase] {
  background-color: theme-light(base); }

.theme-dark [color=text] {
  color: theme-dark(text); }

.theme-dark [color=xtext] {
  color: theme-light(text); }

.theme-dark [bg=text] {
  background-color: theme-dark(text); }

.theme-dark [bg=xtext] {
  background-color: theme-light(text); }

.theme-dark [color=secondary] {
  color: theme-dark(secondary); }

.theme-dark [color=xsecondary] {
  color: theme-light(secondary); }

.theme-dark [bg=secondary] {
  background-color: theme-dark(secondary); }

.theme-dark [bg=xsecondary] {
  background-color: theme-light(secondary); }

.theme-dark [color=icon] {
  color: theme-dark(icon); }

.theme-dark [color=xicon] {
  color: theme-light(icon); }

.theme-dark [bg=icon] {
  background-color: theme-dark(icon); }

.theme-dark [bg=xicon] {
  background-color: theme-light(icon); }

.theme-dark [color=disable] {
  color: theme-dark(disable); }

.theme-dark [color=xdisable] {
  color: theme-light(disable); }

.theme-dark [bg=disable] {
  background-color: theme-dark(disable); }

.theme-dark [bg=xdisable] {
  background-color: theme-light(disable); }

.theme-dark [color=hint] {
  color: theme-dark(hint); }

.theme-dark [color=xhint] {
  color: theme-light(hint); }

.theme-dark [bg=hint] {
  background-color: theme-dark(hint); }

.theme-dark [bg=xhint] {
  background-color: theme-light(hint); }

.theme-dark [color=label] {
  color: theme-dark(label); }

.theme-dark [color=xlabel] {
  color: theme-light(label); }

.theme-dark [bg=label] {
  background-color: theme-dark(label); }

.theme-dark [bg=xlabel] {
  background-color: theme-light(label); }

.theme-dark [color=divider] {
  color: theme-dark(divider); }

.theme-dark [color=xdivider] {
  color: theme-light(divider); }

.theme-dark [bg=divider] {
  background-color: theme-dark(divider); }

.theme-dark [bg=xdivider] {
  background-color: theme-light(divider); }

.theme-dark [color=default] {
  color: theme-dark(default); }

.theme-dark [color=xdefault] {
  color: theme-light(default); }

.theme-dark [bg=default] {
  background-color: theme-dark(default); }

.theme-dark [bg=xdefault] {
  background-color: theme-light(default); }

.theme-dark [color=status-bar] {
  color: theme-dark(status-bar); }

.theme-dark [color=xstatus-bar] {
  color: theme-light(status-bar); }

.theme-dark [bg=status-bar] {
  background-color: theme-dark(status-bar); }

.theme-dark [bg=xstatus-bar] {
  background-color: theme-light(status-bar); }

.theme-dark [color=app-bar] {
  color: theme-dark(app-bar); }

.theme-dark [color=xapp-bar] {
  color: theme-light(app-bar); }

.theme-dark [bg=app-bar] {
  background-color: theme-dark(app-bar); }

.theme-dark [bg=xapp-bar] {
  background-color: theme-light(app-bar); }

.theme-dark [color=list] {
  color: theme-dark(list); }

.theme-dark [color=xlist] {
  color: theme-light(list); }

.theme-dark [bg=list] {
  background-color: theme-dark(list); }

.theme-dark [bg=xlist] {
  background-color: theme-light(list); }

.theme-dark [color=paper] {
  color: theme-dark(paper); }

.theme-dark [color=xpaper] {
  color: theme-light(paper); }

.theme-dark [bg=paper] {
  background-color: theme-dark(paper); }

.theme-dark [bg=xpaper] {
  background-color: theme-light(paper); }

.theme-dark [color=paper-light] {
  color: theme-dark(paper-light); }

.theme-dark [color=xpaper-light] {
  color: theme-light(paper-light); }

.theme-dark [bg=paper-light] {
  background-color: theme-dark(paper-light); }

.theme-dark [bg=xpaper-light] {
  background-color: theme-light(paper-light); }

/*# sourceMappingURL=data:application/json;base64, */
