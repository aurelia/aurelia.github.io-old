/* */ 
define(['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  var InterfaceConfig = {};
  exports.InterfaceConfig = InterfaceConfig;
  var _ontouchstart = 'ontouchstart';
  var ai = 'ai',
      AI = 'AI',
      iOS = 'iOS',
      Android = 'Android',
      Windows = 'Windows',
      HandHeld = 'HandHeld',
      Mobile = 'Mobile',
      Tablet = 'Tablet',
      Desktop = 'Desktop';
  var up = 'up',
      down = 'down',
      right = 'right',
      left = 'left',
      mouse = 'mouse',
      touch = 'touch',
      pen = 'pen',
      start = 'start',
      move = 'move',
      end = 'end';
  var DOCUMENT = window.document;
  var NAVIGATOR = window.navigator;
  var USER_AGENT = window.navigator.userAgent;
  var IS_POINTEREVENTS = window.navigator.pointerEnabled || window.navigator.msPointerEnabled;
  var IS_TOUCH = _ontouchstart in window || window.DocumentTouch && document instanceof DocumentTouch;
  var REQUEST_ANIM_FRAME = (function () {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {
      window.setTimeout(callback, 16);
    };
  })().bind(window);
  var CANCEL_ANIM_FRAME = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelRequestAnimationFrame;
  var PLATFORM_EXPRESSIONS = {
    Android: /(?!like Android)Android/i,
    Windows: /Windows/i,
    iOS: /iP(hone|od|ad)/i,
    OSX: /MAC OS X|OS X/i
  };
  var VERSION_EXPRESSIONS = {
    Android: /Android (\d+).(\d+)?/,
    Windows: /Windows Phone (\d+).(\d+)?/,
    iOS: /(?!OS)(\d+)_(\d+)?/i,
    OSX: /OS X ([\d]\_[\d])*/i
  };
  var DEVICE_EXPRESSIONS = {
    HandHeld: /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune/i,
    Tablet: /(tablet|Tablet|iPad|Playbook|Silk)|(Android(?!.*Mobile))/i
  };

  var BROWSER_EXPRESSIONS = {
    Opera: /opera|opr/i,
    IE: /msie|trident/i,
    Chrome: /chrome|crios|crmo/i,
    Firefox: /firefox|iceweasel/i,
    Silk: /silk/i,
    Phantom: /phantom/i,
    Safari: /safari/i
  };
  var VENDOR_PREFIXES = {
    trident: 'ms',
    gecko: 'Moz',
    webkit: 'Webkit',
    presto: 'O'
  };

  var config = exports.InterfaceConfig = InterfaceConfig = {

    DOCUMENT: DOCUMENT,
    IS_TOUCH: IS_TOUCH,
    IS_POINTEREVENTS: IS_POINTEREVENTS,
    NO_MOUSEEVENTS: IS_TOUCH,

    animationConfig: {},
    stylesConfig: {},
    gestureConfig: {},
    platformConfig: {},
    browserConfig: {},
    deviceConfig: {}
  };

  var animationConfig = config.animationConfig = {
    global: config,
    REQUEST_ANIM_FRAME: REQUEST_ANIM_FRAME,
    CANCEL_ANIM_FRAME: CANCEL_ANIM_FRAME
  };

  exports.animationConfig = animationConfig;
  var stylesConfig = config.stylesConfig = {
    global: config,
    VENDOR_PREFIXES: VENDOR_PREFIXES
  };

  exports.stylesConfig = stylesConfig;
  var gestureConfig = config.gestureConfig = {
    global: config,

    EVENT_TYPES: {},
    DIRECTION_UP: up,
    DIRECTION_DOWN: down,
    DIRECTION_LEFT: left,
    DIRECTION_RIGHT: right,

    POINTER_MOUSE: mouse,
    POINTER_TOUCH: touch,
    POINTER_PEN: pen,

    EVENT_START: start,
    EVENT_MOVE: move,
    EVENT_END: end
  };

  exports.gestureConfig = gestureConfig;
  var platformConfig = config.platformConfig = {
    PLATFORM_EXPRESSIONS: PLATFORM_EXPRESSIONS,
    VERSION_EXPRESSIONS: VERSION_EXPRESSIONS,
    NAVIGATOR: NAVIGATOR,
    USER_AGENT: USER_AGENT,

    global: config,

    _versionExpression: RegExp,

    _version: String(0),

    _platformName: String(AI),

    _localName: String(ai),

    _engine: undefined,

    _isPlatform: Object(),

    isPlatform: function isPlatform(key) {
      this._isPlatform[key] = this._isPlatform[key] || PLATFORM_EXPRESSIONS[key].test(this.USER_AGENT);
      return this._isPlatform[key];
    }
  };

  exports.platformConfig = platformConfig;
  var browserConfig = config.browserConfig = {
    BROWSER_EXPRESSIONS: BROWSER_EXPRESSIONS,
    NAVIGATOR: NAVIGATOR,
    USER_AGENT: USER_AGENT,

    global: config,

    _versionExpression: RegExp,

    _version: String(0),

    _browserName: String(AI),

    _localName: String(ai),

    _engine: undefined,

    _isBrowser: Object(),

    isBrowser: function isBrowser(key) {
      this.ua = this.ua || this.USER_AGENT.toLowerCase();
      this._isBrowser[key] = this._isBrowser[key] || BROWSER_EXPRESSIONS[key].test(this.ua);
      return this._isBrowser[key];
    }
  };

  exports.browserConfig = browserConfig;
  var deviceConfig = config.deviceConfig = {
    DEVICE_EXPRESSIONS: DEVICE_EXPRESSIONS,
    USER_AGENT: USER_AGENT,

    global: config,

    _isStatusBarShown: Boolean(false),

    _isFullScreen: Boolean(false),

    _deviceName: String(Desktop),

    _isDevice: Object(),

    isDevice: function isDevice(key) {
      this._isDevice[key] = this._isDevice[key] || this.DEVICE_EXPRESSIONS[key].test(this.USER_AGENT);
      return this._isDevice[key];
    }
  };
  exports.deviceConfig = deviceConfig;
});
//# sourceMappingURL=data:application/json;base64,
