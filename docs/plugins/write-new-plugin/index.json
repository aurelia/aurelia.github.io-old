{"name":"Write New Plugin","description":"The tutorial on how to write a new Aurelia plugin.","author":{"name":"Chunpeng Huo","url":"https://github.com/huochunpeng"},"featured":false,"links":{"static":"docs/plugins/write-new-plugin","html":"docs/plugins/write-new-plugin/index.html","fragment":"docs/plugins/write-new-plugin/index-fragment.html","self":"docs/plugins/write-new-plugin/index.json"},"content":"\n\n## Introduction\n\nThank for Aurelia coding convention, writing an new Aurelia Plugin is not difficult. However the setup of a new plugin project was difficult, but now you can generate a new plugin project effortlessly using Aurelia-CLI.\n\n## Setup\n\nIn this tutorial, we will use [Aurelia-CLI](/docs/cli) to create a plugin project.\n\nFirst, make sure you installed the latest Aurelia-CLI.\n\n```shell\nnpm i -g aurelia-cli\n```\n\nThen run command `au new --plugin` or `au new project-name --plugin`. You will be asked to provide a project name, followed by a number of options. If you aren't sure what you want, you can select one of the default ESNext or TypeScript setup in the first question. Otherwise, you can create a custom project. Simply follow the prompts.\n\n## Structure of Plugin\n\nThe plugin project created by Aurelia-CLI provides not only the plugin source itself, but also a dev app (with CLI built-in bundler and RequireJS) to simplify the development of the plugin.\n\n> Info\n> We don't provide plugin skeleton with dev-app in webpack setup, not yet. We use CLI built-in bundler because it allows us to share some setup to transpile plugin resoruces (js/html/css).\n\n1. The local `src/` folder, is the source code for the plugin.\n2. The local `dev-app/` folder, is the code for the dev app, just like a normal app bootstrapped by aurelia-cli.\n3. You can use normal `au run` and `au test` in development just like developing an app.\n4. You can use aurelia-testing to test your plugin, just like developing an app.\n5. To ensure compatibility to other apps, always use `PLATFORM.moduleName()` wrapper in files inside `src/`. You don't need to use the wrapper in `dev-app/` folder as CLI built-in bundler supports module name without the wrapper.\n\n### Plugin Entry\n\nThe plugin entry file is `src/index.js` (or `src/index.ts` if using TypeScript). It exports only one function called \"configure\".\n\n\n```JavaScript index.js\nimport {PLATFORM} from 'aurelia-pal';\n\nexport function configure(config) {\n  config.globalResources([\n    PLATFORM.moduleName('./elements/hello-world')\n  ]);\n}\n```\n```TypeScript index.ts [variant]\nimport {FrameworkConfiguration} from 'aurelia-framework';\nimport {PLATFORM} from 'aurelia-pal';\n\nexport function configure(config: FrameworkConfiguration) {\n  config.globalResources([\n    PLATFORM.moduleName('./elements/hello-world')\n  ]);\n}\n```\n\nThe configure function is called by Aurelia when end users who use your plugin in their app like this:\n\n```JavaScript main.js\naurelia.use.plugin('your-plugin-name');\n```\n```TypeScript main.ts [variant]\naurelia.use.plugin(PLATFORM.moduleName('your-plugin-name'));\n```\n\nThe methods you can use inside the configure function is listed in [FrameworkConfiguration](/docs/api/framework/class/FrameworkConfiguration). `globalResources` can register custom elements, custom attributes, value converters, and binding behaviors to be globally available in end users' app.\n\n> Info\n> Note `globalResources` isn't the only method you can use. You can use other methods to bring in additional plugins, register objects to Aurelia DI container, and more. We will show some of those usage later in this tutorial.\n\n### Create New Resources\n\nYou can create new custom element, custom attribute, value converter or binding behavior manually, or use command `au generate` to help.\n```shell\nau generate element some-name\nau generate attribute some-name\nau generate value-converter some-name\nau generate binding-behavior some-name\n```\n\nBy default, the cli generates command generates files in following folders:\n```\nsrc/elements\nsrc/attributes\nsrc/value-converters\nsrc/binding-behaviors\n```\n\nNote the folder structure is only to help you organizing the files, it's not a requirement of Aurelia. You can manually create new element (or other thing) anywhere in `src/`.\n\nAfter you added some new file, you need to register it in `src/index.js` (or `src/index.ts`. Like this:\n\n```JavaScript\nconfig.globalResources([\n  // ...\n  PLATFORM.moduleName('./path/to/new-file-without-ext')\n]);\n````\n\n## Develop Plugin\n\n### Run Dev App\n\nRun the built-in dev app with command `au run --open`, it will automatically open the browser to show you the example custom element `hello-world`.\n\n> Info\n> If you chose \"Custom Aurelia Plugin\" when running `au new --plugin`, the final question will provide you to choose a \"Basic\" scaffolding instead of \"None\". The \"Basic\" will give you additional examples in custom attribute, value converter, and binding behavior.\n\n\n### Tests\n\nTerminate the running dev app before running tests. Run `au test` to run unit tests. Depending on your choice of unit testing framework (karma/jest), the way to write unit tests is slightly different, please follow the existing example in `test/unit/`.\n\nFor the quality of your plugin, we recommend using karma, as we really want testing against a real browser. Jest runs tests in NodeJS with a simulated browser environment. Jest is much faster but it does not really test your plugin inside browser.\n\n\n### Manage dependencies\n\nBy default, this plugin has no \"dependencies\" in package.json. Theoretically this plugin depends on at least `aurelia-pal` because `src/index.js` (or `src/index.ts`) imports it. It could also depends on more core Aurelia package like `aurelia-binding` or `aurelia-templating` if you build advanced components that reference them.\n\nIdeally you need to carefully add those `aurelia-pal` (`aurelia-binding`...) to \"dependencies\" in package.json. But in practice you don't have to. Because every app that consumes this plugin will have full Aurelia core packages installed.\n\nFurthermore, there are two benefits by leaving those dependencies out of plugin's package.json.\n1. ensure this plugin doesn't bring in a duplicated Aurelia core package to consumers' app. This is mainly for app built with webpack. We had been hit with `aurelia-binding` v1 and v2 conflicts due to 3rd party plugin asks for `aurelia-binding` v1.\n2. reduce the burden for npm/yarn when installing this plugin.\n\nIf you are a perfectionist who could not stand leaving out dependencies, I recommend you to add `aurelia-pal` (`aurelia-binding`...) to \"peerDependencies\" in package.json. So at least it could not cause a duplicated Aurelia core package.\n\nIf your plugin depends on other npm package, like `lodash` or `jquery`, **you have to add them to \"dependencies\" in package.json**.\n\n### Build Plugin\n\nRun `au build-plugin`. This will transpile all files from `src/` folder to `dist/native-modules/` and `dist/commonjs/`.\n\nFor example, `src/index.js` (or `src/index.ts`) will become `dist/native-modules/index.js` and `dist/commonjs/index.js`.\n\nNote all other files in `dev-app/` folder are for the dev app, they would not appear in the published npm package.\n\n### Consume Plugin\n\nBy default, the `dist/` folder is not committed to git. (We have `/dist` in `.gitignore`). But that would not prevent you from consuming this plugin through direct git reference.\n\nYou can consume this plugin directly by:\n```shell\nnpm i github:your_github_username/your-plugin-name\n# or if you use bitbucket\nnpm i bitbucket:your_github_username/your-plugin-name\n# or if you use gitlab\nnpm i gitlab:your_github_username/your-plugin-name\n# or plain url\nnpm i https:/github.com/your_github_username/your-plugin-name.git\n```\n\nThen load the plugin in app's `main.js` or `main.ts` like this.\n```js\naurelia.use.plugin('your-plugin-name');\n// for webpack user, use PLATFORM.moduleName wrapper\naurelia.use.plugin(PLATFORM.moduleName('your-plugin-name'));\n```\n\nThe missing `dist/` files will be filled up by npm through `\"prepare\": \"npm run build\"` (in `\"scripts\"` section of package.json).\n\nYarn has a [bug](https://github.com/yarnpkg/yarn/issues/5235) that ignores `\"prepare\"` script. If you want to use yarn to consume your plugin through direct git reference, remove `/dist` from `.gitignore` and commit all the files. Note you don't need to commit `dist/` files if you only use yarn to consume this plugin through published npm package (`npm i your-plugin-name`).\n\n### Publish npm package\n\nBy default, `\"private\"` field in package.json has been turned on, this prevents you from accidentally publish a private plugin to npm.\n\nTo publish the plugin to npm for public assumption:\n1. Remove `\"private\": true,` from package.json.\n\n2. Pump up project version. This will run through `au test` (in \"preversion\" in package.json) first.\n```shell\nnpm version patch # or minor or major\n```\n3. Push up changes to your git server\n```shell\ngit push && git push --tags\n```\n4. Then publish to npm, you need to have your npm account logged in.\n```shell\nnpm publish\n```\n\n### Automate changelog, git push, and npm publish\n\nYou can enable `npm version patch # or minor or major` to automatically update changelog, push commits and version tag to the git server, and publish to npm.\n\nHere is one simple setup.\n1. `npm i -D standard-changelog`. We use [`standard-changelog`](https://github.com/conventional-changelog/conventional-changelog) as a minimum example to support conventional changelog.\n  * Alternatively you can use high level [standard-version](https://github.com/conventional-changelog/standard-version).\n2. Add two commands to `\"scripts\"` section of package.json.\n\n```\n\"scripts\": {\n  // ...\n  \"version\": \"standard-changelog && git add CHANGELOG.md\",\n  \"postversion\": \"git push && git push --tags && npm publish\"\n},\n```\n3. you can remove `&& npm publish` if your project is private\n\n\n## Advanced Usage\n\n\n### Wrap other plugins\n\nYou can use plugin to wrap other plugins without providing any additional functionality. This is practically useful to group a list of common plugins to be reused in your organization.\n\n```JavaScript index.js\nexport function configure(config) {\n  config.plugin(PLATFORM.moduleName('aurelia-animator-css'));\n  config.plugin(PLATFORM.moduleName('aurelia-dialog'), config => {\n    config.useDefaults();\n    config.settings.lock = true;\n    config.settings.ignoreTransitions = true;\n  });\n}\n```\n```TypeScript index.ts [variant]\nimport {FrameworkConfiguration} from 'aurelia-framework';\nimport {PLATFORM} from 'aurelia-pal';\n\nexport function configure(config: FrameworkConfiguration) {\n  config.plugin(PLATFORM.moduleName('aurelia-animator-css'));\n  config.plugin(PLATFORM.moduleName('aurelia-dialog'), config => {\n    config.useDefaults();\n    config.settings.lock = true;\n    config.settings.ignoreTransitions = true;\n  });\n}\n```\n\nFor the above example, you need to make sure to add `aurelia-animator-css` and `aurelia-dialog` to your plugin's \"dependencies\" in package.json.\n\n\n### Change Aurelia DI Behavior\n\nThe default Aurelia DI uses singleton for any JavaScript class, you can override the behavior for your class.\n\n```JavaScript index.js\nimport {MyAwesomeService} from './my-awesome-service';\n\nexport function configure(config) {\n  // new instance for every injection of MyAwesomeService\n  config.transient(MyAwesomeService, MyAwesomeService);\n}\n\nexport {MyAwesomeService};\n```\n```TypeScript index.ts [variant]\nimport {FrameworkConfiguration} from 'aurelia-framework';\nimport {MyAwesomeService} from './my-awesome-service';\n\nexport function configure(config: FrameworkConfiguration) {\n  // new instance for every injection of MyAwesomeService\n  config.transient(MyAwesomeService, MyAwesomeService);\n}\n\nexport {MyAwesomeService};\n```\n"}