{"name":"Cookbook","description":"Recipes for common usage of CLI's built-in bundler","author":{"name":"Chunpeng Huo","url":"https://github.com/huochunpeng"},"links":{"static":"docs/cli/cli-bundler/cook-book","html":"docs/cli/cli-bundler/cook-book/index.html","fragment":"docs/cli/cli-bundler/cook-book/index-fragment.html","self":"docs/cli/cli-bundler/cook-book/index.json"},"content":"\n\n## Introduction\n\nThis page collects recipes for common usage of CLI's built-in bundler.\nNote all following recipes are not for using `prepend`.\n\n* [Prepend](/docs/cli/cli-bundler/dependency-management#prepend) is easier for some legacy JavaScript libraries.\n* Using CDN (Content Delivery Network) is easier for css libraries, specially for those with fonts and images.\n\n## jQuery\n\n`npm install jquery` or `yarn add jquery`\n\n<code-listing heading=\"any-file${context.language.fileExtension}\">\n  <source-code lang=\"JavaScript\">\n    import $ from 'jquery';\n  </source-code>\n  <source-code lang=\"TypeScript\">\n    import * as $ from 'jquery';\n  </source-code>\n</code-listing>\n\n## normalize.css\n\n`npm install normalize.css` or `yarn add normalize.css`\n\n<code-listing heading=\"app.html\">\n  <source-code lang=\"HTML\">\n    <template>\n      <require from=\"normalize.css\"></require>\n    </template>\n  </source-code>\n</code-listing>\n\n`normalize.css`'s package name is interesting, it has file extension `.css` which matches its main file `node_modules/normalize.css/normalize.css`. We can directly do `<require from=\"normalize.css\"></require>` because `.css` tells Aurelia the correct file type, so Aurelia understands this is a css resource.\n\nFull path `<require from=\"normalize.css/normalize.css\"></require>` also works here.\n\nFor some npm package like `some-css` with main file `node_modules/some-css/some.css`, we cannot use `<require from=\"some-css\"></require>` because Aurelia will mistake `some-css` as a JavaScript resource. We can only use `<require from=\"some-css/some.css\"></require>`.\n\n## Bootstrap CSS v4\n\n`npm install jquery bootstrap popper.js`\n\n<code-listing heading=\"main${context.language.fileExtension}\">\n  <source-code lang=\"JavaScript\">\n    import 'bootstrap'; // load bootstrap JavaScript\n  </source-code>\n  <source-code lang=\"TypeScript\">\n    import 'bootstrap'; // load bootstrap JavaScript\n  </source-code>\n</code-listing>\n\n<code-listing heading=\"app.html\">\n  <source-code lang=\"HTML\">\n    <template>\n      <require from=\"bootstrap/css/bootstrap.min.css\"></require>\n    </template>\n  </source-code>\n</code-listing>\n\nNote both `<require from=\"bootstrap/css/bootstrap.min.css\"></require>` and `<require from=\"bootstrap/dist/css/bootstrap.min.css\"></require>` work.\n\n## Customize Bootstrap CSS v4\n\nTo customize Bootstrap, instead of using its CSS file, we need to use Bootstrap SCSS source files.\n\nStart new app with `au new demo`, select following:\n* 3. Custom\n* 2. CLI's built-in bundler with RequireJS (or 3. SystemJS)\n* 1. Babel (or 2. TypeScript)\n* 1. Default (or 2, or 3)\n* 3. Sass\n* You choices on test, editor, then install dependencies with npm/yarn\n\n`npm install jquery bootstrap popper.js` or `yarn add jquery bootstrap popper.js`\n\n<code-listing heading=\"main${context.language.fileExtension}\">\n  <source-code lang=\"JavaScript\">\n    import 'bootstrap'; // load bootstrap JavaScript\n  </source-code>\n  <source-code lang=\"TypeScript\">\n    import 'bootstrap'; // load bootstrap JavaScript\n  </source-code>\n</code-listing>\n\n<code-listing heading=\"app.scss\">\n  <source-code lang=\"SCSS\">\n    // customize bootstrap to use 24 columns\n    // check node_modules/bootstrap/scss/_variables.scss\n    // for all possible customization\n    $grid-columns: 24;\n    // compile node_modules/bootstrap/scss/bootstrap.scss\n    @import '../node_modules/bootstrap/scss/bootstrap';\n  </source-code>\n</code-listing>\n\n<code-listing heading=\"app.html\">\n  <source-code lang=\"HTML\">\n    <template>\n      <require from=\"./app.css\"></require>\n    </template>\n  </source-code>\n</code-listing>\n\nWith CLI Bundler, all scss files are compiled by `aurelia_project/tasks/process-css.js` before sending to bundler. CLI Bundler only sees the resulting `app.css` file not the source `app.scss` file. That's why we use `./app.css` in `app.html`.\n\n> Info: Difference with Webpack\n> Webpack behaves differently, it controls the whole scss compilation. With Webpack, you need `<require from=\"./app.scss\"></require>` in `app.html`.\n\n## Bootstrap CSS v3 (legacy)\n\nWe need to use shim.\n\n`npm install jquery bootstrap@3.3.7` or `yarn add jquery bootstrap@3.3.7`\n\n<code-listing heading=\"aurelia_project/aurelia.json\">\n  <source-code lang=\"JavaScript\">\n    \"bundles\": [\n      // ...\n      {\n        \"name\": \"vendor-bundle.js\",\n        \"prepend\": [ /* ... */ ],\n        \"dependencies\": [\n          // ...\n          {\n            \"name\": \"bootstrap\",\n            \"deps\": [\"jquery\"],\n            \"path\": \"../node_modules/bootstrap\",\n            \"main\": \"dist/js/bootstrap.min\"\n          }\n        ]\n      }\n    ],\n    \"copyFiles\": {\n      \"node_modules/bootstrap/dist/fonts/*\": \"bootstrap/fonts\"\n    }\n  </source-code>\n</code-listing>\n\n<code-listing heading=\"main${context.language.fileExtension}\">\n  <source-code lang=\"JavaScript\">\n    import 'bootstrap';\n  </source-code>\n  <source-code lang=\"TypeScript\">\n    import 'bootstrap';\n  </source-code>\n</code-listing>\n\n<code-listing heading=\"app.html\">\n  <source-code lang=\"HTML\">\n    <template>\n      <require from=\"bootstrap/css/bootstrap.min.css\"></require>\n    </template>\n  </source-code>\n</code-listing>\n\nNote both `<require from=\"bootstrap/css/bootstrap.min.css\"></require>` and `<require from=\"bootstrap/dist/css/bootstrap.min.css\"></require>` work. But if you use `bootstrap/dist/css/bootstrap.min.css`, you need to adjust `copyFiles` target folder to `bootstrap/dist/fonts`.\n\n<code-listing heading=\"use in any-file${context.language.fileExtension}\">\n  <source-code lang=\"JavaScript\">\n    import $ from 'jquery';\n    $('[data-toggle=\"popover\"]').popover();\n  </source-code>\n  <source-code lang=\"TypeScript\">\n    import * as $ from 'jquery';\n    $('[data-toggle=\"popover\"]').popover();\n  </source-code>\n</code-listing>\n\n## Font Awesome v5 Free\n\n`npm install @fortawesome/fontawesome-free` or `yarn add @fortawesome/fontawesome-free`\n\n<code-listing heading=\"aurelia_project/aurelia.json\">\n  <source-code lang=\"JavaScript\">\n    \"bundles\": [\n      // ...\n    ],\n    \"copyFiles\": {\n      \"node_modules/@fortawesome/fontawesome-free/webfonts/*\": \"@fortawesome/fontawesome-free/webfonts\"\n    }\n  </source-code>\n</code-listing>\n\n<code-listing heading=\"app.html\">\n  <source-code lang=\"HTML\">\n    <template>\n      <require from=\"@fortawesome/fontawesome-free/css/all.min.css\"></require>\n      optional v4-shims\n      <require from=\"@fortawesome/fontawesome-free/css/v4-shims.min.css\"></require>\n      <i class=\"fas fa-cube\"></i>\n    </template>\n  </source-code>\n</code-listing>\n\n## Font Awesome v4\n\n`npm install font-awesome` or `yarn add font-awesome`\n\n<code-listing heading=\"aurelia_project/aurelia.json\">\n  <source-code lang=\"JavaScript\">\n    \"bundles\": [\n      // ...\n    ],\n    \"copyFiles\": {\n      \"node_modules/font-awesome/fonts/*\": \"font-awesome/fonts\"\n    }\n  </source-code>\n</code-listing>\n\n<code-listing heading=\"app.html\">\n  <source-code lang=\"HTML\">\n    <template>\n      <require from=\"font-awesome/css/font-awesome.min.css\"></require>\n      <i class=\"fa fa-cube\"></i>\n    </template>\n  </source-code>\n</code-listing>\n\n## Foundation CSS v6\n\n`npm install jquery what-input foundation-sites` or `yarn add jquery what-input foundation-sites`\n\n<code-listing heading=\"main${context.language.fileExtension}\">\n  <source-code lang=\"JavaScript\">\n    import 'what-input';\n    import 'foundation-sites'; // load foundation JavaScript\n  </source-code>\n  <source-code lang=\"TypeScript\">\n    import 'what-input';\n    import 'foundation-sites'; // load foundation JavaScript\n  </source-code>\n</code-listing>\n\n<code-listing heading=\"app${context.language.fileExtension}\">\n  <source-code lang=\"JavaScript\">\n    import $ from 'jquery';\n    import Foundation from 'foundation-sites';\n    export class App {\n      attached() {\n        // using ref=\"demo\" in html template\n        this.tooltip = new Foundation.Tooltip($(this.demo));\n        // for better reuse, wrap foundation js features\n        // behind Aurelia custom elements or attributes.\n      }\n      detached() {\n        if (this.tooltip) {\n          this.tooltip.destroy();\n          this.tooltip = null;\n        }\n      }\n    }\n  </source-code>\n  <source-code lang=\"TypeScript\">\n    import * as $ from 'jquery';\n    import * as Foundation from 'foundation-sites';\n    export class App {\n      attached() {\n        // using ref=\"demo\" in html template\n        this.tooltip = new Foundation.Tooltip($(this.demo));\n        // for better reuse, wrap foundation js features\n        // behind Aurelia custom elements or attributes.\n      }\n      detached() {\n        if (this.tooltip) {\n          this.tooltip.destroy();\n          this.tooltip = null;\n        }\n      }\n    }\n  </source-code>\n</code-listing>\n\n<code-listing heading=\"app.html\">\n  <source-code lang=\"HTML\">\n    <template>\n      <require from=\"foundation-sites/css/foundation.min.css\"></require>\n      <span ref=\"demo\" data-tooltip class=\"top\" tabindex=\"2\" title=\"Fancy word for a beetle.\">demo</span>\n    </template>\n  </source-code>\n</code-listing>\n\n## Materialize CSS v1\n\n`npm install jquery materialize-css` or `yarn add jquery materialize-css`\n\n<code-listing heading=\"app${context.language.fileExtension}\">\n  <source-code lang=\"JavaScript\">\n    import materialize from 'materialize-css';\n    export class App {\n      attached() {\n        // using ref=\"modal\" in html template\n        materialize.Modal.init(this.modal);\n        // for better reuse, wrap materialize js features\n        // behind Aurelia custom elements or attributes.\n      }\n      detached() {\n        const ins = materialize.Modal.getInstance(this.modal);\n        if (ins) ins.destroy();\n      }\n    }\n  </source-code>\n  <source-code lang=\"TypeScript\">\n    import * as materialize from 'materialize-css';\n    export class App {\n      attached() {\n        // using ref=\"modal\" in html template\n        materialize.Modal.init(this.modal);\n        // for better reuse, wrap materialize js features\n        // behind Aurelia custom elements or attributes.\n      }\n      detached() {\n        const ins = materialize.Modal.getInstance(this.modal);\n        if (ins) ins.destroy();\n      }\n    }\n  </source-code>\n</code-listing>\n\n<code-listing heading=\"app.html\">\n  <source-code lang=\"HTML\">\n    <template>\n      <require from=\"materialize-css/css/materialize.min.css\"></require>\n      <a class=\"waves-effect waves-light btn modal-trigger\" href=\"#modal1\">Modal</a>\n      <div ref=\"modal\" id=\"modal1\" class=\"modal\">\n        <div class=\"modal-content\">\n          <h4>Modal Header</h4>\n          <p>A bunch of text</p>\n        </div>\n        <div class=\"modal-footer\">\n          <a href=\"#!\" class=\"modal-close waves-effect waves-green btn-flat\">Agree</a>\n        </div>\n      </div>\n    </template>\n  </source-code>\n</code-listing>\n"}