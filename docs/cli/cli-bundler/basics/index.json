{"name":"Basics","description":"Basics features of the Aurelia CLI's built-in Bundler.","author":{"name":"Jeroen Vinke","url":"https://jeroenvinke.nl"},"links":{"static":"docs/cli/cli-bundler/basics","html":"docs/cli/cli-bundler/basics/index.html","fragment":"docs/cli/cli-bundler/basics/index-fragment.html","self":"docs/cli/cli-bundler/basics/index.json"},"content":"\n\n## Introduction\n\nThis page is specifically for people using the CLI's built-in Bundler (with RequireJS or SystemJS).\n\nTo choose the built-in bundler, create an app with `au new appName`, choose `3. Custom`, then choose `2. CLI's built-in bundler with RequireJS` or `3. CLI's built-in bundler with SystemJS`.\n\n> Warning\n> If you're using Webpack then the [Webpack section](/docs/cli/webpack) is what you want to read.\n\n## ASP.NET Core\n\nIf you would like to use ASP.NET Core, first begin by using Visual Studio to create your ASP.NET Core project. Select whatever options make the most sense based on your .NET project plans. After you have created the project, open a command line and change directory into your web project's project folder. This is the folder that contains the `.xproj` file. From within this folder, you can execute the following command `au new --here` which will setup Aurelia \"here\" inside this project folder. You will be prompted to choose the platform you want. Simply select \"ASP.NET Core\". Follow the prompts for the rest of the process, just like above.\n\n>Info\n>Since Aurelia-CLI should be in charge of building your client side code, make sure before running the `new` command from **Aurelia-CLI** you add `<TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>` to your .xproj file inside the first `<PropertyGroup></PropertyGroup>` you find to stop Visual Studio from compiling the `.ts` files in your project. If you build your solution before doing this, Visual Studio will compile your `.ts` files breaking some of the **Aurelia-CLI** commands.\n\nWhen developing an ASP.NET Core application you will want to set the `ASPNETCORE_ENVIRONMENT` environment variable. Detailed instructions can be found on the [Microsoft Docs](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/environments#setting-the-environment).\n\n## Running the application\n> Info\n> This section does not apply to ASP.NET JavascriptServices\n\nRunning an Aurelia-CLI application is simple: `au run` and you're on your way. But it's good to be aware of other flags that can be supplied to the `au run` command. `au --help` shows you all supported flags.\n\n## Deploying Your App\n\nRun build command `au build --env prod`, then copy following items to the main deployment folder on your server:\n\n1.  `index.html`\n2.  `/scripts`\n3. any other folders (for example fonts folder) generated by `copyFiles`. See \"Copy Other Files\" below.\n\n## Unit Testing\n\nIf you selected a project setup that includes unit tests, you can run your tests with `au test`. If you would like to adopt a tdd-based workflow, writing code and tests with continual test evaluation, you can use the `--watch` flag. For example: `au test --watch`.\n\n> Info\n> If you choose jest as the unit test runner, use `au jest` to run your tests.\n\n## Build Revisions\n\nTo create builds with revision numbers, you must set `rev` to be `true` under the build options. This will cause a unique revision number to be added to the bundled files. For example:\n```javascript\n\"options\": {\n  \"minify\": \"stage & prod\",\n  \"sourcemaps\": \"dev & stage\",\n  \"rev\": true\n}\n```\nYou are also able to set specific flags so that build revisions only take place while staging or in production. For example:\n```javascript\n\"options\": {\n  \"minify\": \"stage & prod\",\n  \"sourcemaps\": \"dev & stage\",\n  \"rev\": \"stage & prod\"\n}\n```\nNow, if you were to run `au build --env prod`, the output would contain build revisions, while `au build --env dev` would not. Setting the build revisions to only compile while in production can help the development process, since it keeps your workspace clean of various build revisions.\n\n## Caching\n\nFor new app, cache is turned on for dev and stage environments. If you want to turn on cache for all environments, change the setting to `\"cache\": true`.\n```javascript\n\"options\": {\n  \"minify\": \"stage & prod\",\n  \"sourcemaps\": \"dev & stage\",\n  \"rev\": false,\n  \"cache\": \"dev & stage\"\n}\n```\n\nThe cache setting controls two caching behaviors to speed up consecutive builds.\n1. caches tracing result. This cache is centralized in OS temp directory, and shared among all apps using CLI bundler.\n2. for esnext app, `aurelia_project/tasks/transpile.js` caches babel transpiling result using `gulp-cache`. The transpiling cache is dedicated per app per environment, not shared with other apps.\n\n> Info: No transpiling cache for TypeScript app\n> We have not find a way to get gulp-typescript working with gulp-cache.\n\nTo reset cache, run `au clear-cache`. This command clears up all caches created by either CLI bundler or gulp-cache. Note it clears caches of all CLI bundler apps, not just the app you are working on.\n\n### Modifying The Index File\n\nIn order for your `index.html` file to be updated to load up the correct revisioned bundle, you must ensure that the `\"index\"` property located in `build/targets` section is correctly pointing to the `index.html` (or starting page) for your project. For example:\n``` javascript\n\"build\": {\n  \"targets\": [\n    {\n      \"id\": \"web\",\n      \"displayName\": \"Web\",\n      \"output\": \"scripts\",\n      \"index\": \"index.html\"\n    }\n  ]\n}\n```\n\n## Bundling And Code Splitting\n\nBy default, the CLI bundler creates two bundles, an `app-bundle.js`, and a `vendor-bundle.js`. This is code splitting out of the box.\n\nAn example of the default `app-bundle.js` looks like this:\n```javascript\n{\n  \"name\": \"app-bundle.js\",\n  \"source\": [\n    \"**/*.{js, css,html}\"\n  ]\n}\n```\nIn this setup, we've named the bundle `app-bundle.js`, and have defined what's included by setting the `source` property to be an array of patterns that match to file paths (the patterns are using glob patterns, [minimatch](https://github.com/isaacs/minimatch) to be specific, to find files that match).\nOptionally, you can define an `exclude` list by setting the `source` property to be an object containing both an `include` and `exclude` array of patterns. This is helpful when you're trying to split your app into multiple bundles.\n```javascript\n{\n  \"name\": \"app-bundle.js\",\n  \"source\": {\n    \"include\": [\n      \"**/*.{js, css,html}\"\n    ],\n    \"exclude\": [\n      \"**/sub-module/**/*\",\n    ]\n  }\n},\n{\n  \"name\": \"sub-module-bundle.js\",\n  \"source\": [\n    \"**/sub-module/**/*\",\n  ]\n}\n```\n\n## Adding Client Libraries to Your Project\n\nJust do `npm install <library>` (or `yarn add <library>`). CLI Bundler supports any npm package in either CommonJS, AMD, UMD, or Native ES Module format.\n\nSometimes, you will encounter some JavaScript lib that doesn't support any module format. You would need manual configuration, read [dependency management](/docs/cli/cli-bundler/dependency-management) for more details.\n\n> Info: For Long Time CLI Bundler Users\n> `au import` and `au install` commands are deprecated. Latest CLI Bundler does almost everything automatically without need of explicit configuration in `aurelia_project/aurelia.json`.\n\n> Info\n> UMD is a module format supports both CommonJS and AMD, falls back to global namespace when no module loader is available. Npm packages that designed to work in both Node.js and browser environments are normally shipped in this format.\n\n## Copy Other Files (e.g. fonts)\n\nCLI Bundler auto bundles js/html/css files into AMD modules format. But it cannot help on other resources like font files and images which are required by css at runtime.\n\nResources like fonts and images are not handled by JavaScript module loader, they need to be present at the url at runtime. So we need to copy the necessary font files and images to the right folder.\n\nCLI has a built-in feature to facilitate this task. To copy files, we declare these files in the `copyFiles` property, after the `bundles` property in `aurelia_project/aurelia.json`.\n\nFor instance, this is how you make font-awesome v4 works.\n\n```javascript\n\"bundles\": [ ... ],\n\"copyFiles\": {\n  \"node_modules/font-awesome/fonts/*\": \"font-awesome/fonts\"\n}\n```\n\nThe target folder of copyFiles matches the way you require font-awesome.css\n\n```html\n<require from=\"font-awesome/css/font-awesome.css\"></require>\n```\n\nRemember to deploy `font-awesome/fonts` folder along with your JavaScript bundles to production.\n\n`copyFiles` also works on single file without using wild-card.\n\n```javascript\n\"copyFiles\": {\n  \"node_modules/font-awesome/fonts/fontawesome-webfont.woff\": \"font-awesome/fonts\",\n  \"node_modules/font-awesome/fonts/fontawesome-webfont.woff2\": \"font-awesome/fonts\"\n}\n```\n\n## Setting the baseUrl\n\nSometimes you may want to keep the scripts folder somewhere other than the default location, or move the index.html file a few folders up from the project root. In that case it is possible to set the `baseUrl` property so that the build system uses the correct paths and that bundles get loaded correctly in the browser. The `baseUrl` property should be set in both the `platform` object as well as the `build.targets` object:\n\n<code-listing heading=\"baseUrl\">\n  <source-code lang=\"JavaScript\">\n    \"build\": {\n      \"targets\": [\n        {\n          \"id\": \"web\",\n          \"displayName\": \"Web\",\n          \"port\": 9000,\n          \"index\": \"index.html\",\n          \"baseDir\": \".\",\n          \"output\": \"some/dir/scripts\",\n          \"baseUrl\": \"some/dir/scripts\"\n        }\n      ]\n    },\n    \"platform\": {\n      \"id\": \"web\",\n      \"displayName\": \"Web\",\n      \"port\": 9000,\n      \"index\": \"index.html\",\n      \"baseDir\": \".\",\n      \"output\": \"some/dir/scripts\",\n      \"baseUrl\": \"some/dir/scripts\"\n    },\n  </source-code>\n</code-listing>\n\nThe script tag for the bundle in `index.html` file needs to point to the modified location of the scripts folder as well: `<script src=\"some/dir/scripts/vendor-bundle.js\" data-main=\"aurelia-bootstrapper\"></script>`\n\n## Styling your Application\n\nThere are many ways to style components in Aurelia. The CLI sets up your project to only process styles inside your application's `src` folder. Those styles can then be imported into a view using Aurelia's `require` element.\n\n* If you aren't using any CSS preprocessor, you write css and then simply require it in the view like this:\n\n<code-listing heading=\"Requiring styles.css\">\n  <source-code lang=\"HTML\">\n    <require from=\"./styles.css\"></require>\n  </source-code>\n</code-listing>\n\nFor projects that use a CSS preprocessor (chosen from the `au new app-name` options):\n* Write your styles in the format you chose (styl, sass, less ...).\n* Require the style by `[filename].css` instead of `[filename].[extension]`. This is because, before CLI bundler sees the style file, it is transpiled by a gulp task into a css format file.\n\n> Info: Difference with Webpack\n> Webpack behaves differently, it controls the whole css compilation. With Webpack, you need `<require from=\"./styles.scss\"></require>` if your source file is `styles.scss`.\n\n<code-listing heading=\"Requiring main.scss\">\n  <source-code lang=\"HTML\">\n    <require from=\"./main.css\"></require>\n  </source-code>\n</code-listing>\n\nBear in mind that you can always configure things any way you want by modifying the tasks in the `aurelia_project/tasks` folder.\nFor styling purposes, you can modify the `process-css.js` file.\n\n## Updating A Single Library\n\nTo update a single library use the command `npm install library-name` where library-name is the library that you wish to update.\n\n## Updating Multiple Libraries\n\n* Add the following section to the project's package.json file\n\n```\n\"scripts\": {\n  \"au-update\": \"npm install aurelia-binding@latest aurelia-bootstrapper@latest ...\n}\n```\n\n* List the libraries on a single line separated by a space.\n* Include all of the libraries from the dependencies section of aurelia.json that you want to update.\n* Use the command `npm run au-update` to update all of the libraries in the au-update list above.\n\n## Javascript Minification\n\nThe CLI will minify Javascript out of the box for the staging and production environments:\n\n<code-listing heading=\"Default minification settings\">\n  <source-code lang=\"JavaScript\">\n    \"options\": {\n      \"minify\": \"stage & prod\",\n      \"sourcemaps\": \"dev & stage\"\n    },\n  </source-code>\n</code-listing>\n\nThese options can be found in the `\"build\".\"options\"` section of `aurelia.json`. If you wish to specify the options that are used in the minification process, then replace `\"minify\": \"stage & prod\"` with:\n\n<code-listing heading=\"Default minification settings\">\n  <source-code lang=\"JavaScript\">\n    \"minify\": {\n      \"dev\": false,\n      \"default\": {\n        \"indent_level\": 2\n      },\n      \"stage & prod\": {\n        \"max-line-len\": 100000\n      }\n    },\n  </source-code>\n</code-listing>\n\nThe Aurelia-CLI uses [terser (reincarnation of uglify-es)](https://github.com/fabiosantoscode/terser) for minification, so any option that terser supports (compatible with UglifyJS2 and uglify-es) is also supported by the Aurelia-CLI. With the above configuration, minification will occur for the `stage` and `prod` environments, but not for the `dev` environment. For the `stage` and `prod` environments, both the `indent_level` as well as the `max-line-len` option are passed to the minifier. The `default` key is optional, but allows you to reduce code duplication when multiple environments have similar options.\n\n## Path mappings\n\nDo you have import statements that look like `import {Customer} from '../../../common/models/customer';` ?\n\nConsider creating a path mapping for the `src/common/models` folder, so that you can do: `import {Customer} from 'models/customer';`.\n\nOpen up `aurelia.json`, add `\"models\": \"common/models\"` to the `paths` object:\n\n<code-listing heading=\"Path mappings\">\n  <source-code lang=\"JavaScript\">\n  \"paths\": {\n    \"root\": \"src\",\n    \"resources\": \"resources\",\n    \"elements\": \"resources/elements\",\n    \"attributes\": \"resources/attributes\",\n    \"valueConverters\": \"resources/value-converters\",\n    \"bindingBehaviors\": \"resources/binding-behaviors\",\n    \"models\": \"common/models\"\n  },\n  </source-code>\n</code-listing>\n\nThat should make it work at runtime, but if you use Typescript it's going to tell you that it can't find `models/customer`. To fix that, open up `tsconfig.json`, in the `compilerOptions` add a `paths` and `baseUrl` property:\n\n<code-listing heading=\"tsconfig.json path mappings\">\n  <source-code lang=\"JavaScript\">\n    \"paths\": {\n      \"models/*\": [\"src/common/models/*\"]\n    },\n    \"baseUrl\": \".\"\n  </source-code>\n</code-listing>\n\nYou might have to restart your editor to see the effect of these changes.\n"}