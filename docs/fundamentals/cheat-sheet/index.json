{"name":"Cheat Sheet","description":"Forgot the syntax for bindings? Need to know how to create a custom attribute? This article contains answers to questions like those as well as a bunch of quick snippets for common tasks.","author":{"name":"Rob Eisenberg","url":"http://robeisenberg.com"},"featured":false,"links":{"static":"docs/fundamentals/cheat-sheet","html":"docs/fundamentals/cheat-sheet/index.html","fragment":"docs/fundamentals/cheat-sheet/index-fragment.html","self":"docs/fundamentals/cheat-sheet/index.json"},"content":"\n## Configuration and Startup\n\n```HTML Bootstrapping Older Browsers\n<script src=\"jspm_packages/system.js\"></script>\n<script src=\"config.js\"></script>\n<script>\n  SystemJS.import('aurelia-polyfills').then(function() {\n    return SystemJS.import('webcomponents/webcomponentsjs/MutationObserver');\n  }).then(function() {\n    SystemJS.import('aurelia-bootstrapper');\n  });\n</script>\n```\n\n> Warning: Promises in Edge\n> Currently, the Edge browser has a serious performance problem with its Promise implementation. This deficiency can greatly increase startup time of your app. If you are targeting the Edge browser, it is highly recommended that you use the [bluebird promise](http://bluebirdjs.com/docs/getting-started.html) library to replace Edge's native implementation. You can do this by simply referencing the library prior to loading system.js.\n\n```JavaScript Standard Startup Configuration\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging();\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n```\n```TypeScript Standard Startup Configuration [variant]\nimport {Aurelia} from 'aurelia-framework';\n\nexport function configure(aurelia: Aurelia): void {\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging();\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n```\n\n```JavaScript Explicit Startup Configuration\nimport {LogManager} from 'aurelia-framework';\nimport {ConsoleAppender} from 'aurelia-logging-console';\n\nLogManager.addAppender(new ConsoleAppender());\nLogManager.setLevel(LogManager.logLevel.debug);\n\nexport function configure(aurelia) {\n  aurelia.use\n    .defaultBindingLanguage()\n    .defaultResources()\n    .history()\n    .router()\n    .eventAggregator();\n\n  aurelia.start().then(() => aurelia.setRoot('app', document.body));\n}\n```\n```TypeScript Explicit Startup Configuration [variant]\nimport {LogManager, Aurelia} from 'aurelia-framework';\nimport {ConsoleAppender} from 'aurelia-logging-console';\n\nLogManager.addAppender(new ConsoleAppender());\nLogManager.setLevel(LogManager.logLevel.debug);\n\nexport function configure(aurelia: Aurelia): void {\n  aurelia.use\n    .defaultBindingLanguage()\n    .defaultResources()\n    .history()\n    .router()\n    .eventAggregator();\n\n  aurelia.start().then(() => aurelia.setRoot('app', document.body));\n}\n```\n\n```JavaScript Configuring A Feature\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging()\n    .feature('feature-name', featureConfiguration);\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n```\n```TypeScript Configuring A Feature [variant]\nimport {Aurelia} from 'aurelia-framework';\n\nexport function configure(aurelia: Aurelia): void {\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging()\n    .feature('feature-name', featureConfiguration);\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n```\n\n```JavaScript Installing a Plugin\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging()\n    .plugin('plugin-name', pluginConfiguration);\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n```\n```TypeScript Installing a Plugin [variant]\nimport {Aurelia} from 'aurelia-framework';\n\nexport function configure(aurelia: Aurelia): void {\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging()\n    .plugin('plugin-name', pluginConfiguration);\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n```\n\n## Creating Components\n\nUI components consist of two parts: a view-model and a view. Simply create each part in its own file. Use the same file name but different file extensions for the two parts. For example: _hello${context.language.fileExtension}_ and _hello.html_.\n\n```JavaScript Explicit Configuration\nimport {useView} from 'aurelia-framework';\n\n@useView('./hello.html')\nexport class Hello {\n  ...\n}\n```\n```TypeScript Explicit Configuration [variant]\nimport {useView} from 'aurelia-framework';\n\n@useView('./hello.html')\nexport class Hello {\n  ...\n}\n```\n\n#### The Component Lifecycle\n\nComponents have a well-defined lifecycle:\n\n1. `constructor()` - The view-model's constructor is called first.\n2. `created(owningView: View, myView: View)` - If the view-model implements the `created` callback it is invoked next. At this point in time, the view has also been created and both the view-model and the view are connected to their controller. The created callback will receive the instance of the \"owningView\". This is the view that the component is declared inside of. If the component itself has a view, this will be passed second.\n3. `bind(bindingContext: Object, overrideContext: Object)` - Databinding is then activated on the view and view-model. If the view-model has a `bind` callback, it will be invoked at this time. The \"binding context\" to which the component is being bound will be passed first. An \"override context\" will be passed second. The override context contains information used to traverse the parent hierarchy and can also be used to add any contextual properties that the component wants to add. It should be noted that when the view-model has implemented the `bind` callback, the databinding framework will not invoke the changed handlers for the view-model's bindable properties until the \"next\" time those properties are updated. If you need to perform specific post-processing on your bindable properties, when implementing the `bind` callback, you should do so manually within the callback itself.\n4. `attached()` - Next, the component is attached to the DOM (in document). If the view-model has an `attached` callback, it will be invoked at this time.\n5. `detached()` - At some point in the future, the component may be removed from the DOM. If/When this happens, and if the view-model has a `detached` callback, this is when it will be invoked.\n6. `unbind()` - After a component is detached, it's usually unbound. If your view-model has the `unbind` callback, it will be invoked during this process.\n\n## Dependency Injection\n\n```JavaScript Declaring Dependencies\nimport {inject} from 'aurelia-framework';\nimport {Dep1} from 'dep1';\nimport {Dep2} from 'dep2';\n\n@inject(Dep1, Dep2)\nexport class CustomerDetail {\n  constructor(dep1, dep2) {\n    this.dep1 = dep1;\n    this.dep2 = dep2;\n  }\n}\n```\n```TypeScript Declaring Dependencies [variant]\nimport {autoinject} from 'aurelia-framework';\nimport {Dep1} from 'dep1';\nimport {Dep2} from 'dep2';\n\n@autoinject\nexport class CustomerDetail {\n  constructor(private dep1: Dep1, private dep2: Dep2){ }\n}\n```\n\n```JavaScript Using Resolvers\nimport {Lazy, inject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-fetch-client';\n\n@inject(Lazy.of(HttpClient))\nexport class CustomerDetail {\n  constructor(getHTTP){\n    this.getHTTP = getHTTP;\n  }\n}\n```\n```TypeScript Using Resolvers [variant]\nimport {Lazy, inject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-fetch-client';\n\n@inject(Lazy.of(HttpClient))\nexport class CustomerDetail {\n  constructor(private getHTTP: () => HttpClient){ }\n}\n```\n\n#### Available Resolvers\n\n* `Lazy` - Injects a function for lazily evaluating the dependency.\n    * ex. `Lazy.of(HttpClient)`\n* `All` - Injects an array of all services registered with the provided key.\n    * ex. `All.of(Plugin)`\n* `Optional` - Injects an instance of a class only if it already exists in the container; null otherwise.\n    * ex. `Optional.of(LoggedInUser)`\n* `Parent` - Skips starting dependency resolution from the current container and instead begins the lookup process on the parent container.\n    * ex. `Parent.of(MyCustomElement)`\n* `Factory` - Used to allow injecting dependencies, but also passing data to the constructor.\n    * ex. `Factory.of(CustomClass)`\n* `NewInstance` - Used to inject a new instance of a dependency, without regard for existing instances in the container.\n    * ex. `NewInstance.of(CustomClass).as(Another)`\n\n```JavaScript Explicit Registration\nimport {transient, inject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-fetch-client';\n\n@transient()\n@inject(HttpClient)\nexport class CustomerDetail {\n  constructor(http) {\n    this.http = http;\n  }\n}\n```\n```TypeScript Explicit Registration [variant]\nimport {transient, autoinject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-fetch-client';\n\n@transient()\n@autoinject\nexport class CustomerDetail {\n  constructor(private http: HttpClient) { }\n}\n```\n\n## Templating Basics\n\n```HTML A Simple Template\n<template>\n  <div>Hello World!</div>\n</template>\n```\n\n```HTML Requiring Resources\n<template>\n  <require from='nav-bar'></require>\n\n  <nav-bar router.bind=\"router\"></nav-bar>\n\n  <div class=\"page-host\">\n    <router-view></router-view>\n  </div>\n</template>\n```\n\n> Info: Invalid Table Structure When Dynamically Creating Tables\n> When the browser loads in the template it very helpfully validates the structure of the HTML, notices that you have an invalid tag inside your table definition, and very unhelpfully removes it for you before Aurelia even has a chance to examine your template.\n\nUse of the `as-element` attribute ensures we have a valid HTML table structure at load time, yet we tell Aurelia to treat its contents as though it were a different tag.\n\n```HTML Compose an existing object instance with a view.\n<template>\n  <table>\n    <tr repeat.for=\"r of ['A','B','A','B']\" as-element=\"compose\" view='./template_${r}.html'>\n  </table>\n<template>\n```\n\nFor the above example we can then programmatically choose the embedded template based on an element of our data:\n\n```HTML template_A.html\n<template>\n  <td>I'm an A Row</td><td>Col 2A</td><td>Col 3A</td>\n</template>\n```\n```HTML template_B.html\n<template>\n  <td>I'm an B Row</td><td>Col 2B</td><td>Col 3B</td>\n</template>\n```\n\nNote that when a `containerless` attribute is used, the container is stripped *after* the browser has loaded the DOM elements, and as such this method cannot be used to transform non-HTML compliant structures into compliant ones!\n\n```HTML Illegal Table Code\n<template>\n  <table>\n    <template repeat.for=\"customer of customers\">\n      <tr>\n        <td>${customer.fullName}</td>\n      </tr>\n    </template>\n  </table>\n</template>\n```\n\n```HTML Correct Table Code\n<template>\n  <table>\n    <tr repeat.for=\"customer of customers\">\n      <td>${customer.fullName}</td>\n    </tr>\n  </table>\n</template>\n```\n\n```HTML Illegal Select Code\n<template>\n  <select>\n    <template repeat.for=\"customer of customers\">\n      <option>...</option>\n    </template>\n  </select>\n</template>\n```\n\n```HTML Correct Select Code\n<template>\n  <select>\n    <option repeat.for=\"customer of customers\">...</option>\n  </select>\n</template>\n```\n\n## Databinding\n\n### bind, one-way, two-way & one-time\n\nUse on any HTML attribute.\n\n* `.bind` - Uses the default binding. One-way binding for everything but form controls, which use two-way binding.\n* `.one-way` - Flows data one direction: from the view-model to the view.\n* `.two-way` - Flows data both ways: from view-model to view and from view to view-model.\n* `.one-time` - Renders data once, but does not synchronize changes after the initial render.\n\n```HTML Data Binding Examples\n<template>\n  <input type=\"text\" value.bind=\"firstName\">\n  <input type=\"text\" value.two-way=\"lastName\">\n\n  <a href.one-way=\"profileUrl\">View Profile</a>\n</template>\n```\n\n> Info\n> At the moment inheritance of bindables is not supported. For use cases where `class B extends A` and `B` is used as custom Element/Attribute `@bindable` properties cannot be defined only on `class A`. If inheritance is used, `@bindable` properties should be defined on the instantiated class.\n\n### delegate, trigger\n\nUse on any native or custom DOM event. (Do not include the \"on\" prefix in the event name.)\n\n* `.trigger` - Attaches an event handler directly to the element. When the event fires, the expression will be invoked.\n* `.delegate` - Attaches a single event handler to the document (or nearest shadow DOM boundary) which handles all events of the specified type, properly dispatching them back to their original targets for invocation of the associated expression.\n\n> Info\n> The `$event` value can be passed as an argument to a `delegate` or `trigger` function call if you need to access the event object.\n\n```HTML Event Binding Examples\n<template>\n  <button click.trigger=\"save()\">Save</button>\n  <button click.delegate=\"save($event)\">Save</button>\n</template>\n```\n\n### call\n\nPasses a function reference.\n\n```HTML Call Example\n<template>\n  <button my-attribute.call=\"sayHello()\">Say Hello</button>\n</template>\n```\n\n### ref\n\nCreates a reference to an HTML element, a component or a component's parts.\n\n* `ref=\"someIdentifier\"` or `element.ref=\"someIdentifier\"` - Create a reference to the HTMLElement in the DOM.\n* `attribute-name.ref=\"someIdentifier\"`- Create a reference to a custom attribute's view-model.\n* `view-model.ref=\"someIdentifier\"`- Create a reference to a custom element's view-model.\n* `view.ref=\"someIdentifier\"`- Create a reference to a custom element's view instance (not an HTML Element).\n* `controller.ref=\"someIdentifier\"`- Create a reference to a custom element's controller instance.\n\n```HTML Ref Example\n<template>\n  <input type=\"text\" ref=\"name\"> ${name.value}\n</template>\n```\n\n### String Interpolation\n\nUsed in an element's content. Can be used inside attributes, particularly useful in the `class` and `css` attributes.\n\n```HTML String Interpolation  Example\n<template>\n  <span>${fullName}</span>\n  <div class=\"dot ${color} ${isHappy ? 'green' : 'red'}\"></div>\n</template>\n```\n\n### Binding to Select Elements\n\nA typical select element is rendered using a combination of `value.bind` and `repeat`. You can also bind to arrays of objects and synchronize based on an id (or similar) property.\n\n```HTML Basic Select\n<template>\n  <select value.bind=\"favoriteColor\">\n    <option>Select A Color</option>\n    <option repeat.for=\"color of colors\" value.bind=\"color\">${color}</option>\n  </select>\n</template>\n```\n\n```HTML Select with Object Array\n<template>\n  <select value.bind=\"employeeOfTheMonth\">\n    <option>Select An Employee</option>\n    <option repeat.for=\"employee of employees\" model.bind=\"employee\">${employee.fullName}</option>\n  </select>\n</template>\n```\n\n```HTML Select with Object Id Sync\n<template>\n  <select value.bind=\"employeeOfTheMonthId\">\n    <option>Select An Employee</option>\n    <option repeat.for=\"employee of employees\" model.bind=\"employee.id\">${employee.fullName}</option>\n  </select>\n</template>\n```\n\n```HTML Basic Multi-Select\n<template>\n  <select value.bind=\"favoriteColors\" multiple>\n    <option repeat.for=\"color of colors\" value.bind=\"color\">${color}</option>\n  </select>\n</template>\n```\n\n```HTML Multi-Select with Object Array\n<template>\n  <select value.bind=\"favoriteEmployees\" multiple>\n    <option repeat.for=\"employee of employees\" model.bind=\"employee\">${employee.fullName}</option>\n  </select>\n</template>\n```\n\n### Binding Radios\n\n```HTML Basic Radios\n<template>\n  <label repeat.for=\"color of colors\">\n    <input type=\"radio\" name=\"clrs\" value.bind=\"color\" checked.bind=\"$parent.favoriteColor\">\n    ${color}\n  </label>\n</template>\n```\n\n```HTML Radios with Object Arrays\n<template>\n  <label repeat.for=\"employee of employees\">\n    <input type=\"radio\" name=\"emps\" model.bind=\"employee\" checked.bind=\"$parent.employeeOfTheMonth\">\n    ${employee.fullName}\n  </label>\n</template>\n```\n\n```HTML Radios with a Boolean\n<template>\n  <label><input type=\"radio\" name=\"tacos\" model.bind=\"null\" checked.bind=\"likesTacos\">Unanswered</label>\n  <label><input type=\"radio\" name=\"tacos\" model.bind=\"true\" checked.bind=\"likesTacos\">Yes</label>\n  <label><input type=\"radio\" name=\"tacos\" model.bind=\"false\" checked.bind=\"likesTacos\">No</label>\n</template>\n```\n\n### Binding Checkboxes\n\n> Warning\n> You cannot use a `click.delegate` on checkboxes if you want to attach a method to it. You need to use `change.delegate`.\n\n```HTML Checkboxes with an Array\n<template>\n  <label repeat.for=\"color of colors\">\n    <input type=\"checkbox\" value.bind=\"color\" checked.bind=\"$parent.favoriteColors\" >\n    ${color}\n  </label>\n</template>\n```\n\n```HTML Checkboxes with an Array of Objects\n<template>\n  <label repeat.for=\"employee of employees\">\n    <input type=\"checkbox\" model.bind=\"employee\" checked.bind=\"$parent.favoriteEmployees\">\n    ${employee.fullName}\n  </label>\n</template>\n```\n\n```HTML Checkboxes with Booleans\n<template>\n  <li><label><input type=\"checkbox\" checked.bind=\"wantsFudge\">Fudge</label></li>\n  <li><label><input type=\"checkbox\" checked.bind=\"wantsSprinkles\">Sprinkles</label></li>\n  <li><label><input type=\"checkbox\" checked.bind=\"wantsCherry\">Cherry</label></li>\n</template>\n```\n\n### Binding innerHTML and textContent\n\n```HTML Binding innerHTML\n<template>\n  <div innerhtml.bind=\"htmlProperty | sanitizeHTML\"></div>\n  <div innerhtml=\"${htmlProperty | sanitizeHTML}\"></div>\n</template>\n```\n\n> Danger\n> Always use HTML sanitization. We provide a simple converter that can be used. You are encouraged to use a more complete HTML sanitizer such as [sanitize-html](https://www.npmjs.com/package/sanitize-html).\n\n> Warning\n> Binding using the `innerhtml` attribute simply sets the element's `innerHTML` property.  The markup does not pass through Aurelia's templating system.  Binding expressions and require elements will not be evaluated.\n\n```HTML Binding textContent\n<template>\n  <div textcontent.bind=\"stringProperty\"></div>\n  <div textcontent=\"${stringProperty}\"></div>\n</template>\n```\n\n```HTML Two-Way Editable textContent\n<template>\n  <div textcontent.bind=\"stringProperty\" contenteditable=\"true\"></div>\n</template>\n```\n\n### Binding Style\n\nYou can bind a css string or object to an element's `style` attribute. Use the `style` attribute's alias, `css` when doing string interpolation to ensure your application is compatible with Internet Explorer.\n\n```JavaScript Style Binding Data\nexport class StyleData {\n  constructor() {\n    this.styleString = 'color: red; background-color: blue';\n\n    this.styleObject = {\n      color: 'red',\n      'background-color': 'blue'\n    };\n  }\n}\n```\n```TypeScript Style Binding Data [variant]\nexport class StyleData {\n  styleString: string;\n  styleObject: any;\n\n  constructor() {\n    this.styleString = 'color: red; background-color: blue';\n\n    this.styleObject = {\n      color: 'red',\n      'background-color': 'blue'\n    };\n  }\n}\n```\n\n```HTML Style Binding View\n<template>\n  <div style.bind=\"styleString\"></div>\n  <div style.bind=\"styleObject\"></div>\n</template>\n```\n\n```HTML Illegal Style Interpolation\n<template>\n  <div style=\"width: ${width}px; height: ${height}px;\"></div>\n</template>\n```\n\n```HTML Legal Style Interpolation\n<template>\n  <div css=\"width: ${width}px; height: ${height}px;\"></div>\n</template>\n```\n\n### Declaring Computed Property Dependencies\n\n```JavaScript Computed Properties\nimport {computedFrom} from 'aurelia-framework';\n\nexport class Person {\n  firstName = 'John';\n  lastName = 'Doe';\n\n  @computedFrom('firstName', 'lastName')\n  get fullName(){\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n```\n```TypeScript Computed Properties [variant]\nimport {computedFrom} from 'aurelia-framework';\n\nexport class Person {\n  firstName: string = 'John';\n  lastName: string = 'Doe';\n\n  @computedFrom('firstName', 'lastName')\n  get fullName(): string {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n```\n\n## Templating View Resources\n\n```HTML Conditionally displays an HTML element.\n<template>\n  <div show.bind=\"isSaving\" class=\"spinner\"></div>\n</template>\n```\n\n```HTML Conditionally add/remove an HTML element\n<template>\n  <div if.bind=\"isSaving\" class=\"spinner\"></div>\n</template>\n```\n\n```HTML Conditionally add/remove a group of elements\n<template>\n  <input value.bind=\"firstName\">\n\n  <template if.bind=\"hasErrors\">\n      <i class=\"icon error\"></i>\n      ${errorMessage}\n  </template>\n</template>\n```\n\n```HTML Render an array with a template\n<template>\n  <ul>\n    <li repeat.for=\"customer of customers\">${customer.fullName}</li>\n  </ul>\n</template>\n```\n\n```HTML Render a map with a template\n<template>\n  <ul>\n    <li repeat.for=\"[id, customer] of customers\">${id} ${customer.fullName}</li>\n  </ul>\n</template>\n```\n\n```HTML Render a template N times\n<template>\n  <ul>\n    <li repeat.for=\"i of rating\">*</li>\n  </ul>\n</template>\n```\n\nContextual items available inside a repeat template:\n\n* `$index` - The index of the item in the array.\n* `$first` - True if the item is the first item in the array.\n* `$last` - True if the item is the last item in the array.\n* `$even` - True if the item has an even numbered index.\n* `$odd` - True if the item has an odd numbered index.\n\n> Info: Containerless Template Controllers\n> The `if` and `repeat` attributes are usually placed on the HTML elements that they affect. However, you can also use a `template` tag to group a collection of elements that don't have a parent element and place the `if` or `repeat` on the `template` element instead.\n\n```HTML Dynamically render UI into the DOM based on data\n<template repeat.for=\"item of items\">\n  <compose model.bind=\"item\" view-model=\"widgets/${item.type}\"></compose>\n</template>\n```\n\n```HTML Composing a view only, inheriting the parent binding context\n<template repeat.for=\"item of items\">\n  <compose view=\"my-view.html\"></compose>\n</template>\n```\n\n```HTML Compose an existing object instance with a view\n<template>\n  <div repeat.for=\"item of items\">\n    <compose view=\"my-view.html\" view-model.bind=\"item\">\n  </div>\n</template>\n```\n\n## Routing\n\n```JavaScript Basic Route Configuration\nexport class App {\n  configureRouter(config, router) {\n    this.router = router;\n    config.title = 'Aurelia';\n    config.map([\n      { route: ['', 'home'],       name: 'home',       moduleId: 'home/index' },\n      { route: 'users',            name: 'users',      moduleId: 'users/index',   nav: true },\n      { route: 'users/:id/detail', name: 'userDetail', moduleId: 'users/detail' },\n      { route: 'files*path',       name: 'files',      moduleId: 'files/index',   href:'#files',   nav: true }\n    ]);\n  }\n}\n```\n```TypeScript Basic Route Configuration [variant]\nimport {RouterConfiguration, Router} from 'aurelia-router';\n\nexport class App {\n  configureRouter(config: RouterConfiguration, router: Router): void {\n    this.router = router;\n    config.title = 'Aurelia';\n    config.map([\n      { route: ['', 'home'],       name: 'home',       moduleId: 'home/index' },\n      { route: 'users',            name: 'users',      moduleId: 'users/index',   nav: true },\n      { route: 'users/:id/detail', name: 'userDetail', moduleId: 'users/detail' },\n      { route: 'files*path',       name: 'files',      moduleId: 'files/index',   href:'#files',   nav: true }\n    ]);\n  }\n}\n```\n\n### Route Pattern Options\n\n* static routes\n    - ie 'home' - Matches the string exactly.\n* parameterized routes\n    - ie  'users/:id/detail' - Matches the string and then parses an `id` parameter. Your view-model's `activate` callback will be called with an object that has an `id` property set to the value that was extracted from the url.\n* wildcard routes\n    - ie 'files*path' - Matches the string and then anything that follows it. Your view-model's `activate` callback will be called with an object that has a `path` property set to the wildcard's value.\n\n\n### The Route Screen Activation Lifecycle\n\n* `canActivate(params, routeConfig, navigationInstruction)` - Implement this hook if you want to control whether or not your view-model _can be navigated to_. Return a boolean value, a promise for a boolean value, or a navigation command.\n* `activate(params, routeConfig, navigationInstruction)` - Implement this hook if you want to perform custom logic just before your view-model is displayed. You can optionally return a promise to tell the router to wait to bind and attach the view until after you finish your work.\n* `canDeactivate()` - Implement this hook if you want to control whether or not the router _can navigate away_ from your view-model when moving to a new route. Return a boolean value, a promise for a boolean value, or a navigation command.\n* `deactivate()` - Implement this hook if you want to perform custom logic when your view-model is being navigated away from. You can optionally return a promise to tell the router to wait until after you finish your work.\n\n> Warning: Root Screen Activation\n> Unlike the mapped routes, the root's view-model only has access to the `activate()` hook.\n> However this can also be used to implement logic for _attaching the component_ by returning a promise for a boolean value.\n\nThe `params` object will have a property for each parameter of the route that was parsed, as well as a property for each query string value. `routeConfig` will be the original route configuration object that you set up. `routeConfig` will also have a new `navModel` property, which can be used to change the document title for data loaded by your view-model. For example:\n\n```JavaScript Route Params and NavModel\nimport {autoinject} from 'aurelia-framework';\nimport {UserService} from './user-service';\n\n@inject(UserService)\nexport class UserEditScreen {\n  constructor(userService) {\n    this.userService = userService;\n  }\n\n  activate(params, routeConfig) {\n    return this.userService.getUser(params.id)\n      .then(user => {\n        routeConfig.navModel.setTitle(user.name);\n      });\n  }\n}\n```\n```TypeScript Route Params and NavModel [variant]\nimport {autoinject} from 'aurelia-framework';\nimport {RouteConfig} from 'aurelia-router';\nimport {UserService} from './user-service';\n\n@autoinject\nexport class UserEditScreen {\n  constructor(userService: UserService) { }\n\n  activate(params: any, routeConfig: RouteConfig): Promise<any> {\n    return this.userService.getUser(params.id)\n      .then(user => {\n        routeConfig.navModel.setTitle(user.name);\n      });\n  }\n}\n```\n\n```JavaScript Conventional Routing\nexport class App {\n  configureRouter(config){\n    config.mapUnknownRoutes(instruction => {\n      //check instruction.fragment\n      //return moduleId\n    });\n  }\n}\n```\n```TypeScript Conventional Routing [variant]\nimport {RouterConfiguration} from 'aurelia-router';\n\nexport class App {\n  configureRouter(config: RouterConfiguration): void {\n    config.mapUnknownRoutes(instruction => {\n      //check instruction.fragment\n      //return moduleId\n    });\n  }\n}\n```\n\n```JavaScript Customizing the Navigation Pipeline\nimport {Redirect} from 'aurelia-router';\n\nexport class App {\n  configureRouter(config) {\n    config.title = 'Aurelia';\n    config.addPipelineStep('authorize', AuthorizeStep);\n    config.map([\n      { route: ['welcome'],    name: 'welcome',       moduleId: 'welcome',      nav: true, title:'Welcome' },\n      { route: 'flickr',       name: 'flickr',        moduleId: 'flickr',       nav: true, auth: true },\n      { route: 'child-router', name: 'childRouter',   moduleId: 'child-router', nav: true, title:'Child Router' },\n      { route: '', redirect: 'welcome' }\n    ]);\n  }\n}\n\nclass AuthorizeStep {\n  run(navigationInstruction, next) {\n    if (navigationInstruction.getAllInstructions().some(i => i.config.auth)) {\n      var isLoggedIn = /* insert magic here */false;\n      if (!isLoggedIn) {\n        return next.cancel(new Redirect('login'));\n      }\n    }\n\n    return next();\n  }\n}\n```\n```TypeScript Customizing the Navigation Pipeline [variant]\nimport {Redirect, NavigationInstruction, RouterConfiguration, Next} from 'aurelia-router';\n\nexport class App {\n  configureRouter(config: RouterConfiguration): void {\n    config.title = 'Aurelia';\n    config.addPipelineStep('authorize', AuthorizeStep);\n    config.map([\n      { route: ['welcome'],    name: 'welcome',       moduleId: 'welcome',      nav: true, title:'Welcome' },\n      { route: 'flickr',       name: 'flickr',        moduleId: 'flickr',       nav: true, auth: true },\n      { route: 'child-router', name: 'childRouter',   moduleId: 'child-router', nav: true, title:'Child Router' },\n      { route: '', redirect: 'welcome' }\n    ]);\n  }\n}\n\nclass AuthorizeStep {\n  run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\n    if (navigationInstruction.getAllInstructions().some(i => i.config.auth)) {\n      var isLoggedIn = /* insert magic here */false;\n      if (!isLoggedIn) {\n        return next.cancel(new Redirect('login'));\n      }\n    }\n\n    return next();\n  }\n}\n```\n\n### Configuring PushState\n\nAdd [a base tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base) to the head of your html document. If you're using JSPM, you will also need to configure it with a `baseURL` corresponding to your base tag's `href`. Finally, be sure to set the `config.options.root` to match your base tag's setting.\n\n```JavaScript\nexport class App {\n  configureRouter(config) {\n    config.title = 'Aurelia';\n    config.options.pushState = true;\n    config.options.root = '/';\n    config.map([\n      { route: ['welcome'],    name: 'welcome',     moduleId: 'welcome',      nav: true, title:'Welcome' },\n      { route: 'flickr',       name: 'flickr',      moduleId: 'flickr',       nav: true, auth: true },\n      { route: 'child-router', name: 'childRouter', moduleId: 'child-router', nav: true, title:'Child Router' },\n      { route: '',             redirect: 'welcome' }\n    ]);\n  }\n}\n```\n```TypeScript [variant]\nimport {Redirect, NavigationInstruction, RouterConfiguration} from 'aurelia-router';\n\nexport class App {\n  configureRouter(config: RouterConfiguration): void {\n    config.title = 'Aurelia';\n    config.options.pushState = true;\n    config.options.root = '/';\n    config.map([\n      { route: ['welcome'],    name: 'welcome',     moduleId: 'welcome',      nav: true, title:'Welcome' },\n      { route: 'flickr',       name: 'flickr',      moduleId: 'flickr',       nav: true, auth: true },\n      { route: 'child-router', name: 'childRouter', moduleId: 'child-router', nav: true, title:'Child Router' },\n      { route: '',             redirect: 'welcome' }\n    ]);\n  }\n}\n```\n\n> Warning\n> PushState requires server-side support. Don't forget to configure your server appropriately.\n\n### Reusing an Existing View Model\n\nSince the view model's navigation lifecycle is called only once, you may have problems recognizing that the user switched the route from `Product A` to `Product B` (see below). To work around this issue implement the method `determineActivationStrategy` in your view model and return hints for the router about what you'd like to happen. Available return values are `replace` and `invoke-lifecycle`. Remember, \"lifecycle\" refers to the navigation lifecycle.\n\n```JavaScript Router View Model Activation Control\n//app.js\n\nexport class App {\n  configureRouter(config) {\n    config.title = 'Aurelia';\n    config.map([\n      { route: 'product/a',    moduleId: 'product',     nav: true },\n      { route: 'product/b',    moduleId: 'product',     nav: true },\n    ]);\n  }\n}\n\n//product.js\n\nimport {activationStrategy} from 'aurelia-router';\n\nexport class Product {\n  determineActivationStrategy() {\n    return activationStrategy.replace;\n  }\n}\n```\n```TypeScript Router View Model Activation Control [variant]\nimport {RouterConfiguration} from 'aurelia-router';\n\n//app.ts\n\nexport class App {\n  configureRouter(config: RouterConfiguration): void {\n    config.title = 'Aurelia';\n    config.map([\n      { route: 'product/a',    moduleId: 'product',     nav: true },\n      { route: 'product/b',    moduleId: 'product',     nav: true },\n    ]);\n  }\n}\n\n//product.ts\n\nimport {activationStrategy, RoutableComponentDetermineActivationStrategy} from 'aurelia-router';\n\nexport class Product implements RoutableComponentDetermineActivationStrategy {\n  determineActivationStrategy() {\n    return activationStrategy.replace;\n  }\n}\n```\n\n> Info\n> Alternatively, if the strategy is always the same and you don't want that to be in your view model code, you can add the `activationStrategy` property to your route config instead.\n\n### Rendering multiple ViewPorts\n\n> Info\n> If you don't name a `router-view`, it will be available under the name `'default'`.\n\n```HTML Multi-ViewPort View\n<template>\n  <div class=\"page-host\">\n    <router-view name=\"left\"></router-view>\n  </div>\n  <div class=\"page-host\">\n    <router-view name=\"right\"></router-view>\n  </div>\n</template>\n```\n\n```JavaScript Multi-ViewPort View-Model\nexport class App {\n  configureRouter(config){\n    config.map([{\n      route: 'edit',\n        viewPorts: {\n          left: {\n            moduleId: 'editor'\n          },\n          right: {\n            moduleId: 'preview'\n          }\n        }\n      }]);\n  }\n}\n```\n```TypeScript Multi-ViewPort View-Model [variant]\nimport {RouterConfiguration} from 'aurelia-router';\n\nexport class App {\n  configureRouter(config: RouterConfiguration): void {\n    config.map([{\n      route: 'edit',\n        viewPorts: {\n          left: {\n            moduleId: 'editor'\n          },\n          right: {\n            moduleId: 'preview'\n          }\n        }\n      }]);\n  }\n}\n```\n\n### Generating Route URLs\n\n```JavaScript Generate Route URLs in Code\">\nrouter.generate('routeName', { id: 123 });\n```\n\n```JavaScript Navigating to a Generated Route\nrouter.navigateToRoute('routeName', { id: 123 })\n```\n\n```HTML Rendering an Anchor for a Route\n<template>\n  <a route-href=\"route: routeName; params.bind: { id: user.id }\">${user.name}</a>\n</template>\n```\n\n```HTML Bypassing the Router for a Link\n<template>\n  <a href=\"/my-page\" router-ignore>Click to load my-page from server</a>\n</template>\n```\n\n## Custom Attributes\n\n```JavaScript Simple Attribute Declaration\nimport {inject, customAttribute, DOM} from 'aurelia-framework';\n\n@customAttribute('my-attribute')\n@inject(DOM.Element)\nexport class Show {\n  constructor(element) {\n    this.element = element;\n  }\n\n  valueChanged(newValue, oldValue) {\n    ...\n  }\n}\n```\n```TypeScript Simple Attribute Declaration [variant]\nimport {inject, customAttribute, DOM} from 'aurelia-framework';\n\n@customAttribute('my-attribute')\n@inject(DOM.Element)\nexport class Show {\n  constructor(private element: Element) { }\n\n  valueChanged(newValue, oldValue) {\n    ...\n  }\n}\n```\n\n```HTML Simple Attribute Use\n<template>\n  <div my-attribute=\"literal value\"></div>\n  <div my-attribute.bind=\"an.expression\"></div>\n</template>\n```\n\n```JavaScript Options Attribute Declaration\nimport {customAttribute, bindable} from 'aurelia-framework';\n\n@customAttribute('my-attribute')\nexport class MyAttribute {\n  @bindable foo;\n  @bindable bar;\n\n  fooChanged(newValue, oldValue) { ... }\n\n  barChanged(newValue, oldValue) { ... }\n}\n```\n```TypeScript Options Attribute Declaration [variant]\nimport {customAttribute, bindable} from 'aurelia-framework';\n\n@customAttribute('my-attribute')\nexport class MyAttribute {\n  @bindable foo: any;\n  @bindable bar: any;\n\n  fooChanged(newValue: any, oldValue: any): void { ... }\n\n  barChanged(newValue: any, oldValue: any): void  { ... }\n}\n```\n\n```HTML Options Attribute Use\n<template>\n  <div my-attribute=\"foo: literal value; bar.bind: an.expression\"></div>\n</template>\n```\n\n```JavaScript Dynamic Option Attribute Declaration\nimport {customAttribute, dynamicOptions} from 'aurelia-framework';\n\n@customAttribute('my-attribute')\n@dynamicOptions\nexport class MyAttribute {\n  propertyChanged(propertyName, newValue, oldValue) { ... }\n}\n```\n```TypeScript Dynamic Option Attribute Declaration [variant]\nimport {customAttribute, dynamicOptions} from 'aurelia-framework';\n\n@customAttribute('my-attribute')\n@dynamicOptions\nexport class MyAttribute {\n  propertyChanged(propertyName: string, newValue: any, oldValue: any) { ... }\n}\n```\n\n```HTML Dynamic Option Attribute Use\n<template>\n  <div my-attribute=\"foo: literal value; bar.bind: an.expression\"></div>\n</template>\n```\n\n```JavaScript Bindable Signature (Showing Defaults)\nbindable({\n  name:'myProperty',\n  attribute:'my-property',\n  changeHandler:'myPropertyChanged',\n  defaultBindingMode: bindingMode.oneWay,\n  defaultValue: undefined\n})\n```\n\n```JavaScript Template Controller Attribute Declaration\nimport {BoundViewFactory, ViewSlot, customAttribute, templateController, inject} from 'aurelia-framework';\n\n@customAttribute('naive-if')\n@templateController\n@inject(BoundViewFactory, ViewSlot)\nexport class NaiveIf {\n  constructor(viewFactory, viewSlot) {\n    this.viewFactory = viewFactory;\n    this.viewSlot = viewSlot;\n  }\n\n  valueChanged(newValue) {\n    if (newValue) {\n      let view = this.viewFactory.create();\n      this.viewSlot.add(view);\n    } else {\n      this.viewSlot.removeAll();\n    }\n  }\n}\n```\n```TypeScript Template Controller Attribute Declaration [variant]\nimport {BoundViewFactory, ViewSlot, customAttribute, templateController, autoinject} from 'aurelia-framework';\n\n@customAttribute('naive-if')\n@templateController\n@autoinject\nexport class NaiveIf {\n  constructor(private viewFactory: BoundViewFactory, private viewSlot: ViewSlot) { }\n\n  valueChanged(newValue: any): void {\n    if (newValue) {\n      let view = this.viewFactory.create();\n      this.viewSlot.add(view);\n    } else {\n      this.viewSlot.removeAll();\n    }\n  }\n}\n```\n\n```HTML Template Controller Attribute Use\n<template>\n  <div naive-if.bind=\"an.expression\"></div>\n\n  <template naive-if.bind=\"an.expression\">\n    <div></div>\n    <div></div>\n  </template>\n</template>\n```\n\n## Custom Elements\n\n```JavaScript Custom Element View-Model Declaration\nimport {customElement, bindable} from 'aurelia-framework';\n\n@customElement('say-hello')\nexport class SayHello {\n  @bindable to;\n\n  speak(){\n    alert(`Hello ${this.to}!`);\n  }\n}\n```\n```TypeScript Custom Element View-Model Declaration [variant]\nimport {customElement, bindable} from 'aurelia-framework';\n\n@customElement('say-hello')\nexport class SayHello {\n  @bindable to: string;\n\n  speak(): void {\n    alert(`Hello ${this.to}!`);\n  }\n}\n```\n\n```HTML Custom Element View Declaration\n<template>\n    <button click.trigger=\"speak()\">Say Hello To ${to}</button>\n</template>\n```\n\n```HTML Custom Element Use\n<template>\n  <require from=\"say-hello\"></require>\n\n  <input type=\"text\" ref=\"name\">\n  <say-hello to.bind=\"name.value\"></say-hello>\n</template>\n```\n\n### Custom Element Without View-Model Declaration\n\nAurelia will not search for a JavaScript file if you reference a component with an .html extension.\n\n```HTML Declare Custom Element Without View-Model With Binding\n<template bindable=\"greeting,name\">\n    Say ${greeting} To ${name}\n</template>\n```\n\n```JavaScript Add Global Custom Element Without View-Model\naurelia.use.globalResources('./js-less-component.html');\n```\n\n```HTML Use Custom Element Without View-Model\n<require from=\"./js-less-component.html\"></require>\n\n<js-less-component greeting=\"Hello\" name.bind=\"someProperty\"></js-less-component>\n```\n\n### Custom Element Variable Binding\n\nIt's worth noting that when binding variables to custom elements, use camelCase inside the custom element's View-Model, and dash-case on the html element. See the following example:\n\n```JavaScript Custom Element View-Model Declaration\nimport {bindable} from 'aurelia-framework';\n\nexport class SayHello {\n  @bindable to;\n  @bindable greetingCallback;\n\n  speak(){\n    this.greetingCallback(`Hello ${this.to}!`);\n  }\n}\n```\n```TypeScript Custom Element View-Model Declaration [variant]\nimport {bindable} from 'aurelia-framework';\n\nexport class SayHello {\n  @bindable to: string;\n  @bindable greetingCallback: Function;\n\n  speak(): void {\n    this.greetingCallback(`Hello ${this.to}!`);\n  }\n}\n```\n\n```HTML Custom Element Use\n<template>\n  <require from=\"./say-hello\"></require>\n\n  <input type=\"text\" ref=\"name\">\n  <say-hello to.bind=\"name.value\" greeting-callback.call=\"doSomething($event)\"></say-hello>\n</template>\n```\n\n### Custom Element Options\n\n* `@children(selector)` - Decorates a property to create an array on your class that has its items automatically synchronized based on a query selector against the element's immediate child content.\n* `@child(selector)` - Decorates a property to create a reference to a single immediate child content element.\n* `@processContent(false|Function)` - Tells the compiler that the element's content requires special processing. If you provide `false` to the decorator, the compiler will not process the content of your custom element. It is expected that you will do custom processing yourself. But, you can also supply a custom function that lets you process the content during the view's compilation. That function can then return true/false to indicate whether or not the compiler should also process the content. The function takes the following form `function(compiler, resources, node, instruction):boolean`\n* `@useView(path)` - Specifies a different view to use.\n* `@noView()` - Indicates that this custom element does not have a view and that the author intends for the element to handle its own rendering internally.\n* `@inlineView(markup, dependencies?)` - Allows the developer to provide a string that will be compiled into the view.\n* `@useShadowDOM()` - Causes the view to be rendered in the ShadowDOM. When an element is rendered to ShadowDOM, a special `DOMBoundary` instance can optionally be injected into the constructor. This represents the shadow root.\n* `@containerless()` - Causes the element's view to be rendered without the custom element container wrapping it. This cannot be used in conjunction with `@child`, `@children` or `@useShadowDOM` decorators. It also cannot be uses with surrogate behaviors. Use sparingly.\n\n### SVG Elements\n\nSVG (scalable vector graphic) tags can support Aurelia's custom element `<template>` tags by  nesting the templated code inside a second `<svg>` tag. For example if you had a base `<svg>` element and wanted to add a templated `<rect>` inside it, you would first put your custom tag inside the main `<svg>` tag. Also, make sure the custom element class uses the `@containerless()` decorator.\n\n```JavaScript SVG Custom Element View-Model Declaration\nimport {containerless} from 'aurelia-framework';\n\n@containerless()\nexport class MyCustomRect {\n  ...\n}\n```\n```TypeScript SVG Custom Element View-Model Declaration [variant]\nimport {containerless} from 'aurelia-framework';\n\n@containerless()\nexport class MyCustomRect {\n  ...\n}\n```\n\n```HTML SVG Custom Element View\n<template>\n  <svg>\n    <rect width=\"10\" height=\"10\" fill=\"red\" x=\"50\" y=\"50\"/>\n  </svg>\n</template>\n```\n\n```HTML SVG Custom Element Use\n<template>\n  <require from=\"my-custom-rect\"></require>\n\n  <svg width=\"100\" height=\"100\" >\n    <my-custom-rect></my-custom-rect>\n  </svg>\n</template>\n```\n\n### Template Parts\n\n```HTML Custom Element View with Replaceable Parts\n<template>\n  <ul>\n    <li class=\"foo\" repeat.for=\"item of items\">\n      <template replaceable part=\"item-template\">\n        Original: ${item}\n      </template>\n    </li>\n  <ul>\n</template>\n```\n\n```HTML Custom Element Use with Replacement\n<template>\n  <require from=\"my-element\"></require>\n\n  <my-element>\n    <template replace-part=\"item-template\">\n      Replacement: ${item}\n    </template>\n  </my-element>\n</template>\n```\n\n```HTML Surrogate Behavior Use\n<template role=\"progress-bar\" aria-valuenow.bind=\"progress\" aria-valuemin=\"0\" aria-valuemax=\"100\">\n  <div class=\"bar\">\n    <div class=\"progress\" css=\"width:${progress}%\"></div>\n  </div>\n</template>\n```\n\n### Observable decorator\n\nAurelia exposes a decorator named observable to allow watching for changes to a property and reacting to them.  By convention it will look for a matching method name `${name}Changed`\n\n```JavaScript Correct observable usage\nimport {observable} from 'aurelia-framework';\n\nexport class MyCustomViewModel {\n  @observable name = 'Hello world';\n  nameChanged(newValue, oldValue) {\n    // react to change\n  }\n}\n```\n```TypeScript Correct observable usage [variant]\nimport {observable} from 'aurelia-framework';\n\nexport class MyCustomViewModel {\n  @observable name = 'Hello world';\n  nameChanged(newValue, oldValue) {\n    // react to change\n  }\n}\n```\n\nThe developer can also specify a different method name to use.\n\n```JavaScript Correct observable usage with configured change handler\nimport {observable} from 'aurelia-framework';\n\nexport class MyCustomViewModel {\n  @observable({changeHandler: 'nameChanged'}) name = 'Hello world';\n  nameChanged(newValue, oldValue) {\n    // react to change\n  }\n}\n```\n```TypeScript Correct observable usage with configured change handler [variant]\nimport {observable} from 'aurelia-framework';\n\nexport class MyCustomViewModel {\n  @observable({changeHandler: 'nameChanged'}) name = 'Hello world';\n  nameChanged(newValue, oldValue) {\n    // react to change\n  }\n}\n```\n\n## The Event Aggregator\n\nIf you include the `aurelia-event-aggregator` plugin using \"basicConfiguration\" or \"standardConfiguration\" then the singleton EventAggregator's API will be also present on the `Aurelia` object. You can also create additional instances of the EventAggregator, if needed, and \"merge\" them into any object. To do this, import `includeEventsIn` and invoke it with the object you wish to turn into an event aggregator. For example `includeEventsIn(myObject)`. Now my object has `publish` and `subscribe` methods and can be used in the same way as the global event aggregator, detailed below.\n\n```JavaScript Publishing on a Channel\nimport {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\nexport class APublisher {\n  constructor(eventAggregator) {\n    this.eventAggregator = eventAggregator;\n  }\n\n  publish(){\n    var payload = {};\n    this.eventAggregator.publish('channel name here', payload);\n  }\n}\n```\n```TypeScript Publishing on a Channel [variant]\nimport {autoinject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\n\n@autoinject\nexport class APublisher {\n  constructor(private eventAggregator: EventAggregator) { }\n\n  publish(): void {\n    var payload = {};\n    this.eventAggregator.publish('channel name here', payload);\n  }\n}\n```\n\n```JavaScript Subscribing to a Channel\nimport {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\nexport class ASubscriber {\n  constructor(eventAggregator) {\n    this.eventAggregator = eventAggregator;\n  }\n\n  subscribe() {\n    this.eventAggregator.subscribe('channel name here', payload => {\n        ...\n    });\n  }\n}\n```\n```TypeScript Subscribing to a Channel [variant]\nimport {autoinject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\n\n@autoinject\nexport class ASubscriber {\n  constructor(private eventAggregator: EventAggregator) { }\n\n  subscribe(): void {\n    this.eventAggregator.subscribe('channel name here', payload => {\n        ...\n    });\n  }\n}\n```\n\n```JavaScript Publishing a Message\n//some-message.js\nexport class SomeMessage{ }\n\n//a-publisher.js\nimport {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {SomeMessage} from './some-message';\n\n@inject(EventAggregator)\nexport class APublisher {\n  constructor(eventAggregator) {\n    this.eventAggregator = eventAggregator;\n  }\n\n  publish() {\n    this.eventAggregator.publish(new SomeMessage());\n  }\n}\n```\n```TypeScript Publishing a Message [variant]\n//some-message.ts\nexport class SomeMessage{ }\n\n//a-publisher.ts\nimport {autoinject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {SomeMessage} from './some-message';\n\n@autoinject\nexport class APublisher {\n  constructor(private eventAggregator: EventAggregator) { }\n\n  publish(): void {\n    this.eventAggregator.publish(new SomeMessage());\n  }\n}\n```\n\n```JavaScript Subscribing to a Message Type\nimport {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {SomeMessage} from './some-message';\n\n@inject(EventAggregator)\nexport class ASubscriber {\n  constructor(eventAggregator) {\n    this.eventAggregator = eventAggregator;\n  }\n\n  subscribe(){\n    this.eventAggregator.subscribe(SomeMessage, message => {\n        ...\n    });\n  }\n}\n```\n```TypeScript Subscribing to a Message Type [variant]\nimport {autoinject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {SomeMessage} from './some-message';\n\n@autoinject\nexport class ASubscriber {\n  constructor(private eventAggregator: EventAggregator) { }\n\n  subscribe(): void {\n    this.eventAggregator.subscribe(SomeMessage, message => {\n        ...\n    });\n  }\n}\n```"}