{"name":"Technical Benefits","description":"There are many technical advantages to using Aurelia. In this article, you will find a list of points we think are interesting. Taken together, there is no other SPA framework today that can match Aurelia.","author":{"name":"Rob Eisenberg","url":"http://robeisenberg.com"},"keywords":["Benefits","Capabilities"],"contributors":[],"translators":[],"links":{"static":"docs/overview/technical-benefits","html":"docs/overview/technical-benefits/index.html","fragment":"docs/overview/technical-benefits/index-fragment.html","self":"docs/overview/technical-benefits/index.json"},"content":"\n## [Modern JavaScript](aurelia-doc://section/1/version/1.0.0)\n\n* Fully written in standards-based ES2015+ and TypeScript.\n* Forward compatible with JavaScript technology coming in future ECMAScript specs.\n* Full support for both Babel and TypeScript.\n\n## [Modern DOM](aurelia-doc://section/2/version/1.0.0)\n\n* Consistently leverages the most modern DOM APIs.\n* Bare \"to the metal\" usage of the DOM; no DOM wrappers in order to ensure maximum performance and memory efficiency.\n* Automatically polyfills the DOM where appropriate, in order to support older browsers.\n\n## [Modern Tooling](aurelia-doc://section/3/version/1.0.0)\n\n* Supports modern build tooling via the Aurelia CLI and Webpack, out-of-the-box.\n* Works well with powerful testing tools like Karma and Protractor.\n* Provides a custom Chrome debug panel as well as a VS Code plugin.\n\n## [Code Quality](aurelia-doc://section/4/version/1.0.0)\n\n* Source code is covered by an extensive suite of unit tests.\n* All source is fully linted for style and feature-usage consistency throughout.\n* TypeScript d.ts files and full API documentation are provided for all libraries.\n\n## [Web Component Standards](aurelia-doc://section/5/version/1.0.0)\n\n* Leverages W3C Web Components specs such as HTMLTemplateElement and ShadowDOM.\n* Fully compatible with 3rd-party Web Components, even those originating from other frameworks, such as Polymer.\n* Provides a Web Component-based programming model even on browsers that will never support Web Components.\n\n## [Modularity](aurelia-doc://section/6/version/1.0.0)\n\n* Highly modular development, suitable for small and large-scale apps alike.\n* Native support for feature-based development facilitating parallel development of multiple teams on the same app.\n* Strong component model for high re-use of UI components across apps.\n\n## [Platform Support](aurelia-doc://section/7/version/1.0.0)\n\n* Designed for modern web browsers but supports older browsers, such as IE9, via additional polyfills.\n* Designed for mobile application development in combination with PhoneGap/Cordova/Crosswalk.\n* Designed for desktop application development in combination with Electron or NWJS.\n\n## [Capabilities](aurelia-doc://section/8/version/1.0.0)\n\n* Write apps in ES2015+ and TypeScript.\n* One simple way of creating components that work in a variety of contexts:\n    * Custom Elements\n    * Dynamically Composed UI (data-driven component composition)\n    * Routing/Navigation\n    * Modal Dialogs\n    * Web Components\n    * Progressive Enhancement\n    * Custom scenarios enabled through low-level access to our View Composition Engine\n* Fully-extensible View Compiler, View Engine and View Resource Pipeline.\n* Fully-extensible and adaptive data-binding engine.\n* Powerful and flexible hierarchical dependency injection.\n* Eager/Lazy/Hybrid loading of any/all application resources.\n* Powerful application router with support for encapsulated child routers for multi-team, large-scale development.\n* Optionally create standards-compliant Web Components or use Aurelia to \"shield\" you from unstable specs.\n* Interoperate with any standards-compliant Web Component.\n* Loosely coupled cross-component communication via publish/subscribe.\n* Fully customizable application startup and plugin model.\n* Enables authoring of testable, maintainable and extensible code.\n* Leverage conventions to write less code and get more done.\n* Little to no framework intrusion, so developers can focus on their app, not the framework.\n* Application and package bundling compatible with all major build systems.\n"}