{"name":"Binding: Radios","description":"Data-binding radio inputs with Aurelia.","author":{"name":"Jeremy Danyow","url":"https://danyow.net"},"featured":false,"links":{"static":"docs/binding/radios","html":"docs/binding/radios/index.html","fragment":"docs/binding/radios/index-fragment.html","self":"docs/binding/radios/index.json"},"content":"\n\n## Introduction\n\nA group of radio inputs is a type of \"single select\" interface. Aurelia supports two-way binding any type of property to a group of radio inputs. The examples below illustrate binding number, object, string and boolean properties to sets of radio inputs. In each of the examples there's a common set of steps:\n\n1. Group the radios via the `name` property. Radio buttons that have the same value for the name attribute are in the same \"radio button group\"; only one radio button in a group can be selected at a time.\n2. Define each radio's value using the `model` property.\n3. Two-way bind each radio's `checked` attribute to a \"selected item\" property on the view-model.\n\n## Numbers\n\nLet's start with an example that uses a numeric \"selected item\" property. In this example each radio input will be assigned a number value via the model property. Selecting a radio will cause it's model value to be assigned to the `selectedProductId` property.\n\n```JavaScript app.js\nexport class App {\n  products = [\n    { id: 0, name: 'Motherboard' },\n    { id: 1, name: 'CPU' },\n    { id: 2, name: 'Memory' },\n  ];\n\n  selectedProductId = null;\n}\n```\n```TypeScript app.ts [variant]\nexport interface IProduct {\n    id: number;\n    name: string;\n}\n\nexport class App {\n  products: IProduct[] = [\n    { id: 0, name: 'Motherboard' },\n    { id: 1, name: 'CPU' },\n    { id: 2, name: 'Memory' },\n  ];\n\n  selectedProductId: number = null;\n}\n```\n\n```HTML app.html\n<template>\n  <form>\n    <h4>Products</h4>\n    <label repeat.for=\"product of products\">\n      <input type=\"radio\" name=\"group1\"\n              model.bind=\"product.id\" checked.bind=\"selectedProductId\">\n      ${product.id} - ${product.name}\n    </label>\n    <br>\n    Selected product ID: ${selectedProductId}\n  </form>\n</template>\n```\n\n[Number Demo](https://codesandbox.io/embed/mzjz8pyryp?autoresize=1&fontsize=18&hidenavigation=1&module=%2Fsrc%2Fapp.html&view=preview)\n\n## Objects\n\nThe binding system supports binding all types to radios, including objects. Here's an example that binds a group of radios to a `selectedProduct` object property.\n\n```JavaScript app.js\nexport class App {\n  products = [\n    { id: 0, name: 'Motherboard' },\n    { id: 1, name: 'CPU' },\n    { id: 2, name: 'Memory' },\n  ];\n\n  selectedProduct = null;\n}\n```\n```TypeScript app.ts [variant]\nexport interface IProduct {\n    id: number;\n    name: string;\n}\n\nexport class App {\n  products: IProduct[] = [\n    { id: 0, name: 'Motherboard' },\n    { id: 1, name: 'CPU' },\n    { id: 2, name: 'Memory' },\n  ];\n\n  selectedProduct: IProduct = null;\n}\n```\n\n```HTML app.html\n<template>\n  <form>\n    <h4>Products</h4>\n    <label repeat.for=\"product of products\">\n      <input type=\"radio\" name=\"group2\"\n              model.bind=\"product\" checked.bind=\"selectedProduct\">\n      ${product.id} - ${product.name}\n    </label>\n\n    Selected product: ${selectedProduct.id} - ${selectedProduct.name}\n  </form>\n</template>\n```\n\n[Object Demo](https://codesandbox.io/embed/mqy966y08p?autoresize=1&fontsize=18&hidenavigation=1&module=%2Fsrc%2Fapp.html&view=preview)\n\n## Objects with Matcher\n\nYou may run into situations where the object your input element's model is bound to does not have reference equality to any of the object in your checked attribute is bound to. The objects might match by id, but they may not be the same object instance. To support this scenario you can override Aurelia's default \"matcher\" which is a equality comparison function that looks like this: `(a, b) => a === b`. You can substitute a function of your choosing that has the right logic to compare your objects.\n\n```JavaScript app.js\nexport class App {\n  selectedProduct = { id: 1, name: 'CPU' };\n\n  productMatcher = (a, b) => a.id === b.id;\n}\n```\n```TypeScript app.ts [variant]\nexport interface IProduct {\n    id: number;\n    name: string;\n}\n\nexport class App {\n  selectedProduct: IProduct = { id: 1, name: 'CPU' };\n\n  productMatcher = (a, b) => a.id === b.id;\n}\n```\n\n```HTML app.html\n<template>\n  <form>\n    <h4>Products</h4>\n    <label>\n      <input type=\"radio\" name=\"group3\"\n              model.bind=\"{ id: 0, name: 'Motherboard' }\"\n              matcher.bind=\"productMatcher\"\n              checked.bind=\"selectedProduct\">\n      Motherboard\n    </label>\n    <label>\n      <input type=\"radio\" name=\"group3\"\n              model.bind=\"{ id: 1, name: 'CPU' }\"\n              matcher.bind=\"productMatcher\"\n              checked.bind=\"selectedProduct\">\n      CPU\n    </label>\n    <label>\n      <input type=\"radio\" name=\"group3\"\n              model.bind=\"{ id: 2, name: 'Memory' }\"\n              matcher.bind=\"productMatcher\"\n              checked.bind=\"selectedProduct\">\n      Memory\n    </label>\n\n    Selected product: ${selectedProduct.id} - ${selectedProduct.name}\n  </form>\n</template>\n```\n\n[Object Matcher Demo](https://codesandbox.io/embed/1ok5l0z29j?autoresize=1&fontsize=18&hidenavigation=1&module=%2Fsrc%2Fapp.html&view=preview)\n\n## Booleans\n\nIn this example each radio input is assigned one of three literal values: `null`, `true` and `false`. Selecting one of the radios will assign it's value to the `likesCake` property.\n\n```JavaScript app.js\nexport class App {\n  likesCake = null;\n}\n```\n```TypeScript app.ts [variant]\nexport class App {\n  likesCake = null;\n}\n```\n\n```HTML app.html\n<template>\n  <form>\n    <h4>Do you like cake?</h4>\n    <label>\n      <input type=\"radio\" name=\"group3\"\n              model.bind=\"null\" checked.bind=\"likesCake\">\n      Don't Know\n    </label>\n    <label>\n      <input type=\"radio\" name=\"group3\"\n              model.bind=\"true\" checked.bind=\"likesCake\">\n      Yes\n    </label>\n    <label>\n      <input type=\"radio\" name=\"group3\"\n              model.bind=\"false\" checked.bind=\"likesCake\">\n      No\n    </label>\n\n    likesCake = ${likesCake}\n  </form>\n</template>\n```\n\n[Boolean Demo](https://codesandbox.io/embed/qzyly2kxy4?autoresize=1&fontsize=18&hidenavigation=1&module=%2Fsrc%2Fapp.html&view=preview)\n\n## Strings\n\nFinally, here's an example using strings. This is example is unique because it does not use `model.bind` to assign each radio's value. Instead the input's standard `value` attribute is used. Normally we cannot use the standard `value` attribute in conjunction with checked binding because it coerces anything it's assigned to a string.\n\n```JavaScript app.js\nexport class App {\n  products = ['Motherboard', 'CPU', 'Memory'];\n  selectedProduct = null;\n}\n```\n```TypeScript app.ts [variant]\nexport class App {\n  products: string[] = ['Motherboard', 'CPU', 'Memory'];\n  selectedProduct = null;\n}\n```\n\n```HTML app.html\n<template>\n  <form>\n    <h4>Products</h4>\n    <label repeat.for=\"product of products\">\n      <input type=\"radio\" name=\"group4\"\n              value.bind=\"product\" checked.bind=\"selectedProduct\">\n      ${product}\n    </label>\n    <br>\n    Selected product: ${selectedProduct}\n  </form>\n</template>\n```\n\n[String Demo](https://codesandbox.io/embed/52nwnv7vpp?autoresize=1&fontsize=18&hidenavigation=1&module=%2Fsrc%2Fapp.html&view=preview)\n"}