{"name":"Binding: The Binding Engine","description":"How data-binding works in Aurelia.","author":{"name":"Various authors"},"featured":false,"links":{"static":"docs/binding/binding-engine","html":"docs/binding/binding-engine/index.html","fragment":"docs/binding/binding-engine/index-fragment.html","self":"docs/binding/binding-engine/index.json"},"content":"\n\n## Introduction\n\nThe binding engine is an utility export of `aurelia-binding` module, which gives some higher level APIs for dealing with observation, which leverages aurelia binding system primitives under the hood.\n\n## How to install\n\nRetrieving an instance of the `BindingEngine` by injecting it to any of your class inside an Aurelia application:\n\n```js\nimport { BindingEngine } from 'aurelia-framework'; // or 'aurelia-binding'\n\nexport class MyViewModel {\n\n  static inject() {\n    return [BindingEngine]\n  }\n\n  constructor(bindingEngine) {\n    //\n  }\n}\n```\n\n> Note: you can also construct the `BindingEngine` instance directly, or get it from a container. The example goes with simplest code.\n\nNow let's use it to observe changes on objects (arrays are objects too). Generally, we will use `propertyObserver(obj, propertyName)` for object property value changes and `collectionObserver(collection)` for collection mutation.\n\n## Observing a property on an object\n\n* `propertyObserver(obj, propertyName)` returns a `PropertyObserver` object, with a public method `subscribe` that can be used like the following example:\n\n```js\n  bindingEngine\n    .propertyObserver(myObject, 'myObjectPropertyName')\n    .subscribe((newValue, oldValue) => {\n      // handle value change here\n    });\n```\n\n## Observing a collection mutation\n\n* `collectionObserver(collection)` returns a `CollectionObserver` object, with a public method `subscribe` that can be used like the following example:\n\n```js\n  bindingEngine\n    .collectionObserver(myCollection)\n    .subscribe((splice) => {\n      // do something with the mutated collection\n    })\n```\n\n`splice` is an object with `ICollectionObserverSplice` interface, source code [here](https://github.com/aurelia/binding/blob/b42630b9ef94f84f39e450d959ddaa721d82e5d5/src/aurelia-binding.d.ts#L148)\n\n## Observing an expression on an object\n\nOften times you would want to observe a chain of property accesses (or a path), binding engine also has an API to support this. You can use `expressionObserver(obj, expressionString)` to create an observer, that will notify you when any property within the path of `expressionString` has been changed, like the following example:\n\n```js\n  bindingEngine\n    .expressionObserver(this, 'project.name')\n    .subscribe((newProjectName, oldProjectName) => {\n      // do something with the new project name value\n    });\n```"}