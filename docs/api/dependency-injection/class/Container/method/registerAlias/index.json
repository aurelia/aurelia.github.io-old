{"links":{"static":"docs/api/dependency-injection/class/Container/method/registerAlias","html":"docs/api/dependency-injection/class/Container/method/registerAlias/index.html","fragment":"docs/api/dependency-injection/class/Container/method/registerAlias/index-fragment.html","self":"docs/api/dependency-injection/class/Container/method/registerAlias/index.json"},"name":"registerAlias","kindString":"Method","flags":{"isExported":true},"signatures":[{"name":"registerAlias","kindString":"Call signature","flags":{},"comment":{"shortText":"Registers an additional key that serves as an alias to the original DI key.","returns":"The resolver that was registered.\n"},"parameters":[{"name":"originalKey","kindString":"Parameter","flags":{},"comment":{"text":"The key that originally identified the dependency; usually a constructor function."},"type":{"type":"intrinsic","name":"any"}},{"name":"aliasKey","kindString":"Parameter","flags":{},"comment":{"text":"An alternate key which can also be used to resolve the same dependency  as the original."},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"reference","name":"Resolver","id":614}}],"sources":[{"fileName":"aurelia-dependency-injection.d.ts","line":429,"character":17}]}